ARM GAS  /tmp/ccUcNrG8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_ADC_Init,"ax",%progbits
  19              		.align	2
  20              		.global	HAL_ADC_Init
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADC_Init:
  25              	.LFB63:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @version V1.0.4
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @date    29-April-2016
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
ARM GAS  /tmp/ccUcNrG8.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
ARM GAS  /tmp/ccUcNrG8.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
ARM GAS  /tmp/ccUcNrG8.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/ccUcNrG8.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     @endverbatim
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /tmp/ccUcNrG8.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      without specific prior written permission.
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************  
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              ((uint32_t) 2)
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             ((uint32_t) 2)
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ((uint32_t) 1)
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
ARM GAS  /tmp/ccUcNrG8.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccUcNrG8.s 			page 8


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  27              		.loc 1 375 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 48
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 8CB0     		sub	sp, sp, #48
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 56
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  43              		.loc 1 376 0
  44 0008 0023     		movs	r3, #0
  45 000a 87F82F30 		strb	r3, [r7, #47]
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0;
  46              		.loc 1 377 0
  47 000e 0023     		movs	r3, #0
  48 0010 BB62     		str	r3, [r7, #40]
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0;
  49              		.loc 1 378 0
  50 0012 0023     		movs	r3, #0
  51 0014 3B62     		str	r3, [r7, #32]
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0;
  52              		.loc 1 379 0
  53 0016 0023     		movs	r3, #0
  54 0018 7B62     		str	r3, [r7, #36]
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
  55              		.loc 1 382 0
  56 001a 7B68     		ldr	r3, [r7, #4]
  57 001c 002B     		cmp	r3, #0
  58 001e 01D1     		bne	.L2
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
  59              		.loc 1 384 0
  60 0020 0123     		movs	r3, #1
  61 0022 E3E0     		b	.L3
  62              	.L2:
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
  63              		.loc 1 394 0
ARM GAS  /tmp/ccUcNrG8.s 			page 9


  64 0024 7B68     		ldr	r3, [r7, #4]
  65 0026 9B68     		ldr	r3, [r3, #8]
  66 0028 002B     		cmp	r3, #0
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  67              		.loc 1 411 0
  68 002a 7B68     		ldr	r3, [r7, #4]
  69 002c 9B6A     		ldr	r3, [r3, #40]
  70 002e 002B     		cmp	r3, #0
  71 0030 09D1     		bne	.L5
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  72              		.loc 1 414 0
  73 0032 7B68     		ldr	r3, [r7, #4]
  74 0034 0022     		movs	r2, #0
  75 0036 DA62     		str	r2, [r3, #44]
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  76              		.loc 1 417 0
  77 0038 7B68     		ldr	r3, [r7, #4]
  78 003a 0022     		movs	r2, #0
  79 003c 83F82420 		strb	r2, [r3, #36]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  80              		.loc 1 420 0
  81 0040 7868     		ldr	r0, [r7, #4]
  82 0042 FFF7FEFF 		bl	HAL_ADC_MspInit
  83              	.L5:
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  84              		.loc 1 428 0
  85 0046 7868     		ldr	r0, [r7, #4]
  86 0048 FFF7FEFF 		bl	ADC_ConversionStop_Disable
ARM GAS  /tmp/ccUcNrG8.s 			page 10


  87 004c 0346     		mov	r3, r0
  88 004e 87F82F30 		strb	r3, [r7, #47]
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  89              		.loc 1 433 0
  90 0052 7B68     		ldr	r3, [r7, #4]
  91 0054 9B6A     		ldr	r3, [r3, #40]
  92 0056 03F01003 		and	r3, r3, #16
  93 005a 002B     		cmp	r3, #0
  94 005c 40F0BB80 		bne	.L6
  95              		.loc 1 433 0 is_stmt 0 discriminator 1
  96 0060 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  97 0064 002B     		cmp	r3, #0
  98 0066 40F0B680 		bne	.L6
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
  99              		.loc 1 437 0 is_stmt 1
 100 006a 7B68     		ldr	r3, [r7, #4]
 101 006c 9B6A     		ldr	r3, [r3, #40]
 102 006e 23F48853 		bic	r3, r3, #4352
 103 0072 23F00203 		bic	r3, r3, #2
 104 0076 43F00202 		orr	r2, r3, #2
 105 007a 7B68     		ldr	r3, [r7, #4]
 106 007c 9A62     		str	r2, [r3, #40]
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                               |
 107              		.loc 1 453 0
 108 007e 7B68     		ldr	r3, [r7, #4]
 109 0080 5A68     		ldr	r2, [r3, #4]
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 110              		.loc 1 454 0
 111 0082 7B68     		ldr	r3, [r7, #4]
 112 0084 DB69     		ldr	r3, [r3, #28]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 113              		.loc 1 453 0
 114 0086 1A43     		orrs	r2, r2, r3
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 115              		.loc 1 455 0
ARM GAS  /tmp/ccUcNrG8.s 			page 11


 116 0088 7B68     		ldr	r3, [r7, #4]
 117 008a D968     		ldr	r1, [r3, #12]
 118 008c 0223     		movs	r3, #2
 119 008e FB61     		str	r3, [r7, #28]
 120              	.LBB28:
 121              	.LBB29:
 122              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccUcNrG8.s 			page 12


  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccUcNrG8.s 			page 13


 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
ARM GAS  /tmp/ccUcNrG8.s 			page 14


 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccUcNrG8.s 			page 15


 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccUcNrG8.s 			page 16


 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
ARM GAS  /tmp/ccUcNrG8.s 			page 17


 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
ARM GAS  /tmp/ccUcNrG8.s 			page 18


 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccUcNrG8.s 			page 19


 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
ARM GAS  /tmp/ccUcNrG8.s 			page 20


 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 123              		.loc 2 531 0
 124 0090 FB69     		ldr	r3, [r7, #28]
 125              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 126 0092 93FAA3F3 		rbit r3, r3
 127              	@ 0 "" 2
 128              		.thumb
 129 0096 BB61     		str	r3, [r7, #24]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 130              		.loc 2 544 0
 131 0098 BB69     		ldr	r3, [r7, #24]
 132              	.LBE29:
 133              	.LBE28:
 134              		.loc 1 455 0
 135 009a B3FA83F3 		clz	r3, r3
 136 009e 01FA03F3 		lsl	r3, r1, r3
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 137              		.loc 1 454 0
 138 00a2 1343     		orrs	r3, r3, r2
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 139              		.loc 1 453 0
ARM GAS  /tmp/ccUcNrG8.s 			page 21


 140 00a4 3A6A     		ldr	r2, [r7, #32]
 141 00a6 1343     		orrs	r3, r3, r2
 142 00a8 3B62     		str	r3, [r7, #32]
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 143              		.loc 1 461 0
 144 00aa 7B68     		ldr	r3, [r7, #4]
 145 00ac 9B68     		ldr	r3, [r3, #8]
 146 00ae B3F5807F 		cmp	r3, #256
 147 00b2 03D0     		beq	.L8
 148              		.loc 1 461 0 is_stmt 0 discriminator 2
 149 00b4 7B68     		ldr	r3, [r7, #4]
 150 00b6 9B68     		ldr	r3, [r3, #8]
 151 00b8 012B     		cmp	r3, #1
 152 00ba 02D1     		bne	.L9
 153              	.L8:
 154              		.loc 1 461 0 discriminator 3
 155 00bc 4FF48073 		mov	r3, #256
 156 00c0 00E0     		b	.L10
 157              	.L9:
 158              		.loc 1 461 0 discriminator 4
 159 00c2 0023     		movs	r3, #0
 160              	.L10:
 161              		.loc 1 461 0 discriminator 6
 162 00c4 BA6A     		ldr	r2, [r7, #40]
 163 00c6 1343     		orrs	r3, r3, r2
 164 00c8 BB62     		str	r3, [r7, #40]
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 165              		.loc 1 466 0 is_stmt 1 discriminator 6
 166 00ca 7B68     		ldr	r3, [r7, #4]
 167 00cc 5B69     		ldr	r3, [r3, #20]
 168 00ce 012B     		cmp	r3, #1
 169 00d0 24D1     		bne	.L11
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 170              		.loc 1 468 0
 171 00d2 7B68     		ldr	r3, [r7, #4]
 172 00d4 DB68     		ldr	r3, [r3, #12]
 173 00d6 002B     		cmp	r3, #0
 174 00d8 14D1     		bne	.L12
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 175              		.loc 1 472 0
 176 00da 7B68     		ldr	r3, [r7, #4]
 177 00dc 9B69     		ldr	r3, [r3, #24]
 178 00de 5A1E     		subs	r2, r3, #1
 179 00e0 4FF46043 		mov	r3, #57344
ARM GAS  /tmp/ccUcNrG8.s 			page 22


 180 00e4 7B61     		str	r3, [r7, #20]
 181              	.LBB30:
 182              	.LBB31:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 183              		.loc 2 531 0
 184 00e6 7B69     		ldr	r3, [r7, #20]
 185              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 186 00e8 93FAA3F3 		rbit r3, r3
 187              	@ 0 "" 2
 188              		.thumb
 189 00ec 3B61     		str	r3, [r7, #16]
 190              		.loc 2 544 0
 191 00ee 3B69     		ldr	r3, [r7, #16]
 192              	.LBE31:
 193              	.LBE30:
 194              		.loc 1 472 0
 195 00f0 B3FA83F3 		clz	r3, r3
 196 00f4 02FA03F3 		lsl	r3, r2, r3
 197 00f8 43F40063 		orr	r3, r3, #2048
 198 00fc BA6A     		ldr	r2, [r7, #40]
 199 00fe 1343     		orrs	r3, r3, r2
 200 0100 BB62     		str	r3, [r7, #40]
 201 0102 0BE0     		b	.L11
 202              	.L12:
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 203              		.loc 1 481 0
 204 0104 7B68     		ldr	r3, [r7, #4]
 205 0106 9B6A     		ldr	r3, [r3, #40]
 206 0108 43F02002 		orr	r2, r3, #32
 207 010c 7B68     		ldr	r3, [r7, #4]
 208 010e 9A62     		str	r2, [r3, #40]
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 209              		.loc 1 484 0
 210 0110 7B68     		ldr	r3, [r7, #4]
 211 0112 DB6A     		ldr	r3, [r3, #44]
 212 0114 43F00102 		orr	r2, r3, #1
 213 0118 7B68     		ldr	r3, [r7, #4]
 214 011a DA62     		str	r2, [r3, #44]
 215              	.L11:
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 216              		.loc 1 489 0
 217 011c 7B68     		ldr	r3, [r7, #4]
 218 011e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccUcNrG8.s 			page 23


 219 0120 7A68     		ldr	r2, [r7, #4]
 220 0122 1268     		ldr	r2, [r2]
 221 0124 5268     		ldr	r2, [r2, #4]
 222 0126 22F46941 		bic	r1, r2, #59648
 223 012a BA6A     		ldr	r2, [r7, #40]
 224 012c 0A43     		orrs	r2, r2, r1
 225 012e 5A60     		str	r2, [r3, #4]
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 226              		.loc 1 496 0
 227 0130 7B68     		ldr	r3, [r7, #4]
 228 0132 1A68     		ldr	r2, [r3]
 229 0134 7B68     		ldr	r3, [r7, #4]
 230 0136 1B68     		ldr	r3, [r3]
 231 0138 9968     		ldr	r1, [r3, #8]
 232 013a 2E4B     		ldr	r3, .L20
 233 013c 0B40     		ands	r3, r3, r1
 234 013e 396A     		ldr	r1, [r7, #32]
 235 0140 0B43     		orrs	r3, r3, r1
 236 0142 9360     		str	r3, [r2, #8]
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 237              		.loc 1 512 0
 238 0144 7B68     		ldr	r3, [r7, #4]
 239 0146 9B68     		ldr	r3, [r3, #8]
 240 0148 B3F5807F 		cmp	r3, #256
 241 014c 03D0     		beq	.L14
 242              		.loc 1 512 0 is_stmt 0 discriminator 1
 243 014e 7B68     		ldr	r3, [r7, #4]
 244 0150 9B68     		ldr	r3, [r3, #8]
 245 0152 012B     		cmp	r3, #1
 246 0154 0FD1     		bne	.L15
 247              	.L14:
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 248              		.loc 1 514 0 is_stmt 1
 249 0156 7B68     		ldr	r3, [r7, #4]
 250 0158 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccUcNrG8.s 			page 24


 251 015a 5A1E     		subs	r2, r3, #1
 252 015c 4FF47003 		mov	r3, #15728640
 253 0160 FB60     		str	r3, [r7, #12]
 254              	.LBB32:
 255              	.LBB33:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 256              		.loc 2 531 0
 257 0162 FB68     		ldr	r3, [r7, #12]
 258              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 259 0164 93FAA3F3 		rbit r3, r3
 260              	@ 0 "" 2
 261              		.thumb
 262 0168 BB60     		str	r3, [r7, #8]
 263              		.loc 2 544 0
 264 016a BB68     		ldr	r3, [r7, #8]
 265              	.LBE33:
 266              	.LBE32:
 267              		.loc 1 514 0
 268 016c B3FA83F3 		clz	r3, r3
 269 0170 02FA03F3 		lsl	r3, r2, r3
 270 0174 7B62     		str	r3, [r7, #36]
 271              	.L15:
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 272              		.loc 1 517 0
 273 0176 7B68     		ldr	r3, [r7, #4]
 274 0178 1B68     		ldr	r3, [r3]
 275 017a 7A68     		ldr	r2, [r7, #4]
 276 017c 1268     		ldr	r2, [r2]
 277 017e D26A     		ldr	r2, [r2, #44]
 278 0180 22F47001 		bic	r1, r2, #15728640
 279 0184 7A6A     		ldr	r2, [r7, #36]
 280 0186 0A43     		orrs	r2, r2, r1
 281 0188 DA62     		str	r2, [r3, #44]
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 282              		.loc 1 527 0
 283 018a 7B68     		ldr	r3, [r7, #4]
 284 018c 1B68     		ldr	r3, [r3]
 285 018e 9A68     		ldr	r2, [r3, #8]
 286 0190 194B     		ldr	r3, .L20+4
 287 0192 1340     		ands	r3, r3, r2
 288 0194 3A6A     		ldr	r2, [r7, #32]
 289 0196 9342     		cmp	r3, r2
 290 0198 0BD1     		bne	.L17
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
ARM GAS  /tmp/ccUcNrG8.s 			page 25


 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 291              		.loc 1 534 0
 292 019a 7B68     		ldr	r3, [r7, #4]
 293 019c 0022     		movs	r2, #0
 294 019e DA62     		str	r2, [r3, #44]
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 295              		.loc 1 537 0
 296 01a0 7B68     		ldr	r3, [r7, #4]
 297 01a2 9B6A     		ldr	r3, [r3, #40]
 298 01a4 23F00303 		bic	r3, r3, #3
 299 01a8 43F00102 		orr	r2, r3, #1
 300 01ac 7B68     		ldr	r3, [r7, #4]
 301 01ae 9A62     		str	r2, [r3, #40]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 302              		.loc 1 527 0
 303 01b0 1AE0     		b	.L19
 304              	.L17:
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 305              		.loc 1 544 0
 306 01b2 7B68     		ldr	r3, [r7, #4]
 307 01b4 9B6A     		ldr	r3, [r3, #40]
 308 01b6 23F01203 		bic	r3, r3, #18
 309 01ba 43F01002 		orr	r2, r3, #16
 310 01be 7B68     		ldr	r3, [r7, #4]
 311 01c0 9A62     		str	r2, [r3, #40]
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 312              		.loc 1 549 0
 313 01c2 7B68     		ldr	r3, [r7, #4]
 314 01c4 DB6A     		ldr	r3, [r3, #44]
 315 01c6 43F00102 		orr	r2, r3, #1
 316 01ca 7B68     		ldr	r3, [r7, #4]
 317 01cc DA62     		str	r2, [r3, #44]
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 318              		.loc 1 551 0
 319 01ce 0123     		movs	r3, #1
 320 01d0 87F82F30 		strb	r3, [r7, #47]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 321              		.loc 1 527 0
 322 01d4 08E0     		b	.L19
 323              	.L6:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccUcNrG8.s 			page 26


 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 324              		.loc 1 558 0
 325 01d6 7B68     		ldr	r3, [r7, #4]
 326 01d8 9B6A     		ldr	r3, [r3, #40]
 327 01da 43F01002 		orr	r2, r3, #16
 328 01de 7B68     		ldr	r3, [r7, #4]
 329 01e0 9A62     		str	r2, [r3, #40]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 330              		.loc 1 560 0
 331 01e2 0123     		movs	r3, #1
 332 01e4 87F82F30 		strb	r3, [r7, #47]
 333              	.L19:
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 334              		.loc 1 564 0
 335 01e8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 336              	.L3:
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 337              		.loc 1 565 0
 338 01ec 1846     		mov	r0, r3
 339 01ee 3037     		adds	r7, r7, #48
 340              	.LCFI3:
 341              		.cfi_def_cfa_offset 8
 342 01f0 BD46     		mov	sp, r7
 343              	.LCFI4:
 344              		.cfi_def_cfa_register 13
 345              		@ sp needed
 346 01f2 80BD     		pop	{r7, pc}
 347              	.L21:
 348              		.align	2
 349              	.L20:
 350 01f4 FDF7E1FF 		.word	-1968131
 351 01f8 FE0E1FFF 		.word	-14741762
 352              		.cfi_endproc
 353              	.LFE63:
 355              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 356              		.align	2
 357              		.global	HAL_ADC_DeInit
 358              		.thumb
 359              		.thumb_func
 361              	HAL_ADC_DeInit:
 362              	.LFB64:
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/ccUcNrG8.s 			page 27


 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 363              		.loc 1 576 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 16
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0000 80B5     		push	{r7, lr}
 368              	.LCFI5:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 84B0     		sub	sp, sp, #16
 373              	.LCFI6:
 374              		.cfi_def_cfa_offset 24
 375 0004 00AF     		add	r7, sp, #0
 376              	.LCFI7:
 377              		.cfi_def_cfa_register 7
 378 0006 7860     		str	r0, [r7, #4]
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 379              		.loc 1 577 0
 380 0008 0023     		movs	r3, #0
 381 000a FB73     		strb	r3, [r7, #15]
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 382              		.loc 1 580 0
 383 000c 7B68     		ldr	r3, [r7, #4]
 384 000e 002B     		cmp	r3, #0
 385 0010 01D1     		bne	.L23
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 386              		.loc 1 582 0
 387 0012 0123     		movs	r3, #1
 388 0014 ADE0     		b	.L24
 389              	.L23:
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 390              		.loc 1 589 0
 391 0016 7B68     		ldr	r3, [r7, #4]
 392 0018 9B6A     		ldr	r3, [r3, #40]
 393 001a 43F00202 		orr	r2, r3, #2
 394 001e 7B68     		ldr	r3, [r7, #4]
 395 0020 9A62     		str	r2, [r3, #40]
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 396              		.loc 1 593 0
 397 0022 7868     		ldr	r0, [r7, #4]
 398 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
ARM GAS  /tmp/ccUcNrG8.s 			page 28


 399 0028 0346     		mov	r3, r0
 400 002a FB73     		strb	r3, [r7, #15]
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 401              		.loc 1 598 0
 402 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 403 002e 002B     		cmp	r3, #0
 404 0030 40F09A80 		bne	.L25
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 405              		.loc 1 606 0
 406 0034 7B68     		ldr	r3, [r7, #4]
 407 0036 1B68     		ldr	r3, [r3]
 408 0038 6FF01F02 		mvn	r2, #31
 409 003c 1A60     		str	r2, [r3]
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 410              		.loc 1 610 0
 411 003e 7B68     		ldr	r3, [r7, #4]
 412 0040 1A68     		ldr	r2, [r3]
 413 0042 7B68     		ldr	r3, [r7, #4]
 414 0044 1B68     		ldr	r3, [r3]
 415 0046 5968     		ldr	r1, [r3, #4]
 416 0048 4C4B     		ldr	r3, .L26
 417 004a 0B40     		ands	r3, r3, r1
 418 004c 5360     		str	r3, [r2, #4]
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 419              		.loc 1 616 0
 420 004e 7B68     		ldr	r3, [r7, #4]
 421 0050 1A68     		ldr	r2, [r3]
 422 0052 7B68     		ldr	r3, [r7, #4]
 423 0054 1B68     		ldr	r3, [r3]
 424 0056 9968     		ldr	r1, [r3, #8]
 425 0058 494B     		ldr	r3, .L26+4
 426 005a 0B40     		ands	r3, r3, r1
 427 005c 9360     		str	r3, [r2, #8]
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  /tmp/ccUcNrG8.s 			page 29


 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 428              		.loc 1 623 0
 429 005e 7B68     		ldr	r3, [r7, #4]
 430 0060 1B68     		ldr	r3, [r3]
 431 0062 7A68     		ldr	r2, [r7, #4]
 432 0064 1268     		ldr	r2, [r2]
 433 0066 D268     		ldr	r2, [r2, #12]
 434 0068 02F07F42 		and	r2, r2, #-16777216
 435 006c DA60     		str	r2, [r3, #12]
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 436              		.loc 1 628 0
 437 006e 7B68     		ldr	r3, [r7, #4]
 438 0070 1B68     		ldr	r3, [r3]
 439 0072 7A68     		ldr	r2, [r7, #4]
 440 0074 1268     		ldr	r2, [r2]
 441 0076 1269     		ldr	r2, [r2, #16]
 442 0078 02F04042 		and	r2, r2, #-1073741824
 443 007c 1A61     		str	r2, [r3, #16]
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 444              		.loc 1 634 0
 445 007e 7B68     		ldr	r3, [r7, #4]
 446 0080 1A68     		ldr	r2, [r3]
 447 0082 7B68     		ldr	r3, [r7, #4]
 448 0084 1B68     		ldr	r3, [r3]
 449 0086 5B69     		ldr	r3, [r3, #20]
 450 0088 23F47F63 		bic	r3, r3, #4080
 451 008c 23F00F03 		bic	r3, r3, #15
 452 0090 5361     		str	r3, [r2, #20]
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 453              		.loc 1 636 0
 454 0092 7B68     		ldr	r3, [r7, #4]
 455 0094 1A68     		ldr	r2, [r3]
 456 0096 7B68     		ldr	r3, [r7, #4]
 457 0098 1B68     		ldr	r3, [r3]
 458 009a 9B69     		ldr	r3, [r3, #24]
 459 009c 23F47F63 		bic	r3, r3, #4080
 460 00a0 23F00F03 		bic	r3, r3, #15
 461 00a4 9361     		str	r3, [r2, #24]
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 462              		.loc 1 638 0
 463 00a6 7B68     		ldr	r3, [r7, #4]
 464 00a8 1A68     		ldr	r2, [r3]
 465 00aa 7B68     		ldr	r3, [r7, #4]
 466 00ac 1B68     		ldr	r3, [r3]
 467 00ae DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccUcNrG8.s 			page 30


 468 00b0 23F47F63 		bic	r3, r3, #4080
 469 00b4 23F00F03 		bic	r3, r3, #15
 470 00b8 D361     		str	r3, [r2, #28]
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 471              		.loc 1 640 0
 472 00ba 7B68     		ldr	r3, [r7, #4]
 473 00bc 1A68     		ldr	r2, [r3]
 474 00be 7B68     		ldr	r3, [r7, #4]
 475 00c0 1B68     		ldr	r3, [r3]
 476 00c2 1B6A     		ldr	r3, [r3, #32]
 477 00c4 23F47F63 		bic	r3, r3, #4080
 478 00c8 23F00F03 		bic	r3, r3, #15
 479 00cc 1362     		str	r3, [r2, #32]
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 480              		.loc 1 643 0
 481 00ce 7B68     		ldr	r3, [r7, #4]
 482 00d0 1A68     		ldr	r2, [r3]
 483 00d2 7B68     		ldr	r3, [r7, #4]
 484 00d4 1B68     		ldr	r3, [r3]
 485 00d6 5B6A     		ldr	r3, [r3, #36]
 486 00d8 23F47F63 		bic	r3, r3, #4080
 487 00dc 23F00F03 		bic	r3, r3, #15
 488 00e0 5362     		str	r3, [r2, #36]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 489              		.loc 1 645 0
 490 00e2 7B68     		ldr	r3, [r7, #4]
 491 00e4 1A68     		ldr	r2, [r3]
 492 00e6 7B68     		ldr	r3, [r7, #4]
 493 00e8 1B68     		ldr	r3, [r3]
 494 00ea 9B6A     		ldr	r3, [r3, #40]
 495 00ec 23F47F63 		bic	r3, r3, #4080
 496 00f0 23F00F03 		bic	r3, r3, #15
 497 00f4 9362     		str	r3, [r2, #40]
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 498              		.loc 1 648 0
 499 00f6 7B68     		ldr	r3, [r7, #4]
 500 00f8 1B68     		ldr	r3, [r3]
 501 00fa 7A68     		ldr	r2, [r7, #4]
 502 00fc 1268     		ldr	r2, [r2]
 503 00fe D26A     		ldr	r2, [r2, #44]
 504 0100 02F07F42 		and	r2, r2, #-16777216
 505 0104 DA62     		str	r2, [r3, #44]
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 506              		.loc 1 653 0
 507 0106 7B68     		ldr	r3, [r7, #4]
 508 0108 1B68     		ldr	r3, [r3]
 509 010a 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 31


 510 010c 1268     		ldr	r2, [r2]
 511 010e D26A     		ldr	r2, [r2, #44]
 512 0110 02F07F42 		and	r2, r2, #-16777216
 513 0114 DA62     		str	r2, [r3, #44]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 514              		.loc 1 658 0
 515 0116 7B68     		ldr	r3, [r7, #4]
 516 0118 1B68     		ldr	r3, [r3]
 517 011a 7A68     		ldr	r2, [r7, #4]
 518 011c 1268     		ldr	r2, [r2]
 519 011e 126B     		ldr	r2, [r2, #48]
 520 0120 02F04042 		and	r2, r2, #-1073741824
 521 0124 1A63     		str	r2, [r3, #48]
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 522              		.loc 1 662 0
 523 0126 7B68     		ldr	r3, [r7, #4]
 524 0128 1B68     		ldr	r3, [r3]
 525 012a 7A68     		ldr	r2, [r7, #4]
 526 012c 1268     		ldr	r2, [r2]
 527 012e 526B     		ldr	r2, [r2, #52]
 528 0130 02F04042 		and	r2, r2, #-1073741824
 529 0134 5A63     		str	r2, [r3, #52]
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 530              		.loc 1 666 0
 531 0136 7B68     		ldr	r3, [r7, #4]
 532 0138 1A68     		ldr	r2, [r3]
 533 013a 7B68     		ldr	r3, [r7, #4]
 534 013c 1B68     		ldr	r3, [r3]
 535 013e 9B6B     		ldr	r3, [r3, #56]
 536 0140 9B0D     		lsrs	r3, r3, #22
 537 0142 9B05     		lsls	r3, r3, #22
 538 0144 9363     		str	r3, [r2, #56]
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 539              		.loc 1 671 0
 540 0146 7B68     		ldr	r3, [r7, #4]
 541 0148 1A68     		ldr	r2, [r3]
 542 014a 7B68     		ldr	r3, [r7, #4]
 543 014c 1B68     		ldr	r3, [r3]
 544 014e 9B6B     		ldr	r3, [r3, #56]
 545 0150 9B0D     		lsrs	r3, r3, #22
 546 0152 9B05     		lsls	r3, r3, #22
 547 0154 9363     		str	r3, [r2, #56]
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
ARM GAS  /tmp/ccUcNrG8.s 			page 32


 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 548              		.loc 1 691 0
 549 0156 7868     		ldr	r0, [r7, #4]
 550 0158 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 551              		.loc 1 694 0
 552 015c 7B68     		ldr	r3, [r7, #4]
 553 015e 0022     		movs	r2, #0
 554 0160 DA62     		str	r2, [r3, #44]
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 555              		.loc 1 697 0
 556 0162 7B68     		ldr	r3, [r7, #4]
 557 0164 0022     		movs	r2, #0
 558 0166 9A62     		str	r2, [r3, #40]
 559              	.L25:
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 560              		.loc 1 702 0
 561 0168 7B68     		ldr	r3, [r7, #4]
 562 016a 0022     		movs	r2, #0
 563 016c 83F82420 		strb	r2, [r3, #36]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 564              		.loc 1 705 0
 565 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 566              	.L24:
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 567              		.loc 1 706 0
 568 0172 1846     		mov	r0, r3
 569 0174 1037     		adds	r7, r7, #16
 570              	.LCFI8:
ARM GAS  /tmp/ccUcNrG8.s 			page 33


 571              		.cfi_def_cfa_offset 8
 572 0176 BD46     		mov	sp, r7
 573              	.LCFI9:
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 0178 80BD     		pop	{r7, pc}
 577              	.L27:
 578 017a 00BF     		.align	2
 579              	.L26:
 580 017c 00003FFF 		.word	-12648448
 581 0180 F00601FF 		.word	-16709904
 582              		.cfi_endproc
 583              	.LFE64:
 585              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 586              		.align	2
 587              		.weak	HAL_ADC_MspInit
 588              		.thumb
 589              		.thumb_func
 591              	HAL_ADC_MspInit:
 592              	.LFB65:
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 593              		.loc 1 714 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 8
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597              		@ link register save eliminated.
 598 0000 80B4     		push	{r7}
 599              	.LCFI10:
 600              		.cfi_def_cfa_offset 4
 601              		.cfi_offset 7, -4
 602 0002 83B0     		sub	sp, sp, #12
 603              	.LCFI11:
 604              		.cfi_def_cfa_offset 16
 605 0004 00AF     		add	r7, sp, #0
 606              	.LCFI12:
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 609              		.loc 1 720 0
 610 0008 0C37     		adds	r7, r7, #12
 611              	.LCFI13:
 612              		.cfi_def_cfa_offset 4
 613 000a BD46     		mov	sp, r7
 614              	.LCFI14:
 615              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccUcNrG8.s 			page 34


 616              		@ sp needed
 617 000c 5DF8047B 		ldr	r7, [sp], #4
 618              	.LCFI15:
 619              		.cfi_restore 7
 620              		.cfi_def_cfa_offset 0
 621 0010 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE65:
 625 0012 00BF     		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 626              		.align	2
 627              		.weak	HAL_ADC_MspDeInit
 628              		.thumb
 629              		.thumb_func
 631              	HAL_ADC_MspDeInit:
 632              	.LFB66:
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 633              		.loc 1 728 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              	.LCFI16:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 7, -4
 642 0002 83B0     		sub	sp, sp, #12
 643              	.LCFI17:
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              	.LCFI18:
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 649              		.loc 1 734 0
 650 0008 0C37     		adds	r7, r7, #12
 651              	.LCFI19:
 652              		.cfi_def_cfa_offset 4
 653 000a BD46     		mov	sp, r7
 654              	.LCFI20:
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 000c 5DF8047B 		ldr	r7, [sp], #4
 658              	.LCFI21:
 659              		.cfi_restore 7
 660              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccUcNrG8.s 			page 35


 661 0010 7047     		bx	lr
 662              		.cfi_endproc
 663              	.LFE66:
 665 0012 00BF     		.section	.text.HAL_ADC_Start,"ax",%progbits
 666              		.align	2
 667              		.global	HAL_ADC_Start
 668              		.thumb
 669              		.thumb_func
 671              	HAL_ADC_Start:
 672              	.LFB67:
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 673              		.loc 1 769 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 16
 676              		@ frame_needed = 1, uses_anonymous_args = 0
 677 0000 80B5     		push	{r7, lr}
 678              	.LCFI22:
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 84B0     		sub	sp, sp, #16
 683              	.LCFI23:
 684              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccUcNrG8.s 			page 36


 685 0004 00AF     		add	r7, sp, #0
 686              	.LCFI24:
 687              		.cfi_def_cfa_register 7
 688 0006 7860     		str	r0, [r7, #4]
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 689              		.loc 1 770 0
 690 0008 0023     		movs	r3, #0
 691 000a FB73     		strb	r3, [r7, #15]
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 692              		.loc 1 776 0
 693 000c 7B68     		ldr	r3, [r7, #4]
 694 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 695 0012 012B     		cmp	r3, #1
 696 0014 01D1     		bne	.L31
 697              		.loc 1 776 0 is_stmt 0 discriminator 1
 698 0016 0223     		movs	r3, #2
 699 0018 99E0     		b	.L32
 700              	.L31:
 701              		.loc 1 776 0 discriminator 2
 702 001a 7B68     		ldr	r3, [r7, #4]
 703 001c 0122     		movs	r2, #1
 704 001e 83F82420 		strb	r2, [r3, #36]
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 705              		.loc 1 779 0 is_stmt 1 discriminator 2
 706 0022 7868     		ldr	r0, [r7, #4]
 707 0024 FFF7FEFF 		bl	ADC_Enable
 708 0028 0346     		mov	r3, r0
 709 002a FB73     		strb	r3, [r7, #15]
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 710              		.loc 1 782 0 discriminator 2
 711 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 712 002e 002B     		cmp	r3, #0
 713 0030 40F08880 		bne	.L33
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 714              		.loc 1 787 0
 715 0034 7B68     		ldr	r3, [r7, #4]
 716 0036 9B6A     		ldr	r3, [r3, #40]
 717 0038 23F44073 		bic	r3, r3, #768
 718 003c 23F00103 		bic	r3, r3, #1
 719 0040 43F48072 		orr	r2, r3, #256
 720 0044 7B68     		ldr	r3, [r7, #4]
 721 0046 9A62     		str	r2, [r3, #40]
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
ARM GAS  /tmp/ccUcNrG8.s 			page 37


 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 722              		.loc 1 794 0
 723 0048 7B68     		ldr	r3, [r7, #4]
 724 004a 1B68     		ldr	r3, [r3]
 725 004c 424A     		ldr	r2, .L45
 726 004e 9342     		cmp	r3, r2
 727 0050 05D1     		bne	.L34
 728              		.loc 1 794 0 is_stmt 0 discriminator 1
 729 0052 424B     		ldr	r3, .L45+4
 730 0054 5B68     		ldr	r3, [r3, #4]
 731 0056 03F47023 		and	r3, r3, #983040
 732 005a 002B     		cmp	r3, #0
 733 005c 16D1     		bne	.L35
 734              	.L34:
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 735              		.loc 1 797 0 is_stmt 1
 736 005e 7B68     		ldr	r3, [r7, #4]
 737 0060 9B6A     		ldr	r3, [r3, #40]
 738 0062 23F48012 		bic	r2, r3, #1048576
 739 0066 7B68     		ldr	r3, [r7, #4]
 740 0068 9A62     		str	r2, [r3, #40]
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 741              		.loc 1 801 0
 742 006a 7B68     		ldr	r3, [r7, #4]
 743 006c 1B68     		ldr	r3, [r3]
 744 006e 5B68     		ldr	r3, [r3, #4]
 745 0070 03F48063 		and	r3, r3, #1024
 746 0074 002B     		cmp	r3, #0
 747 0076 08D0     		beq	.L36
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 748              		.loc 1 803 0
 749 0078 7B68     		ldr	r3, [r7, #4]
 750 007a 9B6A     		ldr	r3, [r3, #40]
 751 007c 23F44053 		bic	r3, r3, #12288
 752 0080 43F48052 		orr	r2, r3, #4096
 753 0084 7B68     		ldr	r3, [r7, #4]
 754 0086 9A62     		str	r2, [r3, #40]
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 755              		.loc 1 801 0
 756 0088 1EE0     		b	.L37
 757              	.L36:
 758 008a 1DE0     		b	.L37
 759              	.L35:
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/ccUcNrG8.s 			page 38


 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 760              		.loc 1 809 0
 761 008c 7B68     		ldr	r3, [r7, #4]
 762 008e 9B6A     		ldr	r3, [r3, #40]
 763 0090 43F48012 		orr	r2, r3, #1048576
 764 0094 7B68     		ldr	r3, [r7, #4]
 765 0096 9A62     		str	r2, [r3, #40]
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 766              		.loc 1 813 0
 767 0098 7B68     		ldr	r3, [r7, #4]
 768 009a 1B68     		ldr	r3, [r3]
 769 009c 2F4A     		ldr	r2, .L45+4
 770 009e 9342     		cmp	r3, r2
 771 00a0 04D0     		beq	.L38
 772              		.loc 1 813 0 is_stmt 0 discriminator 2
 773 00a2 7B68     		ldr	r3, [r7, #4]
 774 00a4 1B68     		ldr	r3, [r3]
 775 00a6 2C4A     		ldr	r2, .L45
 776 00a8 9342     		cmp	r3, r2
 777 00aa 0DD1     		bne	.L37
 778              	.L38:
 779              		.loc 1 813 0 discriminator 3
 780 00ac 2B4B     		ldr	r3, .L45+4
 781 00ae 5B68     		ldr	r3, [r3, #4]
 782 00b0 03F48063 		and	r3, r3, #1024
 783 00b4 002B     		cmp	r3, #0
 784 00b6 07D0     		beq	.L37
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 785              		.loc 1 815 0 is_stmt 1
 786 00b8 7B68     		ldr	r3, [r7, #4]
 787 00ba 9B6A     		ldr	r3, [r3, #40]
 788 00bc 23F44053 		bic	r3, r3, #12288
 789 00c0 43F48052 		orr	r2, r3, #4096
 790 00c4 7B68     		ldr	r3, [r7, #4]
 791 00c6 9A62     		str	r2, [r3, #40]
 792              	.L37:
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 793              		.loc 1 820 0
 794 00c8 7B68     		ldr	r3, [r7, #4]
 795 00ca 9B6A     		ldr	r3, [r3, #40]
 796 00cc 03F48053 		and	r3, r3, #4096
 797 00d0 002B     		cmp	r3, #0
 798 00d2 06D0     		beq	.L39
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 799              		.loc 1 823 0
 800 00d4 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 39


 801 00d6 DB6A     		ldr	r3, [r3, #44]
 802 00d8 23F00602 		bic	r2, r3, #6
 803 00dc 7B68     		ldr	r3, [r7, #4]
 804 00de DA62     		str	r2, [r3, #44]
 805 00e0 02E0     		b	.L40
 806              	.L39:
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 807              		.loc 1 828 0
 808 00e2 7B68     		ldr	r3, [r7, #4]
 809 00e4 0022     		movs	r2, #0
 810 00e6 DA62     		str	r2, [r3, #44]
 811              	.L40:
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 812              		.loc 1 834 0
 813 00e8 7B68     		ldr	r3, [r7, #4]
 814 00ea 0022     		movs	r2, #0
 815 00ec 83F82420 		strb	r2, [r3, #36]
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 816              		.loc 1 838 0
 817 00f0 7B68     		ldr	r3, [r7, #4]
 818 00f2 1B68     		ldr	r3, [r3]
 819 00f4 6FF00202 		mvn	r2, #2
 820 00f8 1A60     		str	r2, [r3]
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 821              		.loc 1 850 0
 822 00fa 7B68     		ldr	r3, [r7, #4]
 823 00fc 1B68     		ldr	r3, [r3]
 824 00fe 9B68     		ldr	r3, [r3, #8]
 825 0100 03F46023 		and	r3, r3, #917504
 826 0104 B3F5602F 		cmp	r3, #917504
 827 0108 13D1     		bne	.L41
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 828              		.loc 1 851 0 discriminator 1
 829 010a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 40


 830 010c 1B68     		ldr	r3, [r3]
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 831              		.loc 1 850 0 discriminator 1
 832 010e 124A     		ldr	r2, .L45
 833 0110 9342     		cmp	r3, r2
 834 0112 05D1     		bne	.L42
 835              		.loc 1 851 0 discriminator 2
 836 0114 114B     		ldr	r3, .L45+4
 837 0116 5B68     		ldr	r3, [r3, #4]
 838 0118 03F47023 		and	r3, r3, #983040
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 839              		.loc 1 850 0 discriminator 2
 840 011c 002B     		cmp	r3, #0
 841 011e 08D1     		bne	.L41
 842              	.L42:
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 843              		.loc 1 854 0
 844 0120 7B68     		ldr	r3, [r7, #4]
 845 0122 1B68     		ldr	r3, [r3]
 846 0124 7A68     		ldr	r2, [r7, #4]
 847 0126 1268     		ldr	r2, [r2]
 848 0128 9268     		ldr	r2, [r2, #8]
 849 012a 42F4A002 		orr	r2, r2, #5242880
 850 012e 9A60     		str	r2, [r3, #8]
 851 0130 0CE0     		b	.L44
 852              	.L41:
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 853              		.loc 1 859 0
 854 0132 7B68     		ldr	r3, [r7, #4]
 855 0134 1B68     		ldr	r3, [r3]
 856 0136 7A68     		ldr	r2, [r7, #4]
 857 0138 1268     		ldr	r2, [r2]
 858 013a 9268     		ldr	r2, [r2, #8]
 859 013c 42F48012 		orr	r2, r2, #1048576
 860 0140 9A60     		str	r2, [r3, #8]
 861 0142 03E0     		b	.L44
 862              	.L33:
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 863              		.loc 1 865 0
 864 0144 7B68     		ldr	r3, [r7, #4]
 865 0146 0022     		movs	r2, #0
 866 0148 83F82420 		strb	r2, [r3, #36]
 867              	.L44:
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
ARM GAS  /tmp/ccUcNrG8.s 			page 41


 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 868              		.loc 1 869 0
 869 014c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 870              	.L32:
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 871              		.loc 1 870 0
 872 014e 1846     		mov	r0, r3
 873 0150 1037     		adds	r7, r7, #16
 874              	.LCFI25:
 875              		.cfi_def_cfa_offset 8
 876 0152 BD46     		mov	sp, r7
 877              	.LCFI26:
 878              		.cfi_def_cfa_register 13
 879              		@ sp needed
 880 0154 80BD     		pop	{r7, pc}
 881              	.L46:
 882 0156 00BF     		.align	2
 883              	.L45:
 884 0158 00280140 		.word	1073817600
 885 015c 00240140 		.word	1073816576
 886              		.cfi_endproc
 887              	.LFE67:
 889              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 890              		.align	2
 891              		.global	HAL_ADC_Stop
 892              		.thumb
 893              		.thumb_func
 895              	HAL_ADC_Stop:
 896              	.LFB68:
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 897              		.loc 1 882 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 16
 900              		@ frame_needed = 1, uses_anonymous_args = 0
 901 0000 80B5     		push	{r7, lr}
 902              	.LCFI27:
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 7, -8
 905              		.cfi_offset 14, -4
 906 0002 84B0     		sub	sp, sp, #16
 907              	.LCFI28:
 908              		.cfi_def_cfa_offset 24
 909 0004 00AF     		add	r7, sp, #0
 910              	.LCFI29:
 911              		.cfi_def_cfa_register 7
 912 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 42


 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 913              		.loc 1 883 0
 914 0008 0023     		movs	r3, #0
 915 000a FB73     		strb	r3, [r7, #15]
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 916              		.loc 1 889 0
 917 000c 7B68     		ldr	r3, [r7, #4]
 918 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 919 0012 012B     		cmp	r3, #1
 920 0014 01D1     		bne	.L48
 921              		.loc 1 889 0 is_stmt 0 discriminator 1
 922 0016 0223     		movs	r3, #2
 923 0018 1AE0     		b	.L49
 924              	.L48:
 925              		.loc 1 889 0 discriminator 2
 926 001a 7B68     		ldr	r3, [r7, #4]
 927 001c 0122     		movs	r2, #1
 928 001e 83F82420 		strb	r2, [r3, #36]
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 929              		.loc 1 893 0 is_stmt 1 discriminator 2
 930 0022 7868     		ldr	r0, [r7, #4]
 931 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 932 0028 0346     		mov	r3, r0
 933 002a FB73     		strb	r3, [r7, #15]
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 934              		.loc 1 896 0 discriminator 2
 935 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 936 002e 002B     		cmp	r3, #0
 937 0030 09D1     		bne	.L50
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 938              		.loc 1 899 0
 939 0032 7B68     		ldr	r3, [r7, #4]
 940 0034 9B6A     		ldr	r3, [r3, #40]
 941 0036 23F48853 		bic	r3, r3, #4352
 942 003a 23F00103 		bic	r3, r3, #1
 943 003e 43F00102 		orr	r2, r3, #1
 944 0042 7B68     		ldr	r3, [r7, #4]
 945 0044 9A62     		str	r2, [r3, #40]
 946              	.L50:
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
ARM GAS  /tmp/ccUcNrG8.s 			page 43


 947              		.loc 1 905 0
 948 0046 7B68     		ldr	r3, [r7, #4]
 949 0048 0022     		movs	r2, #0
 950 004a 83F82420 		strb	r2, [r3, #36]
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 951              		.loc 1 908 0
 952 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 953              	.L49:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 954              		.loc 1 909 0
 955 0050 1846     		mov	r0, r3
 956 0052 1037     		adds	r7, r7, #16
 957              	.LCFI30:
 958              		.cfi_def_cfa_offset 8
 959 0054 BD46     		mov	sp, r7
 960              	.LCFI31:
 961              		.cfi_def_cfa_register 13
 962              		@ sp needed
 963 0056 80BD     		pop	{r7, pc}
 964              		.cfi_endproc
 965              	.LFE68:
 967              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 968              		.align	2
 969              		.global	HAL_ADC_PollForConversion
 970              		.thumb
 971              		.thumb_func
 973              	HAL_ADC_PollForConversion:
 974              	.LFB69:
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 975              		.loc 1 926 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 24
 978              		@ frame_needed = 1, uses_anonymous_args = 0
 979 0000 90B5     		push	{r4, r7, lr}
 980              	.LCFI32:
 981              		.cfi_def_cfa_offset 12
 982              		.cfi_offset 4, -12
 983              		.cfi_offset 7, -8
 984              		.cfi_offset 14, -4
ARM GAS  /tmp/ccUcNrG8.s 			page 44


 985 0002 87B0     		sub	sp, sp, #28
 986              	.LCFI33:
 987              		.cfi_def_cfa_offset 40
 988 0004 00AF     		add	r7, sp, #0
 989              	.LCFI34:
 990              		.cfi_def_cfa_register 7
 991 0006 7860     		str	r0, [r7, #4]
 992 0008 3960     		str	r1, [r7]
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 993              		.loc 1 927 0
 994 000a 0023     		movs	r3, #0
 995 000c 7B61     		str	r3, [r7, #20]
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 996              		.loc 1 931 0
 997 000e 0023     		movs	r3, #0
 998 0010 FB60     		str	r3, [r7, #12]
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 999              		.loc 1 932 0
 1000 0012 0023     		movs	r3, #0
 1001 0014 3B61     		str	r3, [r7, #16]
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1002              		.loc 1 938 0
 1003 0016 FFF7FEFF 		bl	HAL_GetTick
 1004 001a 7861     		str	r0, [r7, #20]
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 1005              		.loc 1 943 0
 1006 001c 7B68     		ldr	r3, [r7, #4]
 1007 001e 1B68     		ldr	r3, [r3]
 1008 0020 9B68     		ldr	r3, [r3, #8]
 1009 0022 03F48073 		and	r3, r3, #256
 1010 0026 002B     		cmp	r3, #0
 1011 0028 0BD0     		beq	.L52
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1012              		.loc 1 946 0
 1013 002a 7B68     		ldr	r3, [r7, #4]
 1014 002c 9B6A     		ldr	r3, [r3, #40]
 1015 002e 43F02002 		orr	r2, r3, #32
 1016 0032 7B68     		ldr	r3, [r7, #4]
 1017 0034 9A62     		str	r2, [r3, #40]
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1018              		.loc 1 949 0
ARM GAS  /tmp/ccUcNrG8.s 			page 45


 1019 0036 7B68     		ldr	r3, [r7, #4]
 1020 0038 0022     		movs	r2, #0
 1021 003a 83F82420 		strb	r2, [r3, #36]
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 1022              		.loc 1 951 0
 1023 003e 0123     		movs	r3, #1
 1024 0040 C8E0     		b	.L53
 1025              	.L52:
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 1026              		.loc 1 968 0
 1027 0042 7B68     		ldr	r3, [r7, #4]
 1028 0044 1B68     		ldr	r3, [r3]
 1029 0046 5B68     		ldr	r3, [r3, #4]
 1030 0048 03F48073 		and	r3, r3, #256
 1031 004c 002B     		cmp	r3, #0
 1032 004e 2AD1     		bne	.L54
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1033              		.loc 1 969 0 discriminator 1
 1034 0050 7B68     		ldr	r3, [r7, #4]
 1035 0052 1B68     		ldr	r3, [r3]
 1036 0054 DB6A     		ldr	r3, [r3, #44]
 1037 0056 03F47003 		and	r3, r3, #15728640
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1038              		.loc 1 968 0 discriminator 1
 1039 005a 002B     		cmp	r3, #0
 1040 005c 23D1     		bne	.L54
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1041              		.loc 1 972 0
 1042 005e 1AE0     		b	.L55
 1043              	.L57:
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1044              		.loc 1 975 0
 1045 0060 3B68     		ldr	r3, [r7]
 1046 0062 B3F1FF3F 		cmp	r3, #-1
 1047 0066 16D0     		beq	.L55
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
ARM GAS  /tmp/ccUcNrG8.s 			page 46


 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 1048              		.loc 1 977 0
 1049 0068 3B68     		ldr	r3, [r7]
 1050 006a 002B     		cmp	r3, #0
 1051 006c 07D0     		beq	.L56
 1052              		.loc 1 977 0 is_stmt 0 discriminator 1
 1053 006e FFF7FEFF 		bl	HAL_GetTick
 1054 0072 0246     		mov	r2, r0
 1055 0074 7B69     		ldr	r3, [r7, #20]
 1056 0076 D21A     		subs	r2, r2, r3
 1057 0078 3B68     		ldr	r3, [r7]
 1058 007a 9A42     		cmp	r2, r3
 1059 007c 0BD9     		bls	.L55
 1060              	.L56:
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1061              		.loc 1 980 0 is_stmt 1
 1062 007e 7B68     		ldr	r3, [r7, #4]
 1063 0080 9B6A     		ldr	r3, [r3, #40]
 1064 0082 43F00402 		orr	r2, r3, #4
 1065 0086 7B68     		ldr	r3, [r7, #4]
 1066 0088 9A62     		str	r2, [r3, #40]
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1067              		.loc 1 983 0
 1068 008a 7B68     		ldr	r3, [r7, #4]
 1069 008c 0022     		movs	r2, #0
 1070 008e 83F82420 		strb	r2, [r3, #36]
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1071              		.loc 1 985 0
 1072 0092 0323     		movs	r3, #3
 1073 0094 9EE0     		b	.L53
 1074              	.L55:
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1075              		.loc 1 972 0
 1076 0096 7B68     		ldr	r3, [r7, #4]
 1077 0098 1B68     		ldr	r3, [r3]
 1078 009a 1B68     		ldr	r3, [r3]
 1079 009c 03F00203 		and	r3, r3, #2
 1080 00a0 002B     		cmp	r3, #0
 1081 00a2 DDD0     		beq	.L57
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1082              		.loc 1 968 0
 1083 00a4 6CE0     		b	.L58
 1084              	.L54:
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
ARM GAS  /tmp/ccUcNrG8.s 			page 47


 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1085              		.loc 1 997 0
 1086 00a6 4D4B     		ldr	r3, .L72
 1087 00a8 1C68     		ldr	r4, [r3]
 1088 00aa 0220     		movs	r0, #2
 1089 00ac FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 1090 00b0 0346     		mov	r3, r0
 1091 00b2 B4FBF3F2 		udiv	r2, r4, r3
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 1092              		.loc 1 998 0
 1093 00b6 7B68     		ldr	r3, [r7, #4]
 1094 00b8 1B68     		ldr	r3, [r3]
 1095 00ba 1969     		ldr	r1, [r3, #16]
 1096 00bc 484B     		ldr	r3, .L72+4
 1097 00be 0B40     		ands	r3, r3, r1
 1098 00c0 002B     		cmp	r3, #0
 1099 00c2 18D1     		bne	.L59
 1100              		.loc 1 998 0 is_stmt 0 discriminator 1
 1101 00c4 7B68     		ldr	r3, [r7, #4]
 1102 00c6 1B68     		ldr	r3, [r3]
 1103 00c8 D968     		ldr	r1, [r3, #12]
 1104 00ca 464B     		ldr	r3, .L72+8
 1105 00cc 0B40     		ands	r3, r3, r1
 1106 00ce 002B     		cmp	r3, #0
 1107 00d0 11D1     		bne	.L59
 1108              		.loc 1 998 0 discriminator 3
 1109 00d2 7B68     		ldr	r3, [r7, #4]
 1110 00d4 1B68     		ldr	r3, [r3]
 1111 00d6 1969     		ldr	r1, [r3, #16]
 1112 00d8 434B     		ldr	r3, .L72+12
 1113 00da 0B40     		ands	r3, r3, r1
 1114 00dc 002B     		cmp	r3, #0
 1115 00de 08D1     		bne	.L60
 1116              		.loc 1 998 0 discriminator 5
 1117 00e0 7B68     		ldr	r3, [r7, #4]
 1118 00e2 1B68     		ldr	r3, [r3]
 1119 00e4 D968     		ldr	r1, [r3, #12]
 1120 00e6 414B     		ldr	r3, .L72+16
 1121 00e8 0B40     		ands	r3, r3, r1
 1122 00ea 002B     		cmp	r3, #0
 1123 00ec 01D1     		bne	.L60
 1124              		.loc 1 998 0 discriminator 7
 1125 00ee 1423     		movs	r3, #20
 1126 00f0 20E0     		b	.L62
 1127              	.L60:
 1128              		.loc 1 998 0 discriminator 8
 1129 00f2 2923     		movs	r3, #41
 1130 00f4 1EE0     		b	.L62
 1131              	.L59:
 1132              		.loc 1 998 0 discriminator 4
 1133 00f6 7B68     		ldr	r3, [r7, #4]
 1134 00f8 1B68     		ldr	r3, [r3]
 1135 00fa 1969     		ldr	r1, [r3, #16]
 1136 00fc 3A4B     		ldr	r3, .L72+12
 1137 00fe 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/ccUcNrG8.s 			page 48


 1138 0100 002B     		cmp	r3, #0
 1139 0102 06D1     		bne	.L63
 1140              		.loc 1 998 0 discriminator 11
 1141 0104 7B68     		ldr	r3, [r7, #4]
 1142 0106 1B68     		ldr	r3, [r3]
 1143 0108 D968     		ldr	r1, [r3, #12]
 1144 010a 384B     		ldr	r3, .L72+16
 1145 010c 0B40     		ands	r3, r3, r1
 1146 010e 002B     		cmp	r3, #0
 1147 0110 0DD0     		beq	.L64
 1148              	.L63:
 1149              		.loc 1 998 0 discriminator 14
 1150 0112 7B68     		ldr	r3, [r7, #4]
 1151 0114 1B68     		ldr	r3, [r3]
 1152 0116 1969     		ldr	r1, [r3, #16]
 1153 0118 354B     		ldr	r3, .L72+20
 1154 011a 0B40     		ands	r3, r3, r1
 1155 011c 002B     		cmp	r3, #0
 1156 011e 08D1     		bne	.L65
 1157              		.loc 1 998 0 discriminator 15
 1158 0120 7B68     		ldr	r3, [r7, #4]
 1159 0122 1B68     		ldr	r3, [r3]
 1160 0124 D968     		ldr	r1, [r3, #12]
 1161 0126 324B     		ldr	r3, .L72+20
 1162 0128 0B40     		ands	r3, r3, r1
 1163 012a 002B     		cmp	r3, #0
 1164 012c 01D1     		bne	.L65
 1165              	.L64:
 1166              		.loc 1 998 0 discriminator 17
 1167 012e 5423     		movs	r3, #84
 1168 0130 00E0     		b	.L62
 1169              	.L65:
 1170              		.loc 1 998 0 discriminator 18
 1171 0132 FC23     		movs	r3, #252
 1172              	.L62:
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1173              		.loc 1 996 0 is_stmt 1
 1174 0134 03FB02F3 		mul	r3, r3, r2
 1175 0138 3B61     		str	r3, [r7, #16]
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1176              		.loc 1 1000 0
 1177 013a 1DE0     		b	.L67
 1178              	.L70:
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1179              		.loc 1 1003 0
 1180 013c 3B68     		ldr	r3, [r7]
 1181 013e B3F1FF3F 		cmp	r3, #-1
 1182 0142 16D0     		beq	.L68
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 1183              		.loc 1 1005 0
 1184 0144 3B68     		ldr	r3, [r7]
 1185 0146 002B     		cmp	r3, #0
 1186 0148 07D0     		beq	.L69
ARM GAS  /tmp/ccUcNrG8.s 			page 49


 1187              		.loc 1 1005 0 is_stmt 0 discriminator 1
 1188 014a FFF7FEFF 		bl	HAL_GetTick
 1189 014e 0246     		mov	r2, r0
 1190 0150 7B69     		ldr	r3, [r7, #20]
 1191 0152 D21A     		subs	r2, r2, r3
 1192 0154 3B68     		ldr	r3, [r7]
 1193 0156 9A42     		cmp	r2, r3
 1194 0158 0BD9     		bls	.L68
 1195              	.L69:
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1196              		.loc 1 1008 0 is_stmt 1
 1197 015a 7B68     		ldr	r3, [r7, #4]
 1198 015c 9B6A     		ldr	r3, [r3, #40]
 1199 015e 43F00402 		orr	r2, r3, #4
 1200 0162 7B68     		ldr	r3, [r7, #4]
 1201 0164 9A62     		str	r2, [r3, #40]
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1202              		.loc 1 1011 0
 1203 0166 7B68     		ldr	r3, [r7, #4]
 1204 0168 0022     		movs	r2, #0
 1205 016a 83F82420 		strb	r2, [r3, #36]
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1206              		.loc 1 1013 0
 1207 016e 0323     		movs	r3, #3
 1208 0170 30E0     		b	.L53
 1209              	.L68:
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 1210              		.loc 1 1016 0
 1211 0172 FB68     		ldr	r3, [r7, #12]
 1212 0174 0133     		adds	r3, r3, #1
 1213 0176 FB60     		str	r3, [r7, #12]
 1214              	.L67:
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1215              		.loc 1 1000 0
 1216 0178 FA68     		ldr	r2, [r7, #12]
 1217 017a 3B69     		ldr	r3, [r7, #16]
 1218 017c 9A42     		cmp	r2, r3
 1219 017e DDD3     		bcc	.L70
 1220              	.L58:
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1221              		.loc 1 1021 0
 1222 0180 7B68     		ldr	r3, [r7, #4]
 1223 0182 1B68     		ldr	r3, [r3]
 1224 0184 6FF01202 		mvn	r2, #18
 1225 0188 1A60     		str	r2, [r3]
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/ccUcNrG8.s 			page 50


1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1226              		.loc 1 1024 0
 1227 018a 7B68     		ldr	r3, [r7, #4]
 1228 018c 9B6A     		ldr	r3, [r3, #40]
 1229 018e 43F40072 		orr	r2, r3, #512
 1230 0192 7B68     		ldr	r3, [r7, #4]
 1231 0194 9A62     		str	r2, [r3, #40]
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1232              		.loc 1 1031 0
 1233 0196 7B68     		ldr	r3, [r7, #4]
 1234 0198 1B68     		ldr	r3, [r3]
 1235 019a 9B68     		ldr	r3, [r3, #8]
 1236 019c 03F46023 		and	r3, r3, #917504
 1237 01a0 B3F5602F 		cmp	r3, #917504
 1238 01a4 15D1     		bne	.L71
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1239              		.loc 1 1032 0 discriminator 1
 1240 01a6 7B68     		ldr	r3, [r7, #4]
 1241 01a8 DB68     		ldr	r3, [r3, #12]
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1242              		.loc 1 1031 0 discriminator 1
 1243 01aa 002B     		cmp	r3, #0
 1244 01ac 11D1     		bne	.L71
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1245              		.loc 1 1035 0
 1246 01ae 7B68     		ldr	r3, [r7, #4]
 1247 01b0 9B6A     		ldr	r3, [r3, #40]
 1248 01b2 23F48072 		bic	r2, r3, #256
 1249 01b6 7B68     		ldr	r3, [r7, #4]
 1250 01b8 9A62     		str	r2, [r3, #40]
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1251              		.loc 1 1037 0
 1252 01ba 7B68     		ldr	r3, [r7, #4]
 1253 01bc 9B6A     		ldr	r3, [r3, #40]
 1254 01be 03F48053 		and	r3, r3, #4096
 1255 01c2 002B     		cmp	r3, #0
 1256 01c4 05D1     		bne	.L71
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1257              		.loc 1 1039 0
 1258 01c6 7B68     		ldr	r3, [r7, #4]
 1259 01c8 9B6A     		ldr	r3, [r3, #40]
 1260 01ca 43F00102 		orr	r2, r3, #1
 1261 01ce 7B68     		ldr	r3, [r7, #4]
 1262 01d0 9A62     		str	r2, [r3, #40]
 1263              	.L71:
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccUcNrG8.s 			page 51


1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1264              		.loc 1 1044 0
 1265 01d2 0023     		movs	r3, #0
 1266              	.L53:
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1267              		.loc 1 1045 0
 1268 01d4 1846     		mov	r0, r3
 1269 01d6 1C37     		adds	r7, r7, #28
 1270              	.LCFI35:
 1271              		.cfi_def_cfa_offset 12
 1272 01d8 BD46     		mov	sp, r7
 1273              	.LCFI36:
 1274              		.cfi_def_cfa_register 13
 1275              		@ sp needed
 1276 01da 90BD     		pop	{r4, r7, pc}
 1277              	.L73:
 1278              		.align	2
 1279              	.L72:
 1280 01dc 00000000 		.word	SystemCoreClock
 1281 01e0 24499224 		.word	613566756
 1282 01e4 24499200 		.word	9586980
 1283 01e8 92244912 		.word	306783378
 1284 01ec 92244900 		.word	4793490
 1285 01f0 49922400 		.word	2396745
 1286              		.cfi_endproc
 1287              	.LFE69:
 1289              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1290              		.align	2
 1291              		.global	HAL_ADC_PollForEvent
 1292              		.thumb
 1293              		.thumb_func
 1295              	HAL_ADC_PollForEvent:
 1296              	.LFB70:
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1297              		.loc 1 1057 0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 24
 1300              		@ frame_needed = 1, uses_anonymous_args = 0
 1301 0000 80B5     		push	{r7, lr}
 1302              	.LCFI37:
 1303              		.cfi_def_cfa_offset 8
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
ARM GAS  /tmp/ccUcNrG8.s 			page 52


 1306 0002 86B0     		sub	sp, sp, #24
 1307              	.LCFI38:
 1308              		.cfi_def_cfa_offset 32
 1309 0004 00AF     		add	r7, sp, #0
 1310              	.LCFI39:
 1311              		.cfi_def_cfa_register 7
 1312 0006 F860     		str	r0, [r7, #12]
 1313 0008 B960     		str	r1, [r7, #8]
 1314 000a 7A60     		str	r2, [r7, #4]
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0; 
 1315              		.loc 1 1058 0
 1316 000c 0023     		movs	r3, #0
 1317 000e 7B61     		str	r3, [r7, #20]
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1318              		.loc 1 1065 0
 1319 0010 FFF7FEFF 		bl	HAL_GetTick
 1320 0014 7861     		str	r0, [r7, #20]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1321              		.loc 1 1068 0
 1322 0016 1AE0     		b	.L75
 1323              	.L78:
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1324              		.loc 1 1071 0
 1325 0018 7B68     		ldr	r3, [r7, #4]
 1326 001a B3F1FF3F 		cmp	r3, #-1
 1327 001e 16D0     		beq	.L75
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 1328              		.loc 1 1073 0
 1329 0020 7B68     		ldr	r3, [r7, #4]
 1330 0022 002B     		cmp	r3, #0
 1331 0024 07D0     		beq	.L76
 1332              		.loc 1 1073 0 is_stmt 0 discriminator 1
 1333 0026 FFF7FEFF 		bl	HAL_GetTick
 1334 002a 0246     		mov	r2, r0
 1335 002c 7B69     		ldr	r3, [r7, #20]
 1336 002e D21A     		subs	r2, r2, r3
 1337 0030 7B68     		ldr	r3, [r7, #4]
 1338 0032 9A42     		cmp	r2, r3
 1339 0034 0BD9     		bls	.L75
 1340              	.L76:
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1341              		.loc 1 1076 0 is_stmt 1
 1342 0036 FB68     		ldr	r3, [r7, #12]
 1343 0038 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /tmp/ccUcNrG8.s 			page 53


 1344 003a 43F00402 		orr	r2, r3, #4
 1345 003e FB68     		ldr	r3, [r7, #12]
 1346 0040 9A62     		str	r2, [r3, #40]
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1347              		.loc 1 1079 0
 1348 0042 FB68     		ldr	r3, [r7, #12]
 1349 0044 0022     		movs	r2, #0
 1350 0046 83F82420 		strb	r2, [r3, #36]
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_TIMEOUT;
 1351              		.loc 1 1081 0
 1352 004a 0323     		movs	r3, #3
 1353 004c 13E0     		b	.L77
 1354              	.L75:
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1355              		.loc 1 1068 0
 1356 004e FB68     		ldr	r3, [r7, #12]
 1357 0050 1B68     		ldr	r3, [r3]
 1358 0052 1A68     		ldr	r2, [r3]
 1359 0054 BB68     		ldr	r3, [r7, #8]
 1360 0056 1A40     		ands	r2, r2, r3
 1361 0058 BB68     		ldr	r3, [r7, #8]
 1362 005a 9A42     		cmp	r2, r3
 1363 005c DCD1     		bne	.L78
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1364              		.loc 1 1088 0
 1365 005e FB68     		ldr	r3, [r7, #12]
 1366 0060 9B6A     		ldr	r3, [r3, #40]
 1367 0062 43F48032 		orr	r2, r3, #65536
 1368 0066 FB68     		ldr	r3, [r7, #12]
 1369 0068 9A62     		str	r2, [r3, #40]
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1370              		.loc 1 1091 0
 1371 006a FB68     		ldr	r3, [r7, #12]
 1372 006c 1B68     		ldr	r3, [r3]
 1373 006e 6FF00102 		mvn	r2, #1
 1374 0072 1A60     		str	r2, [r3]
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1375              		.loc 1 1094 0
 1376 0074 0023     		movs	r3, #0
 1377              	.L77:
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1378              		.loc 1 1095 0
 1379 0076 1846     		mov	r0, r3
 1380 0078 1837     		adds	r7, r7, #24
ARM GAS  /tmp/ccUcNrG8.s 			page 54


 1381              	.LCFI40:
 1382              		.cfi_def_cfa_offset 8
 1383 007a BD46     		mov	sp, r7
 1384              	.LCFI41:
 1385              		.cfi_def_cfa_register 13
 1386              		@ sp needed
 1387 007c 80BD     		pop	{r7, pc}
 1388              		.cfi_endproc
 1389              	.LFE70:
 1391 007e 00BF     		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1392              		.align	2
 1393              		.global	HAL_ADC_Start_IT
 1394              		.thumb
 1395              		.thumb_func
 1397              	HAL_ADC_Start_IT:
 1398              	.LFB71:
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1399              		.loc 1 1106 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 16
 1402              		@ frame_needed = 1, uses_anonymous_args = 0
 1403 0000 80B5     		push	{r7, lr}
 1404              	.LCFI42:
 1405              		.cfi_def_cfa_offset 8
 1406              		.cfi_offset 7, -8
 1407              		.cfi_offset 14, -4
 1408 0002 84B0     		sub	sp, sp, #16
 1409              	.LCFI43:
 1410              		.cfi_def_cfa_offset 24
 1411 0004 00AF     		add	r7, sp, #0
 1412              	.LCFI44:
 1413              		.cfi_def_cfa_register 7
 1414 0006 7860     		str	r0, [r7, #4]
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1415              		.loc 1 1107 0
 1416 0008 0023     		movs	r3, #0
 1417 000a FB73     		strb	r3, [r7, #15]
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1418              		.loc 1 1113 0
 1419 000c 7B68     		ldr	r3, [r7, #4]
 1420 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1421 0012 012B     		cmp	r3, #1
ARM GAS  /tmp/ccUcNrG8.s 			page 55


 1422 0014 01D1     		bne	.L80
 1423              		.loc 1 1113 0 is_stmt 0 discriminator 1
 1424 0016 0223     		movs	r3, #2
 1425 0018 A1E0     		b	.L81
 1426              	.L80:
 1427              		.loc 1 1113 0 discriminator 2
 1428 001a 7B68     		ldr	r3, [r7, #4]
 1429 001c 0122     		movs	r2, #1
 1430 001e 83F82420 		strb	r2, [r3, #36]
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 1431              		.loc 1 1116 0 is_stmt 1 discriminator 2
 1432 0022 7868     		ldr	r0, [r7, #4]
 1433 0024 FFF7FEFF 		bl	ADC_Enable
 1434 0028 0346     		mov	r3, r0
 1435 002a FB73     		strb	r3, [r7, #15]
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1436              		.loc 1 1119 0 discriminator 2
 1437 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1438 002e 002B     		cmp	r3, #0
 1439 0030 40F09080 		bne	.L82
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1440              		.loc 1 1124 0
 1441 0034 7B68     		ldr	r3, [r7, #4]
 1442 0036 9B6A     		ldr	r3, [r3, #40]
 1443 0038 23F47063 		bic	r3, r3, #3840
 1444 003c 23F00103 		bic	r3, r3, #1
 1445 0040 43F48072 		orr	r2, r3, #256
 1446 0044 7B68     		ldr	r3, [r7, #4]
 1447 0046 9A62     		str	r2, [r3, #40]
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1448              		.loc 1 1131 0
 1449 0048 7B68     		ldr	r3, [r7, #4]
 1450 004a 1B68     		ldr	r3, [r3]
 1451 004c 464A     		ldr	r2, .L94
 1452 004e 9342     		cmp	r3, r2
 1453 0050 05D1     		bne	.L83
 1454              		.loc 1 1131 0 is_stmt 0 discriminator 1
 1455 0052 464B     		ldr	r3, .L94+4
 1456 0054 5B68     		ldr	r3, [r3, #4]
 1457 0056 03F47023 		and	r3, r3, #983040
 1458 005a 002B     		cmp	r3, #0
 1459 005c 16D1     		bne	.L84
 1460              	.L83:
ARM GAS  /tmp/ccUcNrG8.s 			page 56


1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1461              		.loc 1 1134 0 is_stmt 1
 1462 005e 7B68     		ldr	r3, [r7, #4]
 1463 0060 9B6A     		ldr	r3, [r3, #40]
 1464 0062 23F48012 		bic	r2, r3, #1048576
 1465 0066 7B68     		ldr	r3, [r7, #4]
 1466 0068 9A62     		str	r2, [r3, #40]
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1467              		.loc 1 1138 0
 1468 006a 7B68     		ldr	r3, [r7, #4]
 1469 006c 1B68     		ldr	r3, [r3]
 1470 006e 5B68     		ldr	r3, [r3, #4]
 1471 0070 03F48063 		and	r3, r3, #1024
 1472 0074 002B     		cmp	r3, #0
 1473 0076 08D0     		beq	.L85
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1474              		.loc 1 1140 0
 1475 0078 7B68     		ldr	r3, [r7, #4]
 1476 007a 9B6A     		ldr	r3, [r3, #40]
 1477 007c 23F44053 		bic	r3, r3, #12288
 1478 0080 43F48052 		orr	r2, r3, #4096
 1479 0084 7B68     		ldr	r3, [r7, #4]
 1480 0086 9A62     		str	r2, [r3, #40]
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1481              		.loc 1 1138 0
 1482 0088 1EE0     		b	.L86
 1483              	.L85:
 1484 008a 1DE0     		b	.L86
 1485              	.L84:
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1486              		.loc 1 1146 0
 1487 008c 7B68     		ldr	r3, [r7, #4]
 1488 008e 9B6A     		ldr	r3, [r3, #40]
 1489 0090 43F48012 		orr	r2, r3, #1048576
 1490 0094 7B68     		ldr	r3, [r7, #4]
 1491 0096 9A62     		str	r2, [r3, #40]
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1492              		.loc 1 1150 0
 1493 0098 7B68     		ldr	r3, [r7, #4]
 1494 009a 1B68     		ldr	r3, [r3]
 1495 009c 334A     		ldr	r2, .L94+4
 1496 009e 9342     		cmp	r3, r2
 1497 00a0 04D0     		beq	.L87
ARM GAS  /tmp/ccUcNrG8.s 			page 57


 1498              		.loc 1 1150 0 is_stmt 0 discriminator 2
 1499 00a2 7B68     		ldr	r3, [r7, #4]
 1500 00a4 1B68     		ldr	r3, [r3]
 1501 00a6 304A     		ldr	r2, .L94
 1502 00a8 9342     		cmp	r3, r2
 1503 00aa 0DD1     		bne	.L86
 1504              	.L87:
 1505              		.loc 1 1150 0 discriminator 3
 1506 00ac 2F4B     		ldr	r3, .L94+4
 1507 00ae 5B68     		ldr	r3, [r3, #4]
 1508 00b0 03F48063 		and	r3, r3, #1024
 1509 00b4 002B     		cmp	r3, #0
 1510 00b6 07D0     		beq	.L86
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1511              		.loc 1 1152 0 is_stmt 1
 1512 00b8 7B68     		ldr	r3, [r7, #4]
 1513 00ba 9B6A     		ldr	r3, [r3, #40]
 1514 00bc 23F44053 		bic	r3, r3, #12288
 1515 00c0 43F48052 		orr	r2, r3, #4096
 1516 00c4 7B68     		ldr	r3, [r7, #4]
 1517 00c6 9A62     		str	r2, [r3, #40]
 1518              	.L86:
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1519              		.loc 1 1157 0
 1520 00c8 7B68     		ldr	r3, [r7, #4]
 1521 00ca 9B6A     		ldr	r3, [r3, #40]
 1522 00cc 03F48053 		and	r3, r3, #4096
 1523 00d0 002B     		cmp	r3, #0
 1524 00d2 06D0     		beq	.L88
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1525              		.loc 1 1160 0
 1526 00d4 7B68     		ldr	r3, [r7, #4]
 1527 00d6 DB6A     		ldr	r3, [r3, #44]
 1528 00d8 23F00602 		bic	r2, r3, #6
 1529 00dc 7B68     		ldr	r3, [r7, #4]
 1530 00de DA62     		str	r2, [r3, #44]
 1531 00e0 02E0     		b	.L89
 1532              	.L88:
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1533              		.loc 1 1165 0
 1534 00e2 7B68     		ldr	r3, [r7, #4]
 1535 00e4 0022     		movs	r2, #0
 1536 00e6 DA62     		str	r2, [r3, #44]
 1537              	.L89:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  /tmp/ccUcNrG8.s 			page 58


1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1538              		.loc 1 1171 0
 1539 00e8 7B68     		ldr	r3, [r7, #4]
 1540 00ea 0022     		movs	r2, #0
 1541 00ec 83F82420 		strb	r2, [r3, #36]
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1542              		.loc 1 1175 0
 1543 00f0 7B68     		ldr	r3, [r7, #4]
 1544 00f2 1B68     		ldr	r3, [r3]
 1545 00f4 6FF00202 		mvn	r2, #2
 1546 00f8 1A60     		str	r2, [r3]
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 1547              		.loc 1 1178 0
 1548 00fa 7B68     		ldr	r3, [r7, #4]
 1549 00fc 1B68     		ldr	r3, [r3]
 1550 00fe 7A68     		ldr	r2, [r7, #4]
 1551 0100 1268     		ldr	r2, [r2]
 1552 0102 5268     		ldr	r2, [r2, #4]
 1553 0104 42F02002 		orr	r2, r2, #32
 1554 0108 5A60     		str	r2, [r3, #4]
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 1555              		.loc 1 1187 0
 1556 010a 7B68     		ldr	r3, [r7, #4]
 1557 010c 1B68     		ldr	r3, [r3]
 1558 010e 9B68     		ldr	r3, [r3, #8]
 1559 0110 03F46023 		and	r3, r3, #917504
 1560 0114 B3F5602F 		cmp	r3, #917504
 1561 0118 13D1     		bne	.L90
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1562              		.loc 1 1188 0 discriminator 1
 1563 011a 7B68     		ldr	r3, [r7, #4]
 1564 011c 1B68     		ldr	r3, [r3]
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1565              		.loc 1 1187 0 discriminator 1
 1566 011e 124A     		ldr	r2, .L94
 1567 0120 9342     		cmp	r3, r2
 1568 0122 05D1     		bne	.L91
 1569              		.loc 1 1188 0 discriminator 2
 1570 0124 114B     		ldr	r3, .L94+4
 1571 0126 5B68     		ldr	r3, [r3, #4]
 1572 0128 03F47023 		and	r3, r3, #983040
ARM GAS  /tmp/ccUcNrG8.s 			page 59


1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1573              		.loc 1 1187 0 discriminator 2
 1574 012c 002B     		cmp	r3, #0
 1575 012e 08D1     		bne	.L90
 1576              	.L91:
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1577              		.loc 1 1191 0
 1578 0130 7B68     		ldr	r3, [r7, #4]
 1579 0132 1B68     		ldr	r3, [r3]
 1580 0134 7A68     		ldr	r2, [r7, #4]
 1581 0136 1268     		ldr	r2, [r2]
 1582 0138 9268     		ldr	r2, [r2, #8]
 1583 013a 42F4A002 		orr	r2, r2, #5242880
 1584 013e 9A60     		str	r2, [r3, #8]
 1585 0140 0CE0     		b	.L93
 1586              	.L90:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1587              		.loc 1 1196 0
 1588 0142 7B68     		ldr	r3, [r7, #4]
 1589 0144 1B68     		ldr	r3, [r3]
 1590 0146 7A68     		ldr	r2, [r7, #4]
 1591 0148 1268     		ldr	r2, [r2]
 1592 014a 9268     		ldr	r2, [r2, #8]
 1593 014c 42F48012 		orr	r2, r2, #1048576
 1594 0150 9A60     		str	r2, [r3, #8]
 1595 0152 03E0     		b	.L93
 1596              	.L82:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1597              		.loc 1 1202 0
 1598 0154 7B68     		ldr	r3, [r7, #4]
 1599 0156 0022     		movs	r2, #0
 1600 0158 83F82420 		strb	r2, [r3, #36]
 1601              	.L93:
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1602              		.loc 1 1206 0
 1603 015c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1604              	.L81:
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1605              		.loc 1 1207 0
 1606 015e 1846     		mov	r0, r3
 1607 0160 1037     		adds	r7, r7, #16
 1608              	.LCFI45:
 1609              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccUcNrG8.s 			page 60


 1610 0162 BD46     		mov	sp, r7
 1611              	.LCFI46:
 1612              		.cfi_def_cfa_register 13
 1613              		@ sp needed
 1614 0164 80BD     		pop	{r7, pc}
 1615              	.L95:
 1616 0166 00BF     		.align	2
 1617              	.L94:
 1618 0168 00280140 		.word	1073817600
 1619 016c 00240140 		.word	1073816576
 1620              		.cfi_endproc
 1621              	.LFE71:
 1623              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1624              		.align	2
 1625              		.global	HAL_ADC_Stop_IT
 1626              		.thumb
 1627              		.thumb_func
 1629              	HAL_ADC_Stop_IT:
 1630              	.LFB72:
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1631              		.loc 1 1217 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 16
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635 0000 80B5     		push	{r7, lr}
 1636              	.LCFI47:
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 7, -8
 1639              		.cfi_offset 14, -4
 1640 0002 84B0     		sub	sp, sp, #16
 1641              	.LCFI48:
 1642              		.cfi_def_cfa_offset 24
 1643 0004 00AF     		add	r7, sp, #0
 1644              	.LCFI49:
 1645              		.cfi_def_cfa_register 7
 1646 0006 7860     		str	r0, [r7, #4]
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1647              		.loc 1 1218 0
 1648 0008 0023     		movs	r3, #0
 1649 000a FB73     		strb	r3, [r7, #15]
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1650              		.loc 1 1224 0
 1651 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 61


 1652 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1653 0012 012B     		cmp	r3, #1
 1654 0014 01D1     		bne	.L97
 1655              		.loc 1 1224 0 is_stmt 0 discriminator 1
 1656 0016 0223     		movs	r3, #2
 1657 0018 22E0     		b	.L98
 1658              	.L97:
 1659              		.loc 1 1224 0 discriminator 2
 1660 001a 7B68     		ldr	r3, [r7, #4]
 1661 001c 0122     		movs	r2, #1
 1662 001e 83F82420 		strb	r2, [r3, #36]
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1663              		.loc 1 1228 0 is_stmt 1 discriminator 2
 1664 0022 7868     		ldr	r0, [r7, #4]
 1665 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1666 0028 0346     		mov	r3, r0
 1667 002a FB73     		strb	r3, [r7, #15]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1668              		.loc 1 1231 0 discriminator 2
 1669 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1670 002e 002B     		cmp	r3, #0
 1671 0030 11D1     		bne	.L99
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1672              		.loc 1 1234 0
 1673 0032 7B68     		ldr	r3, [r7, #4]
 1674 0034 1B68     		ldr	r3, [r3]
 1675 0036 7A68     		ldr	r2, [r7, #4]
 1676 0038 1268     		ldr	r2, [r2]
 1677 003a 5268     		ldr	r2, [r2, #4]
 1678 003c 22F02002 		bic	r2, r2, #32
 1679 0040 5A60     		str	r2, [r3, #4]
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1680              		.loc 1 1237 0
 1681 0042 7B68     		ldr	r3, [r7, #4]
 1682 0044 9B6A     		ldr	r3, [r3, #40]
 1683 0046 23F48853 		bic	r3, r3, #4352
 1684 004a 23F00103 		bic	r3, r3, #1
 1685 004e 43F00102 		orr	r2, r3, #1
 1686 0052 7B68     		ldr	r3, [r7, #4]
 1687 0054 9A62     		str	r2, [r3, #40]
 1688              	.L99:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1689              		.loc 1 1243 0
ARM GAS  /tmp/ccUcNrG8.s 			page 62


 1690 0056 7B68     		ldr	r3, [r7, #4]
 1691 0058 0022     		movs	r2, #0
 1692 005a 83F82420 		strb	r2, [r3, #36]
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1693              		.loc 1 1246 0
 1694 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1695              	.L98:
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1696              		.loc 1 1247 0
 1697 0060 1846     		mov	r0, r3
 1698 0062 1037     		adds	r7, r7, #16
 1699              	.LCFI50:
 1700              		.cfi_def_cfa_offset 8
 1701 0064 BD46     		mov	sp, r7
 1702              	.LCFI51:
 1703              		.cfi_def_cfa_register 13
 1704              		@ sp needed
 1705 0066 80BD     		pop	{r7, pc}
 1706              		.cfi_endproc
 1707              	.LFE72:
 1709              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1710              		.align	2
 1711              		.global	HAL_ADC_Start_DMA
 1712              		.thumb
 1713              		.thumb_func
 1715              	HAL_ADC_Start_DMA:
 1716              	.LFB73:
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1717              		.loc 1 1274 0
ARM GAS  /tmp/ccUcNrG8.s 			page 63


 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 24
 1720              		@ frame_needed = 1, uses_anonymous_args = 0
 1721 0000 80B5     		push	{r7, lr}
 1722              	.LCFI52:
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726 0002 86B0     		sub	sp, sp, #24
 1727              	.LCFI53:
 1728              		.cfi_def_cfa_offset 32
 1729 0004 00AF     		add	r7, sp, #0
 1730              	.LCFI54:
 1731              		.cfi_def_cfa_register 7
 1732 0006 F860     		str	r0, [r7, #12]
 1733 0008 B960     		str	r1, [r7, #8]
 1734 000a 7A60     		str	r2, [r7, #4]
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1735              		.loc 1 1275 0
 1736 000c 0023     		movs	r3, #0
 1737 000e FB75     		strb	r3, [r7, #23]
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 1738              		.loc 1 1283 0
 1739 0010 FB68     		ldr	r3, [r7, #12]
 1740 0012 1B68     		ldr	r3, [r3]
 1741 0014 654A     		ldr	r2, .L118
 1742 0016 9342     		cmp	r3, r2
 1743 0018 04D0     		beq	.L101
 1744              		.loc 1 1283 0 is_stmt 0 discriminator 1
 1745 001a FB68     		ldr	r3, [r7, #12]
 1746 001c 1B68     		ldr	r3, [r3]
 1747 001e 644A     		ldr	r2, .L118+4
 1748 0020 9342     		cmp	r3, r2
 1749 0022 06D1     		bne	.L102
 1750              	.L101:
 1751              		.loc 1 1283 0 discriminator 3
 1752 0024 614B     		ldr	r3, .L118
 1753 0026 5B68     		ldr	r3, [r3, #4]
 1754 0028 03F47023 		and	r3, r3, #983040
 1755 002c 002B     		cmp	r3, #0
 1756 002e 40F0B680 		bne	.L103
 1757              	.L102:
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1758              		.loc 1 1286 0 is_stmt 1
 1759 0032 FB68     		ldr	r3, [r7, #12]
 1760 0034 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1761 0038 012B     		cmp	r3, #1
 1762 003a 01D1     		bne	.L104
ARM GAS  /tmp/ccUcNrG8.s 			page 64


 1763              		.loc 1 1286 0 is_stmt 0 discriminator 1
 1764 003c 0223     		movs	r3, #2
 1765 003e B1E0     		b	.L105
 1766              	.L104:
 1767              		.loc 1 1286 0 discriminator 2
 1768 0040 FB68     		ldr	r3, [r7, #12]
 1769 0042 0122     		movs	r2, #1
 1770 0044 83F82420 		strb	r2, [r3, #36]
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 1771              		.loc 1 1289 0 is_stmt 1 discriminator 2
 1772 0048 F868     		ldr	r0, [r7, #12]
 1773 004a FFF7FEFF 		bl	ADC_Enable
 1774 004e 0346     		mov	r3, r0
 1775 0050 FB75     		strb	r3, [r7, #23]
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1776              		.loc 1 1292 0 discriminator 2
 1777 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1778 0054 002B     		cmp	r3, #0
 1779 0056 40F09D80 		bne	.L106
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1780              		.loc 1 1297 0
 1781 005a FB68     		ldr	r3, [r7, #12]
 1782 005c 9B6A     		ldr	r3, [r3, #40]
 1783 005e 23F47063 		bic	r3, r3, #3840
 1784 0062 23F00103 		bic	r3, r3, #1
 1785 0066 43F48072 		orr	r2, r3, #256
 1786 006a FB68     		ldr	r3, [r7, #12]
 1787 006c 9A62     		str	r2, [r3, #40]
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1788              		.loc 1 1304 0
 1789 006e FB68     		ldr	r3, [r7, #12]
 1790 0070 1B68     		ldr	r3, [r3]
 1791 0072 4F4A     		ldr	r2, .L118+4
 1792 0074 9342     		cmp	r3, r2
 1793 0076 05D1     		bne	.L107
 1794              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1795 0078 4C4B     		ldr	r3, .L118
 1796 007a 5B68     		ldr	r3, [r3, #4]
 1797 007c 03F47023 		and	r3, r3, #983040
 1798 0080 002B     		cmp	r3, #0
 1799 0082 16D1     		bne	.L108
 1800              	.L107:
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/ccUcNrG8.s 			page 65


1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1801              		.loc 1 1307 0 is_stmt 1
 1802 0084 FB68     		ldr	r3, [r7, #12]
 1803 0086 9B6A     		ldr	r3, [r3, #40]
 1804 0088 23F48012 		bic	r2, r3, #1048576
 1805 008c FB68     		ldr	r3, [r7, #12]
 1806 008e 9A62     		str	r2, [r3, #40]
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1807              		.loc 1 1311 0
 1808 0090 FB68     		ldr	r3, [r7, #12]
 1809 0092 1B68     		ldr	r3, [r3]
 1810 0094 5B68     		ldr	r3, [r3, #4]
 1811 0096 03F48063 		and	r3, r3, #1024
 1812 009a 002B     		cmp	r3, #0
 1813 009c 08D0     		beq	.L109
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1814              		.loc 1 1313 0
 1815 009e FB68     		ldr	r3, [r7, #12]
 1816 00a0 9B6A     		ldr	r3, [r3, #40]
 1817 00a2 23F44053 		bic	r3, r3, #12288
 1818 00a6 43F48052 		orr	r2, r3, #4096
 1819 00aa FB68     		ldr	r3, [r7, #12]
 1820 00ac 9A62     		str	r2, [r3, #40]
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1821              		.loc 1 1311 0
 1822 00ae 1EE0     		b	.L110
 1823              	.L109:
 1824 00b0 1DE0     		b	.L110
 1825              	.L108:
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1826              		.loc 1 1319 0
 1827 00b2 FB68     		ldr	r3, [r7, #12]
 1828 00b4 9B6A     		ldr	r3, [r3, #40]
 1829 00b6 43F48012 		orr	r2, r3, #1048576
 1830 00ba FB68     		ldr	r3, [r7, #12]
 1831 00bc 9A62     		str	r2, [r3, #40]
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1832              		.loc 1 1323 0
 1833 00be FB68     		ldr	r3, [r7, #12]
 1834 00c0 1B68     		ldr	r3, [r3]
 1835 00c2 3A4A     		ldr	r2, .L118
 1836 00c4 9342     		cmp	r3, r2
 1837 00c6 04D0     		beq	.L111
 1838              		.loc 1 1323 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccUcNrG8.s 			page 66


 1839 00c8 FB68     		ldr	r3, [r7, #12]
 1840 00ca 1B68     		ldr	r3, [r3]
 1841 00cc 384A     		ldr	r2, .L118+4
 1842 00ce 9342     		cmp	r3, r2
 1843 00d0 0DD1     		bne	.L110
 1844              	.L111:
 1845              		.loc 1 1323 0 discriminator 3
 1846 00d2 364B     		ldr	r3, .L118
 1847 00d4 5B68     		ldr	r3, [r3, #4]
 1848 00d6 03F48063 		and	r3, r3, #1024
 1849 00da 002B     		cmp	r3, #0
 1850 00dc 07D0     		beq	.L110
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1851              		.loc 1 1325 0 is_stmt 1
 1852 00de FB68     		ldr	r3, [r7, #12]
 1853 00e0 9B6A     		ldr	r3, [r3, #40]
 1854 00e2 23F44053 		bic	r3, r3, #12288
 1855 00e6 43F48052 		orr	r2, r3, #4096
 1856 00ea FB68     		ldr	r3, [r7, #12]
 1857 00ec 9A62     		str	r2, [r3, #40]
 1858              	.L110:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1859              		.loc 1 1330 0
 1860 00ee FB68     		ldr	r3, [r7, #12]
 1861 00f0 9B6A     		ldr	r3, [r3, #40]
 1862 00f2 03F48053 		and	r3, r3, #4096
 1863 00f6 002B     		cmp	r3, #0
 1864 00f8 06D0     		beq	.L112
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1865              		.loc 1 1333 0
 1866 00fa FB68     		ldr	r3, [r7, #12]
 1867 00fc DB6A     		ldr	r3, [r3, #44]
 1868 00fe 23F00602 		bic	r2, r3, #6
 1869 0102 FB68     		ldr	r3, [r7, #12]
 1870 0104 DA62     		str	r2, [r3, #44]
 1871 0106 02E0     		b	.L113
 1872              	.L112:
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1873              		.loc 1 1338 0
 1874 0108 FB68     		ldr	r3, [r7, #12]
 1875 010a 0022     		movs	r2, #0
 1876 010c DA62     		str	r2, [r3, #44]
 1877              	.L113:
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
ARM GAS  /tmp/ccUcNrG8.s 			page 67


1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1878              		.loc 1 1344 0
 1879 010e FB68     		ldr	r3, [r7, #12]
 1880 0110 0022     		movs	r2, #0
 1881 0112 83F82420 		strb	r2, [r3, #36]
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1882              		.loc 1 1347 0
 1883 0116 FB68     		ldr	r3, [r7, #12]
 1884 0118 1B6A     		ldr	r3, [r3, #32]
 1885 011a 264A     		ldr	r2, .L118+8
 1886 011c 9A62     		str	r2, [r3, #40]
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1887              		.loc 1 1350 0
 1888 011e FB68     		ldr	r3, [r7, #12]
 1889 0120 1B6A     		ldr	r3, [r3, #32]
 1890 0122 254A     		ldr	r2, .L118+12
 1891 0124 DA62     		str	r2, [r3, #44]
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1892              		.loc 1 1353 0
 1893 0126 FB68     		ldr	r3, [r7, #12]
 1894 0128 1B6A     		ldr	r3, [r3, #32]
 1895 012a 244A     		ldr	r2, .L118+16
 1896 012c 1A63     		str	r2, [r3, #48]
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1897              		.loc 1 1362 0
 1898 012e FB68     		ldr	r3, [r7, #12]
 1899 0130 1B68     		ldr	r3, [r3]
 1900 0132 6FF00202 		mvn	r2, #2
 1901 0136 1A60     		str	r2, [r3]
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1902              		.loc 1 1365 0
 1903 0138 FB68     		ldr	r3, [r7, #12]
 1904 013a 1B68     		ldr	r3, [r3]
 1905 013c FA68     		ldr	r2, [r7, #12]
 1906 013e 1268     		ldr	r2, [r2]
 1907 0140 9268     		ldr	r2, [r2, #8]
 1908 0142 42F48072 		orr	r2, r2, #256
 1909 0146 9A60     		str	r2, [r3, #8]
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/ccUcNrG8.s 			page 68


1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1910              		.loc 1 1368 0
 1911 0148 FB68     		ldr	r3, [r7, #12]
 1912 014a 1A6A     		ldr	r2, [r3, #32]
 1913 014c FB68     		ldr	r3, [r7, #12]
 1914 014e 1B68     		ldr	r3, [r3]
 1915 0150 4C33     		adds	r3, r3, #76
 1916 0152 1946     		mov	r1, r3
 1917 0154 BB68     		ldr	r3, [r7, #8]
 1918 0156 1046     		mov	r0, r2
 1919 0158 1A46     		mov	r2, r3
 1920 015a 7B68     		ldr	r3, [r7, #4]
 1921 015c FFF7FEFF 		bl	HAL_DMA_Start_IT
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1922              		.loc 1 1374 0
 1923 0160 FB68     		ldr	r3, [r7, #12]
 1924 0162 1B68     		ldr	r3, [r3]
 1925 0164 9B68     		ldr	r3, [r3, #8]
 1926 0166 03F46023 		and	r3, r3, #917504
 1927 016a B3F5602F 		cmp	r3, #917504
 1928 016e 08D1     		bne	.L114
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1929              		.loc 1 1377 0
 1930 0170 FB68     		ldr	r3, [r7, #12]
 1931 0172 1B68     		ldr	r3, [r3]
 1932 0174 FA68     		ldr	r2, [r7, #12]
 1933 0176 1268     		ldr	r2, [r2]
 1934 0178 9268     		ldr	r2, [r2, #8]
 1935 017a 42F4A002 		orr	r2, r2, #5242880
 1936 017e 9A60     		str	r2, [r3, #8]
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1937              		.loc 1 1292 0
 1938 0180 0FE0     		b	.L117
 1939              	.L114:
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1940              		.loc 1 1382 0
 1941 0182 FB68     		ldr	r3, [r7, #12]
 1942 0184 1B68     		ldr	r3, [r3]
 1943 0186 FA68     		ldr	r2, [r7, #12]
 1944 0188 1268     		ldr	r2, [r2]
 1945 018a 9268     		ldr	r2, [r2, #8]
 1946 018c 42F48012 		orr	r2, r2, #1048576
 1947 0190 9A60     		str	r2, [r3, #8]
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1948              		.loc 1 1292 0
ARM GAS  /tmp/ccUcNrG8.s 			page 69


 1949 0192 06E0     		b	.L117
 1950              	.L106:
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1951              		.loc 1 1388 0
 1952 0194 FB68     		ldr	r3, [r7, #12]
 1953 0196 0022     		movs	r2, #0
 1954 0198 83F82420 		strb	r2, [r3, #36]
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1955              		.loc 1 1292 0
 1956 019c 01E0     		b	.L117
 1957              	.L103:
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 1958              		.loc 1 1393 0
 1959 019e 0123     		movs	r3, #1
 1960 01a0 FB75     		strb	r3, [r7, #23]
 1961              	.L117:
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1962              		.loc 1 1397 0
 1963 01a2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1964              	.L105:
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1965              		.loc 1 1398 0
 1966 01a4 1846     		mov	r0, r3
 1967 01a6 1837     		adds	r7, r7, #24
 1968              	.LCFI55:
 1969              		.cfi_def_cfa_offset 8
 1970 01a8 BD46     		mov	sp, r7
 1971              	.LCFI56:
 1972              		.cfi_def_cfa_register 13
 1973              		@ sp needed
 1974 01aa 80BD     		pop	{r7, pc}
 1975              	.L119:
 1976              		.align	2
 1977              	.L118:
 1978 01ac 00240140 		.word	1073816576
 1979 01b0 00280140 		.word	1073817600
 1980 01b4 00000000 		.word	ADC_DMAConvCplt
 1981 01b8 00000000 		.word	ADC_DMAHalfConvCplt
 1982 01bc 00000000 		.word	ADC_DMAError
 1983              		.cfi_endproc
 1984              	.LFE73:
 1986              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1987              		.align	2
 1988              		.global	HAL_ADC_Stop_DMA
 1989              		.thumb
ARM GAS  /tmp/ccUcNrG8.s 			page 70


 1990              		.thumb_func
 1992              	HAL_ADC_Stop_DMA:
 1993              	.LFB74:
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1994              		.loc 1 1415 0
 1995              		.cfi_startproc
 1996              		@ args = 0, pretend = 0, frame = 16
 1997              		@ frame_needed = 1, uses_anonymous_args = 0
 1998 0000 80B5     		push	{r7, lr}
 1999              	.LCFI57:
 2000              		.cfi_def_cfa_offset 8
 2001              		.cfi_offset 7, -8
 2002              		.cfi_offset 14, -4
 2003 0002 84B0     		sub	sp, sp, #16
 2004              	.LCFI58:
 2005              		.cfi_def_cfa_offset 24
 2006 0004 00AF     		add	r7, sp, #0
 2007              	.LCFI59:
 2008              		.cfi_def_cfa_register 7
 2009 0006 7860     		str	r0, [r7, #4]
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2010              		.loc 1 1416 0
 2011 0008 0023     		movs	r3, #0
 2012 000a FB73     		strb	r3, [r7, #15]
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2013              		.loc 1 1422 0
 2014 000c 7B68     		ldr	r3, [r7, #4]
 2015 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2016 0012 012B     		cmp	r3, #1
 2017 0014 01D1     		bne	.L121
 2018              		.loc 1 1422 0 is_stmt 0 discriminator 1
 2019 0016 0223     		movs	r3, #2
 2020 0018 33E0     		b	.L122
 2021              	.L121:
 2022              		.loc 1 1422 0 discriminator 2
 2023 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 71


 2024 001c 0122     		movs	r2, #1
 2025 001e 83F82420 		strb	r2, [r3, #36]
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 2026              		.loc 1 1426 0 is_stmt 1 discriminator 2
 2027 0022 7868     		ldr	r0, [r7, #4]
 2028 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2029 0028 0346     		mov	r3, r0
 2030 002a FB73     		strb	r3, [r7, #15]
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2031              		.loc 1 1429 0 discriminator 2
 2032 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2033 002e 002B     		cmp	r3, #0
 2034 0030 22D1     		bne	.L123
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 2035              		.loc 1 1432 0
 2036 0032 7B68     		ldr	r3, [r7, #4]
 2037 0034 1B68     		ldr	r3, [r3]
 2038 0036 7A68     		ldr	r2, [r7, #4]
 2039 0038 1268     		ldr	r2, [r2]
 2040 003a 9268     		ldr	r2, [r2, #8]
 2041 003c 22F48072 		bic	r2, r2, #256
 2042 0040 9A60     		str	r2, [r3, #8]
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2043              		.loc 1 1436 0
 2044 0042 7B68     		ldr	r3, [r7, #4]
 2045 0044 1B6A     		ldr	r3, [r3, #32]
 2046 0046 1846     		mov	r0, r3
 2047 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 2048 004c 0346     		mov	r3, r0
 2049 004e FB73     		strb	r3, [r7, #15]
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 2050              		.loc 1 1439 0
 2051 0050 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2052 0052 002B     		cmp	r3, #0
 2053 0054 0AD1     		bne	.L124
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 2054              		.loc 1 1442 0
 2055 0056 7B68     		ldr	r3, [r7, #4]
 2056 0058 9B6A     		ldr	r3, [r3, #40]
 2057 005a 23F48853 		bic	r3, r3, #4352
 2058 005e 23F00103 		bic	r3, r3, #1
 2059 0062 43F00102 		orr	r2, r3, #1
 2060 0066 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 72


 2061 0068 9A62     		str	r2, [r3, #40]
 2062 006a 05E0     		b	.L123
 2063              	.L124:
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2064              		.loc 1 1449 0
 2065 006c 7B68     		ldr	r3, [r7, #4]
 2066 006e 9B6A     		ldr	r3, [r3, #40]
 2067 0070 43F04002 		orr	r2, r3, #64
 2068 0074 7B68     		ldr	r3, [r7, #4]
 2069 0076 9A62     		str	r2, [r3, #40]
 2070              	.L123:
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2071              		.loc 1 1454 0
 2072 0078 7B68     		ldr	r3, [r7, #4]
 2073 007a 0022     		movs	r2, #0
 2074 007c 83F82420 		strb	r2, [r3, #36]
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2075              		.loc 1 1457 0
 2076 0080 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2077              	.L122:
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2078              		.loc 1 1458 0
 2079 0082 1846     		mov	r0, r3
 2080 0084 1037     		adds	r7, r7, #16
 2081              	.LCFI60:
 2082              		.cfi_def_cfa_offset 8
 2083 0086 BD46     		mov	sp, r7
 2084              	.LCFI61:
 2085              		.cfi_def_cfa_register 13
 2086              		@ sp needed
 2087 0088 80BD     		pop	{r7, pc}
 2088              		.cfi_endproc
 2089              	.LFE74:
 2091 008a 00BF     		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2092              		.align	2
 2093              		.global	HAL_ADC_GetValue
 2094              		.thumb
 2095              		.thumb_func
 2097              	HAL_ADC_GetValue:
 2098              	.LFB75:
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
ARM GAS  /tmp/ccUcNrG8.s 			page 73


1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2099              		.loc 1 1480 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 8
 2102              		@ frame_needed = 1, uses_anonymous_args = 0
 2103              		@ link register save eliminated.
 2104 0000 80B4     		push	{r7}
 2105              	.LCFI62:
 2106              		.cfi_def_cfa_offset 4
 2107              		.cfi_offset 7, -4
 2108 0002 83B0     		sub	sp, sp, #12
 2109              	.LCFI63:
 2110              		.cfi_def_cfa_offset 16
 2111 0004 00AF     		add	r7, sp, #0
 2112              	.LCFI64:
 2113              		.cfi_def_cfa_register 7
 2114 0006 7860     		str	r0, [r7, #4]
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 2115              		.loc 1 1488 0
 2116 0008 7B68     		ldr	r3, [r7, #4]
 2117 000a 1B68     		ldr	r3, [r3]
 2118 000c DB6C     		ldr	r3, [r3, #76]
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2119              		.loc 1 1489 0
 2120 000e 1846     		mov	r0, r3
 2121 0010 0C37     		adds	r7, r7, #12
 2122              	.LCFI65:
 2123              		.cfi_def_cfa_offset 4
 2124 0012 BD46     		mov	sp, r7
 2125              	.LCFI66:
 2126              		.cfi_def_cfa_register 13
 2127              		@ sp needed
 2128 0014 5DF8047B 		ldr	r7, [sp], #4
 2129              	.LCFI67:
ARM GAS  /tmp/ccUcNrG8.s 			page 74


 2130              		.cfi_restore 7
 2131              		.cfi_def_cfa_offset 0
 2132 0018 7047     		bx	lr
 2133              		.cfi_endproc
 2134              	.LFE75:
 2136 001a 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2137              		.align	2
 2138              		.global	HAL_ADC_IRQHandler
 2139              		.thumb
 2140              		.thumb_func
 2142              	HAL_ADC_IRQHandler:
 2143              	.LFB76:
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2144              		.loc 1 1497 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 8
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148 0000 80B5     		push	{r7, lr}
 2149              	.LCFI68:
 2150              		.cfi_def_cfa_offset 8
 2151              		.cfi_offset 7, -8
 2152              		.cfi_offset 14, -4
 2153 0002 82B0     		sub	sp, sp, #8
 2154              	.LCFI69:
 2155              		.cfi_def_cfa_offset 16
 2156 0004 00AF     		add	r7, sp, #0
 2157              	.LCFI70:
 2158              		.cfi_def_cfa_register 7
 2159 0006 7860     		str	r0, [r7, #4]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 2160              		.loc 1 1505 0
 2161 0008 7B68     		ldr	r3, [r7, #4]
 2162 000a 1B68     		ldr	r3, [r3]
 2163 000c 5B68     		ldr	r3, [r3, #4]
 2164 000e 03F02003 		and	r3, r3, #32
 2165 0012 002B     		cmp	r3, #0
 2166 0014 40D0     		beq	.L128
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 2167              		.loc 1 1507 0
 2168 0016 7B68     		ldr	r3, [r7, #4]
 2169 0018 1B68     		ldr	r3, [r3]
 2170 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccUcNrG8.s 			page 75


 2171 001c 03F00203 		and	r3, r3, #2
 2172 0020 002B     		cmp	r3, #0
 2173 0022 39D0     		beq	.L128
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2174              		.loc 1 1510 0
 2175 0024 7B68     		ldr	r3, [r7, #4]
 2176 0026 9B6A     		ldr	r3, [r3, #40]
 2177 0028 03F01003 		and	r3, r3, #16
 2178 002c 002B     		cmp	r3, #0
 2179 002e 05D1     		bne	.L129
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 2180              		.loc 1 1513 0
 2181 0030 7B68     		ldr	r3, [r7, #4]
 2182 0032 9B6A     		ldr	r3, [r3, #40]
 2183 0034 43F40072 		orr	r2, r3, #512
 2184 0038 7B68     		ldr	r3, [r7, #4]
 2185 003a 9A62     		str	r2, [r3, #40]
 2186              	.L129:
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2187              		.loc 1 1521 0
 2188 003c 7B68     		ldr	r3, [r7, #4]
 2189 003e 1B68     		ldr	r3, [r3]
 2190 0040 9B68     		ldr	r3, [r3, #8]
 2191 0042 03F46023 		and	r3, r3, #917504
 2192 0046 B3F5602F 		cmp	r3, #917504
 2193 004a 1DD1     		bne	.L130
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2194              		.loc 1 1522 0 discriminator 1
 2195 004c 7B68     		ldr	r3, [r7, #4]
 2196 004e DB68     		ldr	r3, [r3, #12]
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2197              		.loc 1 1521 0 discriminator 1
 2198 0050 002B     		cmp	r3, #0
 2199 0052 19D1     		bne	.L130
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 2200              		.loc 1 1525 0
 2201 0054 7B68     		ldr	r3, [r7, #4]
 2202 0056 1B68     		ldr	r3, [r3]
 2203 0058 7A68     		ldr	r2, [r7, #4]
 2204 005a 1268     		ldr	r2, [r2]
 2205 005c 5268     		ldr	r2, [r2, #4]
 2206 005e 22F02002 		bic	r2, r2, #32
 2207 0062 5A60     		str	r2, [r3, #4]
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
ARM GAS  /tmp/ccUcNrG8.s 			page 76


1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 2208              		.loc 1 1528 0
 2209 0064 7B68     		ldr	r3, [r7, #4]
 2210 0066 9B6A     		ldr	r3, [r3, #40]
 2211 0068 23F48072 		bic	r2, r3, #256
 2212 006c 7B68     		ldr	r3, [r7, #4]
 2213 006e 9A62     		str	r2, [r3, #40]
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 2214              		.loc 1 1530 0
 2215 0070 7B68     		ldr	r3, [r7, #4]
 2216 0072 9B6A     		ldr	r3, [r3, #40]
 2217 0074 03F48053 		and	r3, r3, #4096
 2218 0078 002B     		cmp	r3, #0
 2219 007a 05D1     		bne	.L130
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2220              		.loc 1 1532 0
 2221 007c 7B68     		ldr	r3, [r7, #4]
 2222 007e 9B6A     		ldr	r3, [r3, #40]
 2223 0080 43F00102 		orr	r2, r3, #1
 2224 0084 7B68     		ldr	r3, [r7, #4]
 2225 0086 9A62     		str	r2, [r3, #40]
 2226              	.L130:
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2227              		.loc 1 1537 0
 2228 0088 7868     		ldr	r0, [r7, #4]
 2229 008a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 2230              		.loc 1 1540 0
 2231 008e 7B68     		ldr	r3, [r7, #4]
 2232 0090 1B68     		ldr	r3, [r3]
 2233 0092 6FF01202 		mvn	r2, #18
 2234 0096 1A60     		str	r2, [r3]
 2235              	.L128:
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 2236              		.loc 1 1545 0
 2237 0098 7B68     		ldr	r3, [r7, #4]
 2238 009a 1B68     		ldr	r3, [r3]
 2239 009c 5B68     		ldr	r3, [r3, #4]
 2240 009e 03F08003 		and	r3, r3, #128
 2241 00a2 002B     		cmp	r3, #0
 2242 00a4 4FD0     		beq	.L131
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 2243              		.loc 1 1547 0
ARM GAS  /tmp/ccUcNrG8.s 			page 77


 2244 00a6 7B68     		ldr	r3, [r7, #4]
 2245 00a8 1B68     		ldr	r3, [r3]
 2246 00aa 1B68     		ldr	r3, [r3]
 2247 00ac 03F00403 		and	r3, r3, #4
 2248 00b0 002B     		cmp	r3, #0
 2249 00b2 48D0     		beq	.L131
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2250              		.loc 1 1550 0
 2251 00b4 7B68     		ldr	r3, [r7, #4]
 2252 00b6 9B6A     		ldr	r3, [r3, #40]
 2253 00b8 03F01003 		and	r3, r3, #16
 2254 00bc 002B     		cmp	r3, #0
 2255 00be 05D1     		bne	.L132
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2256              		.loc 1 1553 0
 2257 00c0 7B68     		ldr	r3, [r7, #4]
 2258 00c2 9B6A     		ldr	r3, [r3, #40]
 2259 00c4 43F40052 		orr	r2, r3, #8192
 2260 00c8 7B68     		ldr	r3, [r7, #4]
 2261 00ca 9A62     		str	r2, [r3, #40]
 2262              	.L132:
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 2263              		.loc 1 1563 0
 2264 00cc 7B68     		ldr	r3, [r7, #4]
 2265 00ce 1B68     		ldr	r3, [r3]
 2266 00d0 9B68     		ldr	r3, [r3, #8]
 2267 00d2 03F4E043 		and	r3, r3, #28672
 2268 00d6 B3F5E04F 		cmp	r3, #28672
 2269 00da 12D0     		beq	.L133
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2270              		.loc 1 1564 0 discriminator 1
 2271 00dc 7B68     		ldr	r3, [r7, #4]
 2272 00de 1B68     		ldr	r3, [r3]
 2273 00e0 5B68     		ldr	r3, [r3, #4]
 2274 00e2 03F48063 		and	r3, r3, #1024
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2275              		.loc 1 1563 0 discriminator 1
 2276 00e6 002B     		cmp	r3, #0
 2277 00e8 25D1     		bne	.L134
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2278              		.loc 1 1565 0
 2279 00ea 7B68     		ldr	r3, [r7, #4]
 2280 00ec 1B68     		ldr	r3, [r3]
 2281 00ee 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccUcNrG8.s 			page 78


 2282 00f0 03F46023 		and	r3, r3, #917504
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2283              		.loc 1 1564 0
 2284 00f4 B3F5602F 		cmp	r3, #917504
 2285 00f8 1DD1     		bne	.L134
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 2286              		.loc 1 1566 0
 2287 00fa 7B68     		ldr	r3, [r7, #4]
 2288 00fc DB68     		ldr	r3, [r3, #12]
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2289              		.loc 1 1565 0
 2290 00fe 002B     		cmp	r3, #0
 2291 0100 19D1     		bne	.L134
 2292              	.L133:
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 2293              		.loc 1 1569 0
 2294 0102 7B68     		ldr	r3, [r7, #4]
 2295 0104 1B68     		ldr	r3, [r3]
 2296 0106 7A68     		ldr	r2, [r7, #4]
 2297 0108 1268     		ldr	r2, [r2]
 2298 010a 5268     		ldr	r2, [r2, #4]
 2299 010c 22F08002 		bic	r2, r2, #128
 2300 0110 5A60     		str	r2, [r3, #4]
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 2301              		.loc 1 1572 0
 2302 0112 7B68     		ldr	r3, [r7, #4]
 2303 0114 9B6A     		ldr	r3, [r3, #40]
 2304 0116 23F48052 		bic	r2, r3, #4096
 2305 011a 7B68     		ldr	r3, [r7, #4]
 2306 011c 9A62     		str	r2, [r3, #40]
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2307              		.loc 1 1574 0
 2308 011e 7B68     		ldr	r3, [r7, #4]
 2309 0120 9B6A     		ldr	r3, [r3, #40]
 2310 0122 03F48073 		and	r3, r3, #256
 2311 0126 002B     		cmp	r3, #0
 2312 0128 05D1     		bne	.L134
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2313              		.loc 1 1576 0
 2314 012a 7B68     		ldr	r3, [r7, #4]
 2315 012c 9B6A     		ldr	r3, [r3, #40]
 2316 012e 43F00102 		orr	r2, r3, #1
 2317 0132 7B68     		ldr	r3, [r7, #4]
 2318 0134 9A62     		str	r2, [r3, #40]
 2319              	.L134:
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
 2320              		.loc 1 1581 0
ARM GAS  /tmp/ccUcNrG8.s 			page 79


 2321 0136 7868     		ldr	r0, [r7, #4]
 2322 0138 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 2323              		.loc 1 1584 0
 2324 013c 7B68     		ldr	r3, [r7, #4]
 2325 013e 1B68     		ldr	r3, [r3]
 2326 0140 6FF00C02 		mvn	r2, #12
 2327 0144 1A60     		str	r2, [r3]
 2328              	.L131:
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2329              		.loc 1 1589 0
 2330 0146 7B68     		ldr	r3, [r7, #4]
 2331 0148 1B68     		ldr	r3, [r3]
 2332 014a 5B68     		ldr	r3, [r3, #4]
 2333 014c 03F04003 		and	r3, r3, #64
 2334 0150 002B     		cmp	r3, #0
 2335 0152 14D0     		beq	.L127
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 2336              		.loc 1 1591 0
 2337 0154 7B68     		ldr	r3, [r7, #4]
 2338 0156 1B68     		ldr	r3, [r3]
 2339 0158 1B68     		ldr	r3, [r3]
 2340 015a 03F00103 		and	r3, r3, #1
 2341 015e 002B     		cmp	r3, #0
 2342 0160 0DD0     		beq	.L127
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2343              		.loc 1 1594 0
 2344 0162 7B68     		ldr	r3, [r7, #4]
 2345 0164 9B6A     		ldr	r3, [r3, #40]
 2346 0166 43F48032 		orr	r2, r3, #65536
 2347 016a 7B68     		ldr	r3, [r7, #4]
 2348 016c 9A62     		str	r2, [r3, #40]
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 2349              		.loc 1 1597 0
 2350 016e 7868     		ldr	r0, [r7, #4]
 2351 0170 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2352              		.loc 1 1600 0
 2353 0174 7B68     		ldr	r3, [r7, #4]
 2354 0176 1B68     		ldr	r3, [r3]
 2355 0178 6FF00102 		mvn	r2, #1
 2356 017c 1A60     		str	r2, [r3]
 2357              	.L127:
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccUcNrG8.s 			page 80


1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2358              		.loc 1 1604 0
 2359 017e 0837     		adds	r7, r7, #8
 2360              	.LCFI71:
 2361              		.cfi_def_cfa_offset 8
 2362 0180 BD46     		mov	sp, r7
 2363              	.LCFI72:
 2364              		.cfi_def_cfa_register 13
 2365              		@ sp needed
 2366 0182 80BD     		pop	{r7, pc}
 2367              		.cfi_endproc
 2368              	.LFE76:
 2370              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2371              		.align	2
 2372              		.weak	HAL_ADC_ConvCpltCallback
 2373              		.thumb
 2374              		.thumb_func
 2376              	HAL_ADC_ConvCpltCallback:
 2377              	.LFB77:
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2378              		.loc 1 1612 0
 2379              		.cfi_startproc
 2380              		@ args = 0, pretend = 0, frame = 8
 2381              		@ frame_needed = 1, uses_anonymous_args = 0
 2382              		@ link register save eliminated.
 2383 0000 80B4     		push	{r7}
 2384              	.LCFI73:
 2385              		.cfi_def_cfa_offset 4
 2386              		.cfi_offset 7, -4
 2387 0002 83B0     		sub	sp, sp, #12
 2388              	.LCFI74:
 2389              		.cfi_def_cfa_offset 16
 2390 0004 00AF     		add	r7, sp, #0
 2391              	.LCFI75:
 2392              		.cfi_def_cfa_register 7
 2393 0006 7860     		str	r0, [r7, #4]
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2394              		.loc 1 1618 0
 2395 0008 0C37     		adds	r7, r7, #12
 2396              	.LCFI76:
 2397              		.cfi_def_cfa_offset 4
 2398 000a BD46     		mov	sp, r7
 2399              	.LCFI77:
ARM GAS  /tmp/ccUcNrG8.s 			page 81


 2400              		.cfi_def_cfa_register 13
 2401              		@ sp needed
 2402 000c 5DF8047B 		ldr	r7, [sp], #4
 2403              	.LCFI78:
 2404              		.cfi_restore 7
 2405              		.cfi_def_cfa_offset 0
 2406 0010 7047     		bx	lr
 2407              		.cfi_endproc
 2408              	.LFE77:
 2410 0012 00BF     		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2411              		.align	2
 2412              		.weak	HAL_ADC_ConvHalfCpltCallback
 2413              		.thumb
 2414              		.thumb_func
 2416              	HAL_ADC_ConvHalfCpltCallback:
 2417              	.LFB78:
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2418              		.loc 1 1626 0
 2419              		.cfi_startproc
 2420              		@ args = 0, pretend = 0, frame = 8
 2421              		@ frame_needed = 1, uses_anonymous_args = 0
 2422              		@ link register save eliminated.
 2423 0000 80B4     		push	{r7}
 2424              	.LCFI79:
 2425              		.cfi_def_cfa_offset 4
 2426              		.cfi_offset 7, -4
 2427 0002 83B0     		sub	sp, sp, #12
 2428              	.LCFI80:
 2429              		.cfi_def_cfa_offset 16
 2430 0004 00AF     		add	r7, sp, #0
 2431              	.LCFI81:
 2432              		.cfi_def_cfa_register 7
 2433 0006 7860     		str	r0, [r7, #4]
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2434              		.loc 1 1632 0
 2435 0008 0C37     		adds	r7, r7, #12
 2436              	.LCFI82:
 2437              		.cfi_def_cfa_offset 4
 2438 000a BD46     		mov	sp, r7
 2439              	.LCFI83:
 2440              		.cfi_def_cfa_register 13
 2441              		@ sp needed
 2442 000c 5DF8047B 		ldr	r7, [sp], #4
 2443              	.LCFI84:
 2444              		.cfi_restore 7
ARM GAS  /tmp/ccUcNrG8.s 			page 82


 2445              		.cfi_def_cfa_offset 0
 2446 0010 7047     		bx	lr
 2447              		.cfi_endproc
 2448              	.LFE78:
 2450 0012 00BF     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2451              		.align	2
 2452              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2453              		.thumb
 2454              		.thumb_func
 2456              	HAL_ADC_LevelOutOfWindowCallback:
 2457              	.LFB79:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2458              		.loc 1 1640 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 8
 2461              		@ frame_needed = 1, uses_anonymous_args = 0
 2462              		@ link register save eliminated.
 2463 0000 80B4     		push	{r7}
 2464              	.LCFI85:
 2465              		.cfi_def_cfa_offset 4
 2466              		.cfi_offset 7, -4
 2467 0002 83B0     		sub	sp, sp, #12
 2468              	.LCFI86:
 2469              		.cfi_def_cfa_offset 16
 2470 0004 00AF     		add	r7, sp, #0
 2471              	.LCFI87:
 2472              		.cfi_def_cfa_register 7
 2473 0006 7860     		str	r0, [r7, #4]
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2474              		.loc 1 1646 0
 2475 0008 0C37     		adds	r7, r7, #12
 2476              	.LCFI88:
 2477              		.cfi_def_cfa_offset 4
 2478 000a BD46     		mov	sp, r7
 2479              	.LCFI89:
 2480              		.cfi_def_cfa_register 13
 2481              		@ sp needed
 2482 000c 5DF8047B 		ldr	r7, [sp], #4
 2483              	.LCFI90:
 2484              		.cfi_restore 7
 2485              		.cfi_def_cfa_offset 0
 2486 0010 7047     		bx	lr
 2487              		.cfi_endproc
 2488              	.LFE79:
 2490 0012 00BF     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
ARM GAS  /tmp/ccUcNrG8.s 			page 83


 2491              		.align	2
 2492              		.weak	HAL_ADC_ErrorCallback
 2493              		.thumb
 2494              		.thumb_func
 2496              	HAL_ADC_ErrorCallback:
 2497              	.LFB80:
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2498              		.loc 1 1655 0
 2499              		.cfi_startproc
 2500              		@ args = 0, pretend = 0, frame = 8
 2501              		@ frame_needed = 1, uses_anonymous_args = 0
 2502              		@ link register save eliminated.
 2503 0000 80B4     		push	{r7}
 2504              	.LCFI91:
 2505              		.cfi_def_cfa_offset 4
 2506              		.cfi_offset 7, -4
 2507 0002 83B0     		sub	sp, sp, #12
 2508              	.LCFI92:
 2509              		.cfi_def_cfa_offset 16
 2510 0004 00AF     		add	r7, sp, #0
 2511              	.LCFI93:
 2512              		.cfi_def_cfa_register 7
 2513 0006 7860     		str	r0, [r7, #4]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2514              		.loc 1 1661 0
 2515 0008 0C37     		adds	r7, r7, #12
 2516              	.LCFI94:
 2517              		.cfi_def_cfa_offset 4
 2518 000a BD46     		mov	sp, r7
 2519              	.LCFI95:
 2520              		.cfi_def_cfa_register 13
 2521              		@ sp needed
 2522 000c 5DF8047B 		ldr	r7, [sp], #4
 2523              	.LCFI96:
 2524              		.cfi_restore 7
 2525              		.cfi_def_cfa_offset 0
 2526 0010 7047     		bx	lr
 2527              		.cfi_endproc
 2528              	.LFE80:
 2530 0012 00BF     		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2531              		.align	2
 2532              		.global	HAL_ADC_ConfigChannel
 2533              		.thumb
 2534              		.thumb_func
ARM GAS  /tmp/ccUcNrG8.s 			page 84


 2536              	HAL_ADC_ConfigChannel:
 2537              	.LFB81:
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
 2538              		.loc 1 1703 0
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 96
 2541              		@ frame_needed = 1, uses_anonymous_args = 0
 2542              		@ link register save eliminated.
 2543 0000 90B4     		push	{r4, r7}
 2544              	.LCFI97:
 2545              		.cfi_def_cfa_offset 8
 2546              		.cfi_offset 4, -8
 2547              		.cfi_offset 7, -4
 2548 0002 98B0     		sub	sp, sp, #96
 2549              	.LCFI98:
 2550              		.cfi_def_cfa_offset 104
ARM GAS  /tmp/ccUcNrG8.s 			page 85


 2551 0004 00AF     		add	r7, sp, #0
 2552              	.LCFI99:
 2553              		.cfi_def_cfa_register 7
 2554 0006 7860     		str	r0, [r7, #4]
 2555 0008 3960     		str	r1, [r7]
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2556              		.loc 1 1704 0
 2557 000a 0023     		movs	r3, #0
 2558 000c 87F85F30 		strb	r3, [r7, #95]
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 2559              		.loc 1 1705 0
 2560 0010 0023     		movs	r3, #0
 2561 0012 BB60     		str	r3, [r7, #8]
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2562              		.loc 1 1714 0
 2563 0014 7B68     		ldr	r3, [r7, #4]
 2564 0016 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2565 001a 012B     		cmp	r3, #1
 2566 001c 01D1     		bne	.L141
 2567              		.loc 1 1714 0 is_stmt 0 discriminator 1
 2568 001e 0223     		movs	r3, #2
 2569 0020 39E1     		b	.L142
 2570              	.L141:
 2571              		.loc 1 1714 0 discriminator 2
 2572 0022 7B68     		ldr	r3, [r7, #4]
 2573 0024 0122     		movs	r2, #1
 2574 0026 83F82420 		strb	r2, [r3, #36]
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7)
 2575              		.loc 1 1719 0 is_stmt 1 discriminator 2
 2576 002a 3B68     		ldr	r3, [r7]
 2577 002c 5B68     		ldr	r3, [r3, #4]
 2578 002e 062B     		cmp	r3, #6
 2579 0030 2FD8     		bhi	.L143
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
 2580              		.loc 1 1721 0
 2581 0032 7B68     		ldr	r3, [r7, #4]
 2582 0034 1B68     		ldr	r3, [r3]
 2583 0036 7A68     		ldr	r2, [r7, #4]
 2584 0038 1268     		ldr	r2, [r2]
 2585 003a 516B     		ldr	r1, [r2, #52]
 2586 003c 4FF47872 		mov	r2, #992
 2587 0040 BA65     		str	r2, [r7, #88]
 2588              	.LBB34:
 2589              	.LBB35:
ARM GAS  /tmp/ccUcNrG8.s 			page 86


 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2590              		.loc 2 531 0
 2591 0042 BA6D     		ldr	r2, [r7, #88]
 2592              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2593 0044 92FAA2F2 		rbit r2, r2
 2594              	@ 0 "" 2
 2595              		.thumb
 2596 0048 7A65     		str	r2, [r7, #84]
 2597              		.loc 2 544 0
 2598 004a 7A6D     		ldr	r2, [r7, #84]
 2599              	.LBE35:
 2600              	.LBE34:
 2601              		.loc 1 1721 0
 2602 004c B2FA82F2 		clz	r2, r2
 2603 0050 1046     		mov	r0, r2
 2604 0052 3A68     		ldr	r2, [r7]
 2605 0054 5268     		ldr	r2, [r2, #4]
 2606 0056 013A     		subs	r2, r2, #1
 2607 0058 02FB00F2 		mul	r2, r2, r0
 2608 005c 1046     		mov	r0, r2
 2609 005e 1F22     		movs	r2, #31
 2610 0060 8240     		lsls	r2, r2, r0
 2611 0062 D243     		mvns	r2, r2
 2612 0064 1140     		ands	r1, r1, r2
 2613 0066 3A68     		ldr	r2, [r7]
 2614 0068 1268     		ldr	r2, [r2]
 2615 006a 4FF47870 		mov	r0, #992
 2616 006e 3865     		str	r0, [r7, #80]
 2617              	.LBB36:
 2618              	.LBB37:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2619              		.loc 2 531 0
 2620 0070 386D     		ldr	r0, [r7, #80]
 2621              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2622 0072 90FAA0F0 		rbit r0, r0
 2623              	@ 0 "" 2
 2624              		.thumb
 2625 0076 F864     		str	r0, [r7, #76]
 2626              		.loc 2 544 0
 2627 0078 F86C     		ldr	r0, [r7, #76]
 2628              	.LBE37:
 2629              	.LBE36:
 2630              		.loc 1 1721 0
 2631 007a B0FA80F0 		clz	r0, r0
 2632 007e 0446     		mov	r4, r0
 2633 0080 3868     		ldr	r0, [r7]
 2634 0082 4068     		ldr	r0, [r0, #4]
 2635 0084 0138     		subs	r0, r0, #1
 2636 0086 00FB04F0 		mul	r0, r0, r4
 2637 008a 8240     		lsls	r2, r2, r0
 2638 008c 0A43     		orrs	r2, r2, r1
 2639 008e 5A63     		str	r2, [r3, #52]
 2640 0090 62E0     		b	.L146
 2641              	.L143:
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
ARM GAS  /tmp/ccUcNrG8.s 			page 87


1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13)
 2642              		.loc 1 1726 0
 2643 0092 3B68     		ldr	r3, [r7]
 2644 0094 5B68     		ldr	r3, [r3, #4]
 2645 0096 0C2B     		cmp	r3, #12
 2646 0098 2FD8     		bhi	.L147
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
 2647              		.loc 1 1728 0
 2648 009a 7B68     		ldr	r3, [r7, #4]
 2649 009c 1B68     		ldr	r3, [r3]
 2650 009e 7A68     		ldr	r2, [r7, #4]
 2651 00a0 1268     		ldr	r2, [r2]
 2652 00a2 116B     		ldr	r1, [r2, #48]
 2653 00a4 4FF47872 		mov	r2, #992
 2654 00a8 BA64     		str	r2, [r7, #72]
 2655              	.LBB38:
 2656              	.LBB39:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2657              		.loc 2 531 0
 2658 00aa BA6C     		ldr	r2, [r7, #72]
 2659              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2660 00ac 92FAA2F2 		rbit r2, r2
 2661              	@ 0 "" 2
 2662              		.thumb
 2663 00b0 7A64     		str	r2, [r7, #68]
 2664              		.loc 2 544 0
 2665 00b2 7A6C     		ldr	r2, [r7, #68]
 2666              	.LBE39:
 2667              	.LBE38:
 2668              		.loc 1 1728 0
 2669 00b4 B2FA82F2 		clz	r2, r2
 2670 00b8 1046     		mov	r0, r2
 2671 00ba 3A68     		ldr	r2, [r7]
 2672 00bc 5268     		ldr	r2, [r2, #4]
 2673 00be 073A     		subs	r2, r2, #7
 2674 00c0 02FB00F2 		mul	r2, r2, r0
 2675 00c4 1046     		mov	r0, r2
 2676 00c6 1F22     		movs	r2, #31
 2677 00c8 8240     		lsls	r2, r2, r0
 2678 00ca D243     		mvns	r2, r2
 2679 00cc 1140     		ands	r1, r1, r2
 2680 00ce 3A68     		ldr	r2, [r7]
 2681 00d0 1268     		ldr	r2, [r2]
 2682 00d2 4FF47870 		mov	r0, #992
 2683 00d6 3864     		str	r0, [r7, #64]
 2684              	.LBB40:
 2685              	.LBB41:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2686              		.loc 2 531 0
 2687 00d8 386C     		ldr	r0, [r7, #64]
 2688              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2689 00da 90FAA0F0 		rbit r0, r0
 2690              	@ 0 "" 2
 2691              		.thumb
 2692 00de F863     		str	r0, [r7, #60]
ARM GAS  /tmp/ccUcNrG8.s 			page 88


 2693              		.loc 2 544 0
 2694 00e0 F86B     		ldr	r0, [r7, #60]
 2695              	.LBE41:
 2696              	.LBE40:
 2697              		.loc 1 1728 0
 2698 00e2 B0FA80F0 		clz	r0, r0
 2699 00e6 0446     		mov	r4, r0
 2700 00e8 3868     		ldr	r0, [r7]
 2701 00ea 4068     		ldr	r0, [r0, #4]
 2702 00ec 0738     		subs	r0, r0, #7
 2703 00ee 00FB04F0 		mul	r0, r0, r4
 2704 00f2 8240     		lsls	r2, r2, r0
 2705 00f4 0A43     		orrs	r2, r2, r1
 2706 00f6 1A63     		str	r2, [r3, #48]
 2707 00f8 2EE0     		b	.L146
 2708              	.L147:
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
 2709              		.loc 1 1735 0
 2710 00fa 7B68     		ldr	r3, [r7, #4]
 2711 00fc 1B68     		ldr	r3, [r3]
 2712 00fe 7A68     		ldr	r2, [r7, #4]
 2713 0100 1268     		ldr	r2, [r2]
 2714 0102 D16A     		ldr	r1, [r2, #44]
 2715 0104 4FF47872 		mov	r2, #992
 2716 0108 BA63     		str	r2, [r7, #56]
 2717              	.LBB42:
 2718              	.LBB43:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2719              		.loc 2 531 0
 2720 010a BA6B     		ldr	r2, [r7, #56]
 2721              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2722 010c 92FAA2F2 		rbit r2, r2
 2723              	@ 0 "" 2
 2724              		.thumb
 2725 0110 7A63     		str	r2, [r7, #52]
 2726              		.loc 2 544 0
 2727 0112 7A6B     		ldr	r2, [r7, #52]
 2728              	.LBE43:
 2729              	.LBE42:
 2730              		.loc 1 1735 0
 2731 0114 B2FA82F2 		clz	r2, r2
 2732 0118 1046     		mov	r0, r2
 2733 011a 3A68     		ldr	r2, [r7]
 2734 011c 5268     		ldr	r2, [r2, #4]
 2735 011e 0D3A     		subs	r2, r2, #13
 2736 0120 02FB00F2 		mul	r2, r2, r0
 2737 0124 1046     		mov	r0, r2
 2738 0126 1F22     		movs	r2, #31
 2739 0128 8240     		lsls	r2, r2, r0
 2740 012a D243     		mvns	r2, r2
 2741 012c 1140     		ands	r1, r1, r2
ARM GAS  /tmp/ccUcNrG8.s 			page 89


 2742 012e 3A68     		ldr	r2, [r7]
 2743 0130 1268     		ldr	r2, [r2]
 2744 0132 4FF47870 		mov	r0, #992
 2745 0136 3863     		str	r0, [r7, #48]
 2746              	.LBB44:
 2747              	.LBB45:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2748              		.loc 2 531 0
 2749 0138 386B     		ldr	r0, [r7, #48]
 2750              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2751 013a 90FAA0F0 		rbit r0, r0
 2752              	@ 0 "" 2
 2753              		.thumb
 2754 013e F862     		str	r0, [r7, #44]
 2755              		.loc 2 544 0
 2756 0140 F86A     		ldr	r0, [r7, #44]
 2757              	.LBE45:
 2758              	.LBE44:
 2759              		.loc 1 1735 0
 2760 0142 B0FA80F0 		clz	r0, r0
 2761 0146 0446     		mov	r4, r0
 2762 0148 3868     		ldr	r0, [r7]
 2763 014a 4068     		ldr	r0, [r0, #4]
 2764 014c 0D38     		subs	r0, r0, #13
 2765 014e 00FB04F0 		mul	r0, r0, r4
 2766 0152 8240     		lsls	r2, r2, r0
 2767 0154 0A43     		orrs	r2, r2, r1
 2768 0156 DA62     		str	r2, [r3, #44]
 2769              	.L146:
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
 2770              		.loc 1 1743 0
 2771 0158 3B68     		ldr	r3, [r7]
 2772 015a 1B68     		ldr	r3, [r3]
 2773 015c 092B     		cmp	r3, #9
 2774 015e 2DD9     		bls	.L152
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
 2775              		.loc 1 1745 0
 2776 0160 7B68     		ldr	r3, [r7, #4]
 2777 0162 1B68     		ldr	r3, [r3]
 2778 0164 7A68     		ldr	r2, [r7, #4]
 2779 0166 1268     		ldr	r2, [r2]
 2780 0168 D168     		ldr	r1, [r2, #12]
 2781 016a 3822     		movs	r2, #56
 2782 016c BA62     		str	r2, [r7, #40]
 2783              	.LBB46:
 2784              	.LBB47:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2785              		.loc 2 531 0
 2786 016e BA6A     		ldr	r2, [r7, #40]
ARM GAS  /tmp/ccUcNrG8.s 			page 90


 2787              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2788 0170 92FAA2F2 		rbit r2, r2
 2789              	@ 0 "" 2
 2790              		.thumb
 2791 0174 7A62     		str	r2, [r7, #36]
 2792              		.loc 2 544 0
 2793 0176 7A6A     		ldr	r2, [r7, #36]
 2794              	.LBE47:
 2795              	.LBE46:
 2796              		.loc 1 1745 0
 2797 0178 B2FA82F2 		clz	r2, r2
 2798 017c 1046     		mov	r0, r2
 2799 017e 3A68     		ldr	r2, [r7]
 2800 0180 1268     		ldr	r2, [r2]
 2801 0182 0A3A     		subs	r2, r2, #10
 2802 0184 02FB00F2 		mul	r2, r2, r0
 2803 0188 1046     		mov	r0, r2
 2804 018a 0722     		movs	r2, #7
 2805 018c 8240     		lsls	r2, r2, r0
 2806 018e D243     		mvns	r2, r2
 2807 0190 1140     		ands	r1, r1, r2
 2808 0192 3A68     		ldr	r2, [r7]
 2809 0194 9268     		ldr	r2, [r2, #8]
 2810 0196 3820     		movs	r0, #56
 2811 0198 3862     		str	r0, [r7, #32]
 2812              	.LBB48:
 2813              	.LBB49:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2814              		.loc 2 531 0
 2815 019a 386A     		ldr	r0, [r7, #32]
 2816              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2817 019c 90FAA0F0 		rbit r0, r0
 2818              	@ 0 "" 2
 2819              		.thumb
 2820 01a0 F861     		str	r0, [r7, #28]
 2821              		.loc 2 544 0
 2822 01a2 F869     		ldr	r0, [r7, #28]
 2823              	.LBE49:
 2824              	.LBE48:
 2825              		.loc 1 1745 0
 2826 01a4 B0FA80F0 		clz	r0, r0
 2827 01a8 0446     		mov	r4, r0
 2828 01aa 3868     		ldr	r0, [r7]
 2829 01ac 0068     		ldr	r0, [r0]
 2830 01ae 0A38     		subs	r0, r0, #10
 2831 01b0 00FB04F0 		mul	r0, r0, r4
 2832 01b4 8240     		lsls	r2, r2, r0
 2833 01b6 0A43     		orrs	r2, r2, r1
 2834 01b8 DA60     		str	r2, [r3, #12]
 2835 01ba 2AE0     		b	.L155
 2836              	.L152:
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
ARM GAS  /tmp/ccUcNrG8.s 			page 91


 2837              		.loc 1 1751 0
 2838 01bc 7B68     		ldr	r3, [r7, #4]
 2839 01be 1B68     		ldr	r3, [r3]
 2840 01c0 7A68     		ldr	r2, [r7, #4]
 2841 01c2 1268     		ldr	r2, [r2]
 2842 01c4 1169     		ldr	r1, [r2, #16]
 2843 01c6 3822     		movs	r2, #56
 2844 01c8 BA61     		str	r2, [r7, #24]
 2845              	.LBB50:
 2846              	.LBB51:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2847              		.loc 2 531 0
 2848 01ca BA69     		ldr	r2, [r7, #24]
 2849              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2850 01cc 92FAA2F2 		rbit r2, r2
 2851              	@ 0 "" 2
 2852              		.thumb
 2853 01d0 7A61     		str	r2, [r7, #20]
 2854              		.loc 2 544 0
 2855 01d2 7A69     		ldr	r2, [r7, #20]
 2856              	.LBE51:
 2857              	.LBE50:
 2858              		.loc 1 1751 0
 2859 01d4 B2FA82F2 		clz	r2, r2
 2860 01d8 1046     		mov	r0, r2
 2861 01da 3A68     		ldr	r2, [r7]
 2862 01dc 1268     		ldr	r2, [r2]
 2863 01de 02FB00F2 		mul	r2, r2, r0
 2864 01e2 1046     		mov	r0, r2
 2865 01e4 0722     		movs	r2, #7
 2866 01e6 8240     		lsls	r2, r2, r0
 2867 01e8 D243     		mvns	r2, r2
 2868 01ea 1140     		ands	r1, r1, r2
 2869 01ec 3A68     		ldr	r2, [r7]
 2870 01ee 9268     		ldr	r2, [r2, #8]
 2871 01f0 3820     		movs	r0, #56
 2872 01f2 3861     		str	r0, [r7, #16]
 2873              	.LBB52:
 2874              	.LBB53:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2875              		.loc 2 531 0
 2876 01f4 3869     		ldr	r0, [r7, #16]
 2877              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2878 01f6 90FAA0F0 		rbit r0, r0
 2879              	@ 0 "" 2
 2880              		.thumb
 2881 01fa F860     		str	r0, [r7, #12]
 2882              		.loc 2 544 0
 2883 01fc F868     		ldr	r0, [r7, #12]
 2884              	.LBE53:
 2885              	.LBE52:
 2886              		.loc 1 1751 0
 2887 01fe B0FA80F0 		clz	r0, r0
 2888 0202 0446     		mov	r4, r0
 2889 0204 3868     		ldr	r0, [r7]
 2890 0206 0068     		ldr	r0, [r0]
 2891 0208 00FB04F0 		mul	r0, r0, r4
ARM GAS  /tmp/ccUcNrG8.s 			page 92


 2892 020c 8240     		lsls	r2, r2, r0
 2893 020e 0A43     		orrs	r2, r2, r1
 2894 0210 1A61     		str	r2, [r3, #16]
 2895              	.L155:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 2896              		.loc 1 1758 0
 2897 0212 3B68     		ldr	r3, [r7]
 2898 0214 1B68     		ldr	r3, [r3]
 2899 0216 102B     		cmp	r3, #16
 2900 0218 03D0     		beq	.L158
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2901              		.loc 1 1759 0 discriminator 1
 2902 021a 3B68     		ldr	r3, [r7]
 2903 021c 1B68     		ldr	r3, [r3]
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2904              		.loc 1 1758 0 discriminator 1
 2905 021e 112B     		cmp	r3, #17
 2906 0220 33D1     		bne	.L159
 2907              	.L158:
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
 2908              		.loc 1 1764 0
 2909 0222 7B68     		ldr	r3, [r7, #4]
 2910 0224 1B68     		ldr	r3, [r3]
 2911 0226 1E4A     		ldr	r2, .L163
 2912 0228 9342     		cmp	r3, r2
 2913 022a 25D1     		bne	.L160
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2914              		.loc 1 1766 0
 2915 022c 7B68     		ldr	r3, [r7, #4]
 2916 022e 1B68     		ldr	r3, [r3]
 2917 0230 9B68     		ldr	r3, [r3, #8]
 2918 0232 03F40003 		and	r3, r3, #8388608
 2919 0236 002B     		cmp	r3, #0
 2920 0238 27D1     		bne	.L159
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2921              		.loc 1 1768 0
 2922 023a 7B68     		ldr	r3, [r7, #4]
 2923 023c 1B68     		ldr	r3, [r3]
 2924 023e 7A68     		ldr	r2, [r7, #4]
 2925 0240 1268     		ldr	r2, [r2]
 2926 0242 9268     		ldr	r2, [r2, #8]
 2927 0244 42F40002 		orr	r2, r2, #8388608
 2928 0248 9A60     		str	r2, [r3, #8]
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
ARM GAS  /tmp/ccUcNrG8.s 			page 93


 2929              		.loc 1 1770 0
 2930 024a 3B68     		ldr	r3, [r7]
 2931 024c 1B68     		ldr	r3, [r3]
 2932 024e 102B     		cmp	r3, #16
 2933 0250 1BD1     		bne	.L159
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 2934              		.loc 1 1774 0
 2935 0252 144B     		ldr	r3, .L163+4
 2936 0254 1B68     		ldr	r3, [r3]
 2937 0256 144A     		ldr	r2, .L163+8
 2938 0258 A2FB0323 		umull	r2, r3, r2, r3
 2939 025c 9A0C     		lsrs	r2, r3, #18
 2940 025e 1346     		mov	r3, r2
 2941 0260 9B00     		lsls	r3, r3, #2
 2942 0262 1344     		add	r3, r3, r2
 2943 0264 5B00     		lsls	r3, r3, #1
 2944 0266 BB60     		str	r3, [r7, #8]
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
 2945              		.loc 1 1775 0
 2946 0268 02E0     		b	.L161
 2947              	.L162:
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
 2948              		.loc 1 1777 0
 2949 026a BB68     		ldr	r3, [r7, #8]
 2950 026c 013B     		subs	r3, r3, #1
 2951 026e BB60     		str	r3, [r7, #8]
 2952              	.L161:
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
 2953              		.loc 1 1775 0
 2954 0270 BB68     		ldr	r3, [r7, #8]
 2955 0272 002B     		cmp	r3, #0
 2956 0274 F9D1     		bne	.L162
 2957 0276 08E0     		b	.L159
 2958              	.L160:
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2959              		.loc 1 1785 0
 2960 0278 7B68     		ldr	r3, [r7, #4]
 2961 027a 9B6A     		ldr	r3, [r3, #40]
 2962 027c 43F02002 		orr	r2, r3, #32
 2963 0280 7B68     		ldr	r3, [r7, #4]
 2964 0282 9A62     		str	r2, [r3, #40]
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 2965              		.loc 1 1787 0
 2966 0284 0123     		movs	r3, #1
 2967 0286 87F85F30 		strb	r3, [r7, #95]
ARM GAS  /tmp/ccUcNrG8.s 			page 94


 2968              	.L159:
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2969              		.loc 1 1792 0
 2970 028a 7B68     		ldr	r3, [r7, #4]
 2971 028c 0022     		movs	r2, #0
 2972 028e 83F82420 		strb	r2, [r3, #36]
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2973              		.loc 1 1795 0
 2974 0292 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 2975              	.L142:
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2976              		.loc 1 1796 0
 2977 0296 1846     		mov	r0, r3
 2978 0298 6037     		adds	r7, r7, #96
 2979              	.LCFI100:
 2980              		.cfi_def_cfa_offset 8
 2981 029a BD46     		mov	sp, r7
 2982              	.LCFI101:
 2983              		.cfi_def_cfa_register 13
 2984              		@ sp needed
 2985 029c 90BC     		pop	{r4, r7}
 2986              	.LCFI102:
 2987              		.cfi_restore 7
 2988              		.cfi_restore 4
 2989              		.cfi_def_cfa_offset 0
 2990 029e 7047     		bx	lr
 2991              	.L164:
 2992              		.align	2
 2993              	.L163:
 2994 02a0 00240140 		.word	1073816576
 2995 02a4 00000000 		.word	SystemCoreClock
 2996 02a8 83DE1B43 		.word	1125899907
 2997              		.cfi_endproc
 2998              	.LFE81:
 3000              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 3001              		.align	2
 3002              		.global	HAL_ADC_AnalogWDGConfig
 3003              		.thumb
 3004              		.thumb_func
 3006              	HAL_ADC_AnalogWDGConfig:
 3007              	.LFB82:
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
ARM GAS  /tmp/ccUcNrG8.s 			page 95


1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3008              		.loc 1 1813 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 8
 3011              		@ frame_needed = 1, uses_anonymous_args = 0
 3012              		@ link register save eliminated.
 3013 0000 80B4     		push	{r7}
 3014              	.LCFI103:
 3015              		.cfi_def_cfa_offset 4
 3016              		.cfi_offset 7, -4
 3017 0002 83B0     		sub	sp, sp, #12
 3018              	.LCFI104:
 3019              		.cfi_def_cfa_offset 16
 3020 0004 00AF     		add	r7, sp, #0
 3021              	.LCFI105:
 3022              		.cfi_def_cfa_register 7
 3023 0006 7860     		str	r0, [r7, #4]
 3024 0008 3960     		str	r1, [r7]
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 3025              		.loc 1 1821 0
 3026 000a 3B68     		ldr	r3, [r7]
 3027 000c 1B68     		ldr	r3, [r3]
 3028 000e 254A     		ldr	r2, .L171
 3029 0010 9342     		cmp	r3, r2
 3030 0012 03D0     		beq	.L166
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 3031              		.loc 1 1822 0 discriminator 1
 3032 0014 3B68     		ldr	r3, [r7]
 3033 0016 1B68     		ldr	r3, [r3]
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 3034              		.loc 1 1821 0 discriminator 1
 3035 0018 234A     		ldr	r2, .L171+4
 3036 001a 9342     		cmp	r3, r2
 3037              	.L166:
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 3038              		.loc 1 1829 0
 3039 001c 7B68     		ldr	r3, [r7, #4]
 3040 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
ARM GAS  /tmp/ccUcNrG8.s 			page 96


 3041 0022 012B     		cmp	r3, #1
 3042 0024 01D1     		bne	.L167
 3043              		.loc 1 1829 0 is_stmt 0 discriminator 1
 3044 0026 0223     		movs	r3, #2
 3045 0028 35E0     		b	.L168
 3046              	.L167:
 3047              		.loc 1 1829 0 discriminator 2
 3048 002a 7B68     		ldr	r3, [r7, #4]
 3049 002c 0122     		movs	r2, #1
 3050 002e 83F82420 		strb	r2, [r3, #36]
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 3051              		.loc 1 1834 0 is_stmt 1 discriminator 2
 3052 0032 3B68     		ldr	r3, [r7]
 3053 0034 9B68     		ldr	r3, [r3, #8]
 3054 0036 012B     		cmp	r3, #1
 3055 0038 08D1     		bne	.L169
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 3056              		.loc 1 1837 0
 3057 003a 7B68     		ldr	r3, [r7, #4]
 3058 003c 1B68     		ldr	r3, [r3]
 3059 003e 7A68     		ldr	r2, [r7, #4]
 3060 0040 1268     		ldr	r2, [r2]
 3061 0042 5268     		ldr	r2, [r2, #4]
 3062 0044 42F04002 		orr	r2, r2, #64
 3063 0048 5A60     		str	r2, [r3, #4]
 3064 004a 07E0     		b	.L170
 3065              	.L169:
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 3066              		.loc 1 1842 0
 3067 004c 7B68     		ldr	r3, [r7, #4]
 3068 004e 1B68     		ldr	r3, [r3]
 3069 0050 7A68     		ldr	r2, [r7, #4]
 3070 0052 1268     		ldr	r2, [r2]
 3071 0054 5268     		ldr	r2, [r2, #4]
 3072 0056 22F04002 		bic	r2, r2, #64
 3073 005a 5A60     		str	r2, [r3, #4]
 3074              	.L170:
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
 3075              		.loc 1 1850 0
 3076 005c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccUcNrG8.s 			page 97


 3077 005e 1A68     		ldr	r2, [r3]
 3078 0060 7B68     		ldr	r3, [r7, #4]
 3079 0062 1B68     		ldr	r3, [r3]
 3080 0064 5968     		ldr	r1, [r3, #4]
 3081 0066 114B     		ldr	r3, .L171+8
 3082 0068 0B40     		ands	r3, r3, r1
 3083 006a 3968     		ldr	r1, [r7]
 3084 006c 0868     		ldr	r0, [r1]
 3085 006e 3968     		ldr	r1, [r7]
 3086 0070 4968     		ldr	r1, [r1, #4]
 3087 0072 0143     		orrs	r1, r1, r0
 3088 0074 0B43     		orrs	r3, r3, r1
 3089 0076 5360     		str	r3, [r2, #4]
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 3090              		.loc 1 1859 0
 3091 0078 7B68     		ldr	r3, [r7, #4]
 3092 007a 1B68     		ldr	r3, [r3]
 3093 007c 3A68     		ldr	r2, [r7]
 3094 007e D268     		ldr	r2, [r2, #12]
 3095 0080 5A62     		str	r2, [r3, #36]
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 3096              		.loc 1 1862 0
 3097 0082 7B68     		ldr	r3, [r7, #4]
 3098 0084 1B68     		ldr	r3, [r3]
 3099 0086 3A68     		ldr	r2, [r7]
 3100 0088 1269     		ldr	r2, [r2, #16]
 3101 008a 9A62     		str	r2, [r3, #40]
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3102              		.loc 1 1865 0
 3103 008c 7B68     		ldr	r3, [r7, #4]
 3104 008e 0022     		movs	r2, #0
 3105 0090 83F82420 		strb	r2, [r3, #36]
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3106              		.loc 1 1868 0
 3107 0094 0023     		movs	r3, #0
 3108              	.L168:
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3109              		.loc 1 1869 0
 3110 0096 1846     		mov	r0, r3
 3111 0098 0C37     		adds	r7, r7, #12
 3112              	.LCFI106:
 3113              		.cfi_def_cfa_offset 4
 3114 009a BD46     		mov	sp, r7
ARM GAS  /tmp/ccUcNrG8.s 			page 98


 3115              	.LCFI107:
 3116              		.cfi_def_cfa_register 13
 3117              		@ sp needed
 3118 009c 5DF8047B 		ldr	r7, [sp], #4
 3119              	.LCFI108:
 3120              		.cfi_restore 7
 3121              		.cfi_def_cfa_offset 0
 3122 00a0 7047     		bx	lr
 3123              	.L172:
 3124 00a2 00BF     		.align	2
 3125              	.L171:
 3126 00a4 00028000 		.word	8389120
 3127 00a8 00024000 		.word	4194816
 3128 00ac E0FD3FFF 		.word	-12583456
 3129              		.cfi_endproc
 3130              	.LFE82:
 3132              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3133              		.align	2
 3134              		.global	HAL_ADC_GetState
 3135              		.thumb
 3136              		.thumb_func
 3138              	HAL_ADC_GetState:
 3139              	.LFB83:
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3140              		.loc 1 1900 0
 3141              		.cfi_startproc
 3142              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccUcNrG8.s 			page 99


 3143              		@ frame_needed = 1, uses_anonymous_args = 0
 3144              		@ link register save eliminated.
 3145 0000 80B4     		push	{r7}
 3146              	.LCFI109:
 3147              		.cfi_def_cfa_offset 4
 3148              		.cfi_offset 7, -4
 3149 0002 83B0     		sub	sp, sp, #12
 3150              	.LCFI110:
 3151              		.cfi_def_cfa_offset 16
 3152 0004 00AF     		add	r7, sp, #0
 3153              	.LCFI111:
 3154              		.cfi_def_cfa_register 7
 3155 0006 7860     		str	r0, [r7, #4]
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
 3156              		.loc 1 1902 0
 3157 0008 7B68     		ldr	r3, [r7, #4]
 3158 000a 9B6A     		ldr	r3, [r3, #40]
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3159              		.loc 1 1903 0
 3160 000c 1846     		mov	r0, r3
 3161 000e 0C37     		adds	r7, r7, #12
 3162              	.LCFI112:
 3163              		.cfi_def_cfa_offset 4
 3164 0010 BD46     		mov	sp, r7
 3165              	.LCFI113:
 3166              		.cfi_def_cfa_register 13
 3167              		@ sp needed
 3168 0012 5DF8047B 		ldr	r7, [sp], #4
 3169              	.LCFI114:
 3170              		.cfi_restore 7
 3171              		.cfi_def_cfa_offset 0
 3172 0016 7047     		bx	lr
 3173              		.cfi_endproc
 3174              	.LFE83:
 3176              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3177              		.align	2
 3178              		.global	HAL_ADC_GetError
 3179              		.thumb
 3180              		.thumb_func
 3182              	HAL_ADC_GetError:
 3183              	.LFB84:
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3184              		.loc 1 1911 0
 3185              		.cfi_startproc
 3186              		@ args = 0, pretend = 0, frame = 8
 3187              		@ frame_needed = 1, uses_anonymous_args = 0
 3188              		@ link register save eliminated.
 3189 0000 80B4     		push	{r7}
 3190              	.LCFI115:
ARM GAS  /tmp/ccUcNrG8.s 			page 100


 3191              		.cfi_def_cfa_offset 4
 3192              		.cfi_offset 7, -4
 3193 0002 83B0     		sub	sp, sp, #12
 3194              	.LCFI116:
 3195              		.cfi_def_cfa_offset 16
 3196 0004 00AF     		add	r7, sp, #0
 3197              	.LCFI117:
 3198              		.cfi_def_cfa_register 7
 3199 0006 7860     		str	r0, [r7, #4]
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 3200              		.loc 1 1912 0
 3201 0008 7B68     		ldr	r3, [r7, #4]
 3202 000a DB6A     		ldr	r3, [r3, #44]
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3203              		.loc 1 1913 0
 3204 000c 1846     		mov	r0, r3
 3205 000e 0C37     		adds	r7, r7, #12
 3206              	.LCFI118:
 3207              		.cfi_def_cfa_offset 4
 3208 0010 BD46     		mov	sp, r7
 3209              	.LCFI119:
 3210              		.cfi_def_cfa_register 13
 3211              		@ sp needed
 3212 0012 5DF8047B 		ldr	r7, [sp], #4
 3213              	.LCFI120:
 3214              		.cfi_restore 7
 3215              		.cfi_def_cfa_offset 0
 3216 0016 7047     		bx	lr
 3217              		.cfi_endproc
 3218              	.LFE84:
 3220              		.section	.text.ADC_Enable,"ax",%progbits
 3221              		.align	2
 3222              		.global	ADC_Enable
 3223              		.thumb
 3224              		.thumb_func
 3226              	ADC_Enable:
 3227              	.LFB85:
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
ARM GAS  /tmp/ccUcNrG8.s 			page 101


1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3228              		.loc 1 1935 0
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 16
 3231              		@ frame_needed = 1, uses_anonymous_args = 0
 3232 0000 80B5     		push	{r7, lr}
 3233              	.LCFI121:
 3234              		.cfi_def_cfa_offset 8
 3235              		.cfi_offset 7, -8
 3236              		.cfi_offset 14, -4
 3237 0002 84B0     		sub	sp, sp, #16
 3238              	.LCFI122:
 3239              		.cfi_def_cfa_offset 24
 3240 0004 00AF     		add	r7, sp, #0
 3241              	.LCFI123:
 3242              		.cfi_def_cfa_register 7
 3243 0006 7860     		str	r0, [r7, #4]
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 3244              		.loc 1 1936 0
 3245 0008 0023     		movs	r3, #0
 3246 000a FB60     		str	r3, [r7, #12]
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 3247              		.loc 1 1937 0
 3248 000c 0023     		movs	r3, #0
 3249 000e BB60     		str	r3, [r7, #8]
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3250              		.loc 1 1943 0
 3251 0010 7B68     		ldr	r3, [r7, #4]
 3252 0012 1B68     		ldr	r3, [r3]
 3253 0014 9B68     		ldr	r3, [r3, #8]
 3254 0016 03F00103 		and	r3, r3, #1
 3255 001a 002B     		cmp	r3, #0
 3256 001c 39D1     		bne	.L178
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3257              		.loc 1 1946 0
 3258 001e 7B68     		ldr	r3, [r7, #4]
 3259 0020 1B68     		ldr	r3, [r3]
 3260 0022 7A68     		ldr	r2, [r7, #4]
 3261 0024 1268     		ldr	r2, [r2]
 3262 0026 9268     		ldr	r2, [r2, #8]
 3263 0028 42F00102 		orr	r2, r2, #1
 3264 002c 9A60     		str	r2, [r3, #8]
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 3265              		.loc 1 1950 0
 3266 002e 1B4B     		ldr	r3, .L184
 3267 0030 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccUcNrG8.s 			page 102


 3268 0032 1B4A     		ldr	r2, .L184+4
 3269 0034 A2FB0323 		umull	r2, r3, r2, r3
 3270 0038 9B0C     		lsrs	r3, r3, #18
 3271 003a BB60     		str	r3, [r7, #8]
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
 3272              		.loc 1 1951 0
 3273 003c 02E0     		b	.L179
 3274              	.L180:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
 3275              		.loc 1 1953 0
 3276 003e BB68     		ldr	r3, [r7, #8]
 3277 0040 013B     		subs	r3, r3, #1
 3278 0042 BB60     		str	r3, [r7, #8]
 3279              	.L179:
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
 3280              		.loc 1 1951 0
 3281 0044 BB68     		ldr	r3, [r7, #8]
 3282 0046 002B     		cmp	r3, #0
 3283 0048 F9D1     		bne	.L180
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3284              		.loc 1 1957 0
 3285 004a FFF7FEFF 		bl	HAL_GetTick
 3286 004e F860     		str	r0, [r7, #12]
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
 3287              		.loc 1 1960 0
 3288 0050 18E0     		b	.L181
 3289              	.L183:
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3290              		.loc 1 1962 0
 3291 0052 FFF7FEFF 		bl	HAL_GetTick
 3292 0056 0246     		mov	r2, r0
 3293 0058 FB68     		ldr	r3, [r7, #12]
 3294 005a D31A     		subs	r3, r2, r3
 3295 005c 022B     		cmp	r3, #2
 3296 005e 11D9     		bls	.L181
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3297              		.loc 1 1965 0
 3298 0060 7B68     		ldr	r3, [r7, #4]
 3299 0062 9B6A     		ldr	r3, [r3, #40]
 3300 0064 43F01002 		orr	r2, r3, #16
 3301 0068 7B68     		ldr	r3, [r7, #4]
 3302 006a 9A62     		str	r2, [r3, #40]
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3303              		.loc 1 1968 0
 3304 006c 7B68     		ldr	r3, [r7, #4]
 3305 006e DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccUcNrG8.s 			page 103


 3306 0070 43F00102 		orr	r2, r3, #1
 3307 0074 7B68     		ldr	r3, [r7, #4]
 3308 0076 DA62     		str	r2, [r3, #44]
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 3309              		.loc 1 1971 0
 3310 0078 7B68     		ldr	r3, [r7, #4]
 3311 007a 0022     		movs	r2, #0
 3312 007c 83F82420 		strb	r2, [r3, #36]
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
 3313              		.loc 1 1973 0
 3314 0080 0123     		movs	r3, #1
 3315 0082 07E0     		b	.L182
 3316              	.L181:
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3317              		.loc 1 1960 0
 3318 0084 7B68     		ldr	r3, [r7, #4]
 3319 0086 1B68     		ldr	r3, [r3]
 3320 0088 9B68     		ldr	r3, [r3, #8]
 3321 008a 03F00103 		and	r3, r3, #1
 3322 008e 002B     		cmp	r3, #0
 3323 0090 DFD0     		beq	.L183
 3324              	.L178:
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3325              		.loc 1 1979 0
 3326 0092 0023     		movs	r3, #0
 3327              	.L182:
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3328              		.loc 1 1980 0
 3329 0094 1846     		mov	r0, r3
 3330 0096 1037     		adds	r7, r7, #16
 3331              	.LCFI124:
 3332              		.cfi_def_cfa_offset 8
 3333 0098 BD46     		mov	sp, r7
 3334              	.LCFI125:
 3335              		.cfi_def_cfa_register 13
 3336              		@ sp needed
 3337 009a 80BD     		pop	{r7, pc}
 3338              	.L185:
 3339              		.align	2
 3340              	.L184:
 3341 009c 00000000 		.word	SystemCoreClock
 3342 00a0 83DE1B43 		.word	1125899907
 3343              		.cfi_endproc
 3344              	.LFE85:
 3346              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 3347              		.align	2
 3348              		.global	ADC_ConversionStop_Disable
 3349              		.thumb
 3350              		.thumb_func
ARM GAS  /tmp/ccUcNrG8.s 			page 104


 3352              	ADC_ConversionStop_Disable:
 3353              	.LFB86:
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3354              		.loc 1 1990 0
 3355              		.cfi_startproc
 3356              		@ args = 0, pretend = 0, frame = 16
 3357              		@ frame_needed = 1, uses_anonymous_args = 0
 3358 0000 80B5     		push	{r7, lr}
 3359              	.LCFI126:
 3360              		.cfi_def_cfa_offset 8
 3361              		.cfi_offset 7, -8
 3362              		.cfi_offset 14, -4
 3363 0002 84B0     		sub	sp, sp, #16
 3364              	.LCFI127:
 3365              		.cfi_def_cfa_offset 24
 3366 0004 00AF     		add	r7, sp, #0
 3367              	.LCFI128:
 3368              		.cfi_def_cfa_register 7
 3369 0006 7860     		str	r0, [r7, #4]
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 3370              		.loc 1 1991 0
 3371 0008 0023     		movs	r3, #0
 3372 000a FB60     		str	r3, [r7, #12]
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3373              		.loc 1 1994 0
 3374 000c 7B68     		ldr	r3, [r7, #4]
 3375 000e 1B68     		ldr	r3, [r3]
 3376 0010 9B68     		ldr	r3, [r3, #8]
 3377 0012 03F00103 		and	r3, r3, #1
 3378 0016 002B     		cmp	r3, #0
 3379 0018 27D0     		beq	.L187
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
 3380              		.loc 1 1997 0
 3381 001a 7B68     		ldr	r3, [r7, #4]
 3382 001c 1B68     		ldr	r3, [r3]
 3383 001e 7A68     		ldr	r2, [r7, #4]
 3384 0020 1268     		ldr	r2, [r2]
 3385 0022 9268     		ldr	r2, [r2, #8]
 3386 0024 22F00102 		bic	r2, r2, #1
 3387 0028 9A60     		str	r2, [r3, #8]
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3388              		.loc 1 2000 0
ARM GAS  /tmp/ccUcNrG8.s 			page 105


 3389 002a FFF7FEFF 		bl	HAL_GetTick
 3390 002e F860     		str	r0, [r7, #12]
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
 3391              		.loc 1 2003 0
 3392 0030 14E0     		b	.L188
 3393              	.L190:
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3394              		.loc 1 2005 0
 3395 0032 FFF7FEFF 		bl	HAL_GetTick
 3396 0036 0246     		mov	r2, r0
 3397 0038 FB68     		ldr	r3, [r7, #12]
 3398 003a D31A     		subs	r3, r2, r3
 3399 003c 022B     		cmp	r3, #2
 3400 003e 0DD9     		bls	.L188
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3401              		.loc 1 2008 0
 3402 0040 7B68     		ldr	r3, [r7, #4]
 3403 0042 9B6A     		ldr	r3, [r3, #40]
 3404 0044 43F01002 		orr	r2, r3, #16
 3405 0048 7B68     		ldr	r3, [r7, #4]
 3406 004a 9A62     		str	r2, [r3, #40]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3407              		.loc 1 2011 0
 3408 004c 7B68     		ldr	r3, [r7, #4]
 3409 004e DB6A     		ldr	r3, [r3, #44]
 3410 0050 43F00102 		orr	r2, r3, #1
 3411 0054 7B68     		ldr	r3, [r7, #4]
 3412 0056 DA62     		str	r2, [r3, #44]
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
 3413              		.loc 1 2013 0
 3414 0058 0123     		movs	r3, #1
 3415 005a 07E0     		b	.L189
 3416              	.L188:
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3417              		.loc 1 2003 0
 3418 005c 7B68     		ldr	r3, [r7, #4]
 3419 005e 1B68     		ldr	r3, [r3]
 3420 0060 9B68     		ldr	r3, [r3, #8]
 3421 0062 03F00103 		and	r3, r3, #1
 3422 0066 002B     		cmp	r3, #0
 3423 0068 E3D1     		bne	.L190
 3424              	.L187:
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3425              		.loc 1 2019 0
ARM GAS  /tmp/ccUcNrG8.s 			page 106


 3426 006a 0023     		movs	r3, #0
 3427              	.L189:
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3428              		.loc 1 2020 0
 3429 006c 1846     		mov	r0, r3
 3430 006e 1037     		adds	r7, r7, #16
 3431              	.LCFI129:
 3432              		.cfi_def_cfa_offset 8
 3433 0070 BD46     		mov	sp, r7
 3434              	.LCFI130:
 3435              		.cfi_def_cfa_register 13
 3436              		@ sp needed
 3437 0072 80BD     		pop	{r7, pc}
 3438              		.cfi_endproc
 3439              	.LFE86:
 3441              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3442              		.align	2
 3443              		.global	ADC_DMAConvCplt
 3444              		.thumb
 3445              		.thumb_func
 3447              	ADC_DMAConvCplt:
 3448              	.LFB87:
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3449              		.loc 1 2028 0
 3450              		.cfi_startproc
 3451              		@ args = 0, pretend = 0, frame = 16
 3452              		@ frame_needed = 1, uses_anonymous_args = 0
 3453 0000 80B5     		push	{r7, lr}
 3454              	.LCFI131:
 3455              		.cfi_def_cfa_offset 8
 3456              		.cfi_offset 7, -8
 3457              		.cfi_offset 14, -4
 3458 0002 84B0     		sub	sp, sp, #16
 3459              	.LCFI132:
 3460              		.cfi_def_cfa_offset 24
 3461 0004 00AF     		add	r7, sp, #0
 3462              	.LCFI133:
 3463              		.cfi_def_cfa_register 7
 3464 0006 7860     		str	r0, [r7, #4]
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3465              		.loc 1 2030 0
 3466 0008 7B68     		ldr	r3, [r7, #4]
 3467 000a 5B6A     		ldr	r3, [r3, #36]
 3468 000c FB60     		str	r3, [r7, #12]
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3469              		.loc 1 2033 0
 3470 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccUcNrG8.s 			page 107


 3471 0010 9B6A     		ldr	r3, [r3, #40]
 3472 0012 03F05003 		and	r3, r3, #80
 3473 0016 002B     		cmp	r3, #0
 3474 0018 27D1     		bne	.L192
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3475              		.loc 1 2036 0
 3476 001a FB68     		ldr	r3, [r7, #12]
 3477 001c 9B6A     		ldr	r3, [r3, #40]
 3478 001e 43F40072 		orr	r2, r3, #512
 3479 0022 FB68     		ldr	r3, [r7, #12]
 3480 0024 9A62     		str	r2, [r3, #40]
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3481              		.loc 1 2043 0
 3482 0026 FB68     		ldr	r3, [r7, #12]
 3483 0028 1B68     		ldr	r3, [r3]
 3484 002a 9B68     		ldr	r3, [r3, #8]
 3485 002c 03F46023 		and	r3, r3, #917504
 3486 0030 B3F5602F 		cmp	r3, #917504
 3487 0034 15D1     		bne	.L193
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3488              		.loc 1 2044 0 discriminator 1
 3489 0036 FB68     		ldr	r3, [r7, #12]
 3490 0038 DB68     		ldr	r3, [r3, #12]
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3491              		.loc 1 2043 0 discriminator 1
 3492 003a 002B     		cmp	r3, #0
 3493 003c 11D1     		bne	.L193
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3494              		.loc 1 2047 0
 3495 003e FB68     		ldr	r3, [r7, #12]
 3496 0040 9B6A     		ldr	r3, [r3, #40]
 3497 0042 23F48072 		bic	r2, r3, #256
 3498 0046 FB68     		ldr	r3, [r7, #12]
 3499 0048 9A62     		str	r2, [r3, #40]
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3500              		.loc 1 2049 0
 3501 004a FB68     		ldr	r3, [r7, #12]
 3502 004c 9B6A     		ldr	r3, [r3, #40]
 3503 004e 03F48053 		and	r3, r3, #4096
 3504 0052 002B     		cmp	r3, #0
 3505 0054 05D1     		bne	.L193
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3506              		.loc 1 2051 0
 3507 0056 FB68     		ldr	r3, [r7, #12]
 3508 0058 9B6A     		ldr	r3, [r3, #40]
ARM GAS  /tmp/ccUcNrG8.s 			page 108


 3509 005a 43F00102 		orr	r2, r3, #1
 3510 005e FB68     		ldr	r3, [r7, #12]
 3511 0060 9A62     		str	r2, [r3, #40]
 3512              	.L193:
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 3513              		.loc 1 2056 0
 3514 0062 F868     		ldr	r0, [r7, #12]
 3515 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 3516 0068 04E0     		b	.L191
 3517              	.L192:
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 3518              		.loc 1 2061 0
 3519 006a FB68     		ldr	r3, [r7, #12]
 3520 006c 1B6A     		ldr	r3, [r3, #32]
 3521 006e 1B6B     		ldr	r3, [r3, #48]
 3522 0070 7868     		ldr	r0, [r7, #4]
 3523 0072 9847     		blx	r3
 3524              	.L191:
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3525              		.loc 1 2063 0
 3526 0074 1037     		adds	r7, r7, #16
 3527              	.LCFI134:
 3528              		.cfi_def_cfa_offset 8
 3529 0076 BD46     		mov	sp, r7
 3530              	.LCFI135:
 3531              		.cfi_def_cfa_register 13
 3532              		@ sp needed
 3533 0078 80BD     		pop	{r7, pc}
 3534              		.cfi_endproc
 3535              	.LFE87:
 3537 007a 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3538              		.align	2
 3539              		.global	ADC_DMAHalfConvCplt
 3540              		.thumb
 3541              		.thumb_func
 3543              	ADC_DMAHalfConvCplt:
 3544              	.LFB88:
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3545              		.loc 1 2071 0
 3546              		.cfi_startproc
 3547              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccUcNrG8.s 			page 109


 3548              		@ frame_needed = 1, uses_anonymous_args = 0
 3549 0000 80B5     		push	{r7, lr}
 3550              	.LCFI136:
 3551              		.cfi_def_cfa_offset 8
 3552              		.cfi_offset 7, -8
 3553              		.cfi_offset 14, -4
 3554 0002 84B0     		sub	sp, sp, #16
 3555              	.LCFI137:
 3556              		.cfi_def_cfa_offset 24
 3557 0004 00AF     		add	r7, sp, #0
 3558              	.LCFI138:
 3559              		.cfi_def_cfa_register 7
 3560 0006 7860     		str	r0, [r7, #4]
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3561              		.loc 1 2073 0
 3562 0008 7B68     		ldr	r3, [r7, #4]
 3563 000a 5B6A     		ldr	r3, [r3, #36]
 3564 000c FB60     		str	r3, [r7, #12]
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 3565              		.loc 1 2076 0
 3566 000e F868     		ldr	r0, [r7, #12]
 3567 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3568              		.loc 1 2077 0
 3569 0014 1037     		adds	r7, r7, #16
 3570              	.LCFI139:
 3571              		.cfi_def_cfa_offset 8
 3572 0016 BD46     		mov	sp, r7
 3573              	.LCFI140:
 3574              		.cfi_def_cfa_register 13
 3575              		@ sp needed
 3576 0018 80BD     		pop	{r7, pc}
 3577              		.cfi_endproc
 3578              	.LFE88:
 3580 001a 00BF     		.section	.text.ADC_DMAError,"ax",%progbits
 3581              		.align	2
 3582              		.global	ADC_DMAError
 3583              		.thumb
 3584              		.thumb_func
 3586              	ADC_DMAError:
 3587              	.LFB89:
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3588              		.loc 1 2085 0
 3589              		.cfi_startproc
 3590              		@ args = 0, pretend = 0, frame = 16
 3591              		@ frame_needed = 1, uses_anonymous_args = 0
 3592 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccUcNrG8.s 			page 110


 3593              	.LCFI141:
 3594              		.cfi_def_cfa_offset 8
 3595              		.cfi_offset 7, -8
 3596              		.cfi_offset 14, -4
 3597 0002 84B0     		sub	sp, sp, #16
 3598              	.LCFI142:
 3599              		.cfi_def_cfa_offset 24
 3600 0004 00AF     		add	r7, sp, #0
 3601              	.LCFI143:
 3602              		.cfi_def_cfa_register 7
 3603 0006 7860     		str	r0, [r7, #4]
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3604              		.loc 1 2087 0
 3605 0008 7B68     		ldr	r3, [r7, #4]
 3606 000a 5B6A     		ldr	r3, [r3, #36]
 3607 000c FB60     		str	r3, [r7, #12]
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3608              		.loc 1 2090 0
 3609 000e FB68     		ldr	r3, [r7, #12]
 3610 0010 9B6A     		ldr	r3, [r3, #40]
 3611 0012 43F04002 		orr	r2, r3, #64
 3612 0016 FB68     		ldr	r3, [r7, #12]
 3613 0018 9A62     		str	r2, [r3, #40]
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3614              		.loc 1 2093 0
 3615 001a FB68     		ldr	r3, [r7, #12]
 3616 001c DB6A     		ldr	r3, [r3, #44]
 3617 001e 43F00402 		orr	r2, r3, #4
 3618 0022 FB68     		ldr	r3, [r7, #12]
 3619 0024 DA62     		str	r2, [r3, #44]
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 3620              		.loc 1 2096 0
 3621 0026 F868     		ldr	r0, [r7, #12]
 3622 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3623              		.loc 1 2097 0
 3624 002c 1037     		adds	r7, r7, #16
 3625              	.LCFI144:
 3626              		.cfi_def_cfa_offset 8
 3627 002e BD46     		mov	sp, r7
 3628              	.LCFI145:
 3629              		.cfi_def_cfa_register 13
 3630              		@ sp needed
 3631 0030 80BD     		pop	{r7, pc}
 3632              		.cfi_endproc
 3633              	.LFE89:
 3635 0032 00BF     		.text
 3636              	.Letext0:
 3637              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 3638              		.file 4 "/usr/include/newlib/stdint.h"
ARM GAS  /tmp/ccUcNrG8.s 			page 111


 3639              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 3640              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3641              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3642              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3643              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 3644              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 3645              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/ccUcNrG8.s 			page 112


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc.c
     /tmp/ccUcNrG8.s:19     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccUcNrG8.s:24     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccUcNrG8.s:591    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccUcNrG8.s:3352   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/ccUcNrG8.s:350    .text.HAL_ADC_Init:00000000000001f4 $d
     /tmp/ccUcNrG8.s:356    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccUcNrG8.s:361    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccUcNrG8.s:631    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccUcNrG8.s:580    .text.HAL_ADC_DeInit:000000000000017c $d
     /tmp/ccUcNrG8.s:586    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccUcNrG8.s:626    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccUcNrG8.s:666    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccUcNrG8.s:671    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccUcNrG8.s:3226   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccUcNrG8.s:884    .text.HAL_ADC_Start:0000000000000158 $d
     /tmp/ccUcNrG8.s:890    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccUcNrG8.s:895    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccUcNrG8.s:968    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccUcNrG8.s:973    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccUcNrG8.s:1280   .text.HAL_ADC_PollForConversion:00000000000001dc $d
     /tmp/ccUcNrG8.s:1290   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccUcNrG8.s:1295   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccUcNrG8.s:1392   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccUcNrG8.s:1397   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccUcNrG8.s:1618   .text.HAL_ADC_Start_IT:0000000000000168 $d
     /tmp/ccUcNrG8.s:1624   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccUcNrG8.s:1629   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccUcNrG8.s:1710   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccUcNrG8.s:1715   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccUcNrG8.s:1978   .text.HAL_ADC_Start_DMA:00000000000001ac $d
     /tmp/ccUcNrG8.s:3447   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccUcNrG8.s:3543   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccUcNrG8.s:3586   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccUcNrG8.s:1987   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccUcNrG8.s:1992   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccUcNrG8.s:2092   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccUcNrG8.s:2097   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccUcNrG8.s:2137   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccUcNrG8.s:2142   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccUcNrG8.s:2376   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccUcNrG8.s:2456   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccUcNrG8.s:2371   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccUcNrG8.s:2411   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccUcNrG8.s:2416   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccUcNrG8.s:2451   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccUcNrG8.s:2491   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccUcNrG8.s:2496   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccUcNrG8.s:2531   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccUcNrG8.s:2536   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccUcNrG8.s:2994   .text.HAL_ADC_ConfigChannel:00000000000002a0 $d
     /tmp/ccUcNrG8.s:3001   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccUcNrG8.s:3006   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccUcNrG8.s:3126   .text.HAL_ADC_AnalogWDGConfig:00000000000000a4 $d
     /tmp/ccUcNrG8.s:3133   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccUcNrG8.s:3138   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
ARM GAS  /tmp/ccUcNrG8.s 			page 113


     /tmp/ccUcNrG8.s:3177   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccUcNrG8.s:3182   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccUcNrG8.s:3221   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccUcNrG8.s:3341   .text.ADC_Enable:000000000000009c $d
     /tmp/ccUcNrG8.s:3347   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/ccUcNrG8.s:3442   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccUcNrG8.s:3538   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccUcNrG8.s:3581   .text.ADC_DMAError:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
