ARM GAS  /tmp/ccZpuGm0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_adc_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
  19              		.align	2
  20              		.global	HAL_ADCEx_Calibration_Start
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADCEx_Calibration_Start:
  25              	.LFB63:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @file    stm32f1xx_hal_adc_ex.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @version V1.0.4
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @date    29-April-2016
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          peripheral:
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Operation functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Multimode feature (available on devices with 2 ADCs or more)
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Control functions
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          "stm32f1xx_hal_adc.c".
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @verbatim
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..] 
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       available in file of generic functions "stm32f1xx_hal_adc.c".
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..]
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @endverbatim
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @attention
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
ARM GAS  /tmp/ccZpuGm0.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      without specific prior written permission.
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************  
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #include "stm32f1xx_hal.h"
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief ADC Extension HAL module driver
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for ADC calibration:                                               */
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Hardware prerequisite before starting a calibration: the ADC must have   */
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* been in power-on state for at least two ADC clock cycles.                */
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ADC clock cycles                                                   */
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES       ((uint32_t) 2)
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Timeout value for ADC calibration                                        */
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Value defined to be higher than worst cases: low clocks freq,            */
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT         ((uint32_t) 10)
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccZpuGm0.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Extended IO operation functions
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *  @brief    Extended Extended Input and Output operation functions
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim    
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       ##### IO operation functions #####
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         During calibration process, ADC is enabled. ADC is let enabled at
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the completion of this function.
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
  27              		.loc 1 145 0
ARM GAS  /tmp/ccZpuGm0.s 			page 4


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 90B5     		push	{r4, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 40
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  44              		.loc 1 146 0
  45 0008 0023     		movs	r3, #0
  46 000a FB75     		strb	r3, [r7, #23]
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
  47              		.loc 1 148 0
  48 000c 0023     		movs	r3, #0
  49 000e FB60     		str	r3, [r7, #12]
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  50              		.loc 1 154 0
  51 0010 7B68     		ldr	r3, [r7, #4]
  52 0012 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
  53 0016 012B     		cmp	r3, #1
  54 0018 01D1     		bne	.L2
  55              		.loc 1 154 0 is_stmt 0 discriminator 1
  56 001a 0223     		movs	r3, #2
  57 001c 86E0     		b	.L3
  58              	.L2:
  59              		.loc 1 154 0 discriminator 2
  60 001e 7B68     		ldr	r3, [r7, #4]
  61 0020 0122     		movs	r2, #1
  62 0022 83F82420 		strb	r2, [r3, #36]
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* 1. Calibration prerequisite:                                             */
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*      mode before ADC enable                                              */
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups       */
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  63              		.loc 1 161 0 is_stmt 1 discriminator 2
  64 0026 7868     		ldr	r0, [r7, #4]
  65 0028 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  66 002c 0346     		mov	r3, r0
  67 002e FB75     		strb	r3, [r7, #23]
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /tmp/ccZpuGm0.s 			page 5


 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
  68              		.loc 1 164 0 discriminator 2
  69 0030 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  70 0032 002B     		cmp	r3, #0
  71 0034 75D1     		bne	.L4
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
  72              		.loc 1 167 0
  73 0036 7B68     		ldr	r3, [r7, #4]
  74 0038 9B6A     		ldr	r3, [r3, #40]
  75 003a 23F48853 		bic	r3, r3, #4352
  76 003e 23F00203 		bic	r3, r3, #2
  77 0042 43F00202 		orr	r2, r3, #2
  78 0046 7B68     		ldr	r3, [r7, #4]
  79 0048 9A62     		str	r2, [r3, #40]
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Hardware prerequisite: delay before starting the calibration.          */
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay */
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     wait_loop_index = ((SystemCoreClock
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  80              		.loc 1 175 0
  81 004a 3A4B     		ldr	r3, .L11
  82 004c 1C68     		ldr	r4, [r3]
  83 004e 0220     		movs	r0, #2
  84 0050 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
  85 0054 0346     		mov	r3, r0
  86 0056 B4FBF3F3 		udiv	r3, r4, r3
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                        * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
  87              		.loc 1 176 0
  88 005a 5B00     		lsls	r3, r3, #1
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  89              		.loc 1 174 0
  90 005c FB60     		str	r3, [r7, #12]
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(wait_loop_index != 0)
  91              		.loc 1 178 0
  92 005e 02E0     		b	.L5
  93              	.L6:
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       wait_loop_index--;
  94              		.loc 1 180 0
  95 0060 FB68     		ldr	r3, [r7, #12]
  96 0062 013B     		subs	r3, r3, #1
  97 0064 FB60     		str	r3, [r7, #12]
  98              	.L5:
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
  99              		.loc 1 178 0
 100 0066 FB68     		ldr	r3, [r7, #12]
 101 0068 002B     		cmp	r3, #0
 102 006a F9D1     		bne	.L6
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
ARM GAS  /tmp/ccZpuGm0.s 			page 6


 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 2. Enable the ADC peripheral */
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_Enable(hadc);
 103              		.loc 1 184 0
 104 006c 7868     		ldr	r0, [r7, #4]
 105 006e FFF7FEFF 		bl	ADC_Enable
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 3. Resets ADC calibration registers */  
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 106              		.loc 1 187 0
 107 0072 7B68     		ldr	r3, [r7, #4]
 108 0074 1B68     		ldr	r3, [r3]
 109 0076 7A68     		ldr	r2, [r7, #4]
 110 0078 1268     		ldr	r2, [r2]
 111 007a 9268     		ldr	r2, [r2, #8]
 112 007c 42F00802 		orr	r2, r2, #8
 113 0080 9A60     		str	r2, [r3, #8]
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 114              		.loc 1 189 0
 115 0082 FFF7FEFF 		bl	HAL_GetTick
 116 0086 3861     		str	r0, [r7, #16]
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration reset completion */
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 117              		.loc 1 192 0
 118 0088 14E0     		b	.L7
 119              	.L8:
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 120              		.loc 1 194 0
 121 008a FFF7FEFF 		bl	HAL_GetTick
 122 008e 0246     		mov	r2, r0
 123 0090 3B69     		ldr	r3, [r7, #16]
 124 0092 D31A     		subs	r3, r2, r3
 125 0094 0A2B     		cmp	r3, #10
 126 0096 0DD9     		bls	.L7
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 127              		.loc 1 197 0
 128 0098 7B68     		ldr	r3, [r7, #4]
 129 009a 9B6A     		ldr	r3, [r3, #40]
 130 009c 23F01203 		bic	r3, r3, #18
 131 00a0 43F01002 		orr	r2, r3, #16
 132 00a4 7B68     		ldr	r3, [r7, #4]
 133 00a6 9A62     		str	r2, [r3, #40]
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 134              		.loc 1 202 0
 135 00a8 7B68     		ldr	r3, [r7, #4]
 136 00aa 0022     		movs	r2, #0
 137 00ac 83F82420 		strb	r2, [r3, #36]
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccZpuGm0.s 			page 7


 138              		.loc 1 204 0
 139 00b0 0123     		movs	r3, #1
 140 00b2 3BE0     		b	.L3
 141              	.L7:
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 142              		.loc 1 192 0
 143 00b4 7B68     		ldr	r3, [r7, #4]
 144 00b6 1B68     		ldr	r3, [r3]
 145 00b8 9B68     		ldr	r3, [r3, #8]
 146 00ba 03F00803 		and	r3, r3, #8
 147 00be 002B     		cmp	r3, #0
 148 00c0 E3D1     		bne	.L8
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 4. Start ADC calibration */
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 149              		.loc 1 210 0
 150 00c2 7B68     		ldr	r3, [r7, #4]
 151 00c4 1B68     		ldr	r3, [r3]
 152 00c6 7A68     		ldr	r2, [r7, #4]
 153 00c8 1268     		ldr	r2, [r2]
 154 00ca 9268     		ldr	r2, [r2, #8]
 155 00cc 42F00402 		orr	r2, r2, #4
 156 00d0 9A60     		str	r2, [r3, #8]
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 157              		.loc 1 212 0
 158 00d2 FFF7FEFF 		bl	HAL_GetTick
 159 00d6 3861     		str	r0, [r7, #16]
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 160              		.loc 1 215 0
 161 00d8 14E0     		b	.L9
 162              	.L10:
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 163              		.loc 1 217 0
 164 00da FFF7FEFF 		bl	HAL_GetTick
 165 00de 0246     		mov	r2, r0
 166 00e0 3B69     		ldr	r3, [r7, #16]
 167 00e2 D31A     		subs	r3, r2, r3
 168 00e4 0A2B     		cmp	r3, #10
 169 00e6 0DD9     		bls	.L9
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 170              		.loc 1 220 0
 171 00e8 7B68     		ldr	r3, [r7, #4]
 172 00ea 9B6A     		ldr	r3, [r3, #40]
 173 00ec 23F01203 		bic	r3, r3, #18
 174 00f0 43F01002 		orr	r2, r3, #16
 175 00f4 7B68     		ldr	r3, [r7, #4]
 176 00f6 9A62     		str	r2, [r3, #40]
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
ARM GAS  /tmp/ccZpuGm0.s 			page 8


 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 177              		.loc 1 225 0
 178 00f8 7B68     		ldr	r3, [r7, #4]
 179 00fa 0022     		movs	r2, #0
 180 00fc 83F82420 		strb	r2, [r3, #36]
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 181              		.loc 1 227 0
 182 0100 0123     		movs	r3, #1
 183 0102 13E0     		b	.L3
 184              	.L9:
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 185              		.loc 1 215 0
 186 0104 7B68     		ldr	r3, [r7, #4]
 187 0106 1B68     		ldr	r3, [r3]
 188 0108 9B68     		ldr	r3, [r3, #8]
 189 010a 03F00403 		and	r3, r3, #4
 190 010e 002B     		cmp	r3, #0
 191 0110 E3D1     		bne	.L10
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 192              		.loc 1 232 0
 193 0112 7B68     		ldr	r3, [r7, #4]
 194 0114 9B6A     		ldr	r3, [r3, #40]
 195 0116 23F00303 		bic	r3, r3, #3
 196 011a 43F00102 		orr	r2, r3, #1
 197 011e 7B68     		ldr	r3, [r7, #4]
 198 0120 9A62     		str	r2, [r3, #40]
 199              	.L4:
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 200              		.loc 1 238 0
 201 0122 7B68     		ldr	r3, [r7, #4]
 202 0124 0022     		movs	r2, #0
 203 0126 83F82420 		strb	r2, [r3, #36]
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 204              		.loc 1 241 0
 205 012a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 206              	.L3:
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 207              		.loc 1 242 0
 208 012c 1846     		mov	r0, r3
 209 012e 1C37     		adds	r7, r7, #28
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccZpuGm0.s 			page 9


 212 0130 BD46     		mov	sp, r7
 213              	.LCFI4:
 214              		.cfi_def_cfa_register 13
 215              		@ sp needed
 216 0132 90BD     		pop	{r4, r7, pc}
 217              	.L12:
 218              		.align	2
 219              	.L11:
 220 0134 00000000 		.word	SystemCoreClock
 221              		.cfi_endproc
 222              	.LFE63:
 224              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 225              		.align	2
 226              		.global	HAL_ADCEx_InjectedStart
 227              		.thumb
 228              		.thumb_func
 230              	HAL_ADCEx_InjectedStart:
 231              	.LFB64:
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 232              		.loc 1 251 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 16
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 80B5     		push	{r7, lr}
 237              	.LCFI5:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 84B0     		sub	sp, sp, #16
 242              	.LCFI6:
 243              		.cfi_def_cfa_offset 24
 244 0004 00AF     		add	r7, sp, #0
 245              	.LCFI7:
 246              		.cfi_def_cfa_register 7
 247 0006 7860     		str	r0, [r7, #4]
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 248              		.loc 1 252 0
 249 0008 0023     		movs	r3, #0
 250 000a FB73     		strb	r3, [r7, #15]
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 251              		.loc 1 258 0
 252 000c 7B68     		ldr	r3, [r7, #4]
 253 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 254 0012 012B     		cmp	r3, #1
ARM GAS  /tmp/ccZpuGm0.s 			page 10


 255 0014 01D1     		bne	.L14
 256              		.loc 1 258 0 is_stmt 0 discriminator 1
 257 0016 0223     		movs	r3, #2
 258 0018 70E0     		b	.L15
 259              	.L14:
 260              		.loc 1 258 0 discriminator 2
 261 001a 7B68     		ldr	r3, [r7, #4]
 262 001c 0122     		movs	r2, #1
 263 001e 83F82420 		strb	r2, [r3, #36]
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 264              		.loc 1 261 0 is_stmt 1 discriminator 2
 265 0022 7868     		ldr	r0, [r7, #4]
 266 0024 FFF7FEFF 		bl	ADC_Enable
 267 0028 0346     		mov	r3, r0
 268 002a FB73     		strb	r3, [r7, #15]
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 269              		.loc 1 264 0 discriminator 2
 270 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 271 002e 002B     		cmp	r3, #0
 272 0030 5FD1     		bne	.L16
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 273              		.loc 1 269 0
 274 0032 7B68     		ldr	r3, [r7, #4]
 275 0034 9B6A     		ldr	r3, [r3, #40]
 276 0036 23F44053 		bic	r3, r3, #12288
 277 003a 23F00103 		bic	r3, r3, #1
 278 003e 43F48052 		orr	r2, r3, #4096
 279 0042 7B68     		ldr	r3, [r7, #4]
 280 0044 9A62     		str	r2, [r3, #40]
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 281              		.loc 1 275 0
 282 0046 7B68     		ldr	r3, [r7, #4]
 283 0048 1B68     		ldr	r3, [r3]
 284 004a 2E4A     		ldr	r2, .L25
 285 004c 9342     		cmp	r3, r2
 286 004e 05D1     		bne	.L17
 287              		.loc 1 275 0 is_stmt 0 discriminator 1
 288 0050 2D4B     		ldr	r3, .L25+4
 289 0052 5B68     		ldr	r3, [r3, #4]
 290 0054 03F47023 		and	r3, r3, #983040
 291 0058 002B     		cmp	r3, #0
 292 005a 06D1     		bne	.L18
 293              	.L17:
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/ccZpuGm0.s 			page 11


 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 294              		.loc 1 277 0 is_stmt 1
 295 005c 7B68     		ldr	r3, [r7, #4]
 296 005e 9B6A     		ldr	r3, [r3, #40]
 297 0060 23F48012 		bic	r2, r3, #1048576
 298 0064 7B68     		ldr	r3, [r7, #4]
 299 0066 9A62     		str	r2, [r3, #40]
 300 0068 05E0     		b	.L19
 301              	.L18:
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 302              		.loc 1 281 0
 303 006a 7B68     		ldr	r3, [r7, #4]
 304 006c 9B6A     		ldr	r3, [r3, #40]
 305 006e 43F48012 		orr	r2, r3, #1048576
 306 0072 7B68     		ldr	r3, [r7, #4]
 307 0074 9A62     		str	r2, [r3, #40]
 308              	.L19:
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 309              		.loc 1 288 0
 310 0076 7B68     		ldr	r3, [r7, #4]
 311 0078 9B6A     		ldr	r3, [r3, #40]
 312 007a 03F48073 		and	r3, r3, #256
 313 007e 002B     		cmp	r3, #0
 314 0080 02D1     		bne	.L20
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 315              		.loc 1 291 0
 316 0082 7B68     		ldr	r3, [r7, #4]
 317 0084 0022     		movs	r2, #0
 318 0086 DA62     		str	r2, [r3, #44]
 319              	.L20:
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 320              		.loc 1 297 0
 321 0088 7B68     		ldr	r3, [r7, #4]
 322 008a 0022     		movs	r2, #0
 323 008c 83F82420 		strb	r2, [r3, #36]
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 324              		.loc 1 301 0
 325 0090 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZpuGm0.s 			page 12


 326 0092 1B68     		ldr	r3, [r3]
 327 0094 6FF00402 		mvn	r2, #4
 328 0098 1A60     		str	r2, [r3]
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* slave, ADC is enabled only (conversion is not started). If ADC is      */
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* master, ADC is enabled and conversion is started.                      */
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 329              		.loc 1 312 0
 330 009a 7B68     		ldr	r3, [r7, #4]
 331 009c 1B68     		ldr	r3, [r3]
 332 009e 5B68     		ldr	r3, [r3, #4]
 333 00a0 03F48063 		and	r3, r3, #1024
 334 00a4 002B     		cmp	r3, #0
 335 00a6 28D1     		bne	.L24
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 336              		.loc 1 314 0
 337 00a8 7B68     		ldr	r3, [r7, #4]
 338 00aa 1B68     		ldr	r3, [r3]
 339 00ac 9B68     		ldr	r3, [r3, #8]
 340 00ae 03F4E043 		and	r3, r3, #28672
 341 00b2 B3F5E04F 		cmp	r3, #28672
 342 00b6 13D1     		bne	.L22
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 343              		.loc 1 315 0 discriminator 1
 344 00b8 7B68     		ldr	r3, [r7, #4]
 345 00ba 1B68     		ldr	r3, [r3]
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 346              		.loc 1 314 0 discriminator 1
 347 00bc 114A     		ldr	r2, .L25
 348 00be 9342     		cmp	r3, r2
 349 00c0 05D1     		bne	.L23
 350              		.loc 1 315 0 discriminator 2
 351 00c2 114B     		ldr	r3, .L25+4
 352 00c4 5B68     		ldr	r3, [r3, #4]
 353 00c6 03F47023 		and	r3, r3, #983040
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 354              		.loc 1 314 0 discriminator 2
 355 00ca 002B     		cmp	r3, #0
 356 00cc 08D1     		bne	.L22
 357              	.L23:
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 358              		.loc 1 318 0
 359 00ce 7B68     		ldr	r3, [r7, #4]
 360 00d0 1B68     		ldr	r3, [r3]
 361 00d2 7A68     		ldr	r2, [r7, #4]
 362 00d4 1268     		ldr	r2, [r2]
 363 00d6 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccZpuGm0.s 			page 13


 364 00d8 42F40212 		orr	r2, r2, #2129920
 365 00dc 9A60     		str	r2, [r3, #8]
 366 00de 0CE0     		b	.L24
 367              	.L22:
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 368              		.loc 1 323 0
 369 00e0 7B68     		ldr	r3, [r7, #4]
 370 00e2 1B68     		ldr	r3, [r3]
 371 00e4 7A68     		ldr	r2, [r7, #4]
 372 00e6 1268     		ldr	r2, [r2]
 373 00e8 9268     		ldr	r2, [r2, #8]
 374 00ea 42F40042 		orr	r2, r2, #32768
 375 00ee 9A60     		str	r2, [r3, #8]
 376 00f0 03E0     		b	.L24
 377              	.L16:
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 378              		.loc 1 330 0
 379 00f2 7B68     		ldr	r3, [r7, #4]
 380 00f4 0022     		movs	r2, #0
 381 00f6 83F82420 		strb	r2, [r3, #36]
 382              	.L24:
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 383              		.loc 1 334 0
 384 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 385              	.L15:
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 386              		.loc 1 335 0
 387 00fc 1846     		mov	r0, r3
 388 00fe 1037     		adds	r7, r7, #16
 389              	.LCFI8:
 390              		.cfi_def_cfa_offset 8
 391 0100 BD46     		mov	sp, r7
 392              	.LCFI9:
 393              		.cfi_def_cfa_register 13
 394              		@ sp needed
 395 0102 80BD     		pop	{r7, pc}
 396              	.L26:
 397              		.align	2
 398              	.L25:
 399 0104 00280140 		.word	1073817600
 400 0108 00240140 		.word	1073816576
 401              		.cfi_endproc
 402              	.LFE64:
 404              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
ARM GAS  /tmp/ccZpuGm0.s 			page 14


 405              		.align	2
 406              		.global	HAL_ADCEx_InjectedStop
 407              		.thumb
 408              		.thumb_func
 410              	HAL_ADCEx_InjectedStop:
 411              	.LFB65:
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 412              		.loc 1 350 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 16
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              	.LCFI10:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 84B0     		sub	sp, sp, #16
 422              	.LCFI11:
 423              		.cfi_def_cfa_offset 24
 424 0004 00AF     		add	r7, sp, #0
 425              	.LCFI12:
 426              		.cfi_def_cfa_register 7
 427 0006 7860     		str	r0, [r7, #4]
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 428              		.loc 1 351 0
 429 0008 0023     		movs	r3, #0
 430 000a FB73     		strb	r3, [r7, #15]
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 431              		.loc 1 357 0
 432 000c 7B68     		ldr	r3, [r7, #4]
 433 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 434 0012 012B     		cmp	r3, #1
 435 0014 01D1     		bne	.L28
 436              		.loc 1 357 0 is_stmt 0 discriminator 1
 437 0016 0223     		movs	r3, #2
 438 0018 31E0     		b	.L29
 439              	.L28:
 440              		.loc 1 357 0 discriminator 2
ARM GAS  /tmp/ccZpuGm0.s 			page 15


 441 001a 7B68     		ldr	r3, [r7, #4]
 442 001c 0122     		movs	r2, #1
 443 001e 83F82420 		strb	r2, [r3, #36]
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 444              		.loc 1 365 0 is_stmt 1 discriminator 2
 445 0022 7B68     		ldr	r3, [r7, #4]
 446 0024 9B6A     		ldr	r3, [r3, #40]
 447 0026 03F48073 		and	r3, r3, #256
 448 002a 002B     		cmp	r3, #0
 449 002c 1AD1     		bne	.L30
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 450              		.loc 1 366 0 discriminator 1
 451 002e 7B68     		ldr	r3, [r7, #4]
 452 0030 1B68     		ldr	r3, [r3]
 453 0032 5B68     		ldr	r3, [r3, #4]
 454 0034 03F48063 		and	r3, r3, #1024
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 455              		.loc 1 365 0 discriminator 1
 456 0038 002B     		cmp	r3, #0
 457 003a 13D1     		bne	.L30
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 458              		.loc 1 370 0
 459 003c 7868     		ldr	r0, [r7, #4]
 460 003e FFF7FEFF 		bl	ADC_ConversionStop_Disable
 461 0042 0346     		mov	r3, r0
 462 0044 FB73     		strb	r3, [r7, #15]
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 463              		.loc 1 373 0
 464 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 465 0048 002B     		cmp	r3, #0
 466 004a 0AD1     		bne	.L31
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 467              		.loc 1 376 0
 468 004c 7B68     		ldr	r3, [r7, #4]
 469 004e 9B6A     		ldr	r3, [r3, #40]
 470 0050 23F48853 		bic	r3, r3, #4352
 471 0054 23F00103 		bic	r3, r3, #1
 472 0058 43F00102 		orr	r2, r3, #1
 473 005c 7B68     		ldr	r3, [r7, #4]
 474 005e 9A62     		str	r2, [r3, #40]
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 475              		.loc 1 373 0
 476 0060 08E0     		b	.L32
ARM GAS  /tmp/ccZpuGm0.s 			page 16


 477              	.L31:
 478 0062 07E0     		b	.L32
 479              	.L30:
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 480              		.loc 1 384 0
 481 0064 7B68     		ldr	r3, [r7, #4]
 482 0066 9B6A     		ldr	r3, [r3, #40]
 483 0068 43F02002 		orr	r2, r3, #32
 484 006c 7B68     		ldr	r3, [r7, #4]
 485 006e 9A62     		str	r2, [r3, #40]
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 486              		.loc 1 386 0
 487 0070 0123     		movs	r3, #1
 488 0072 FB73     		strb	r3, [r7, #15]
 489              	.L32:
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 490              		.loc 1 390 0
 491 0074 7B68     		ldr	r3, [r7, #4]
 492 0076 0022     		movs	r2, #0
 493 0078 83F82420 		strb	r2, [r3, #36]
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 494              		.loc 1 393 0
 495 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 496              	.L29:
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 497              		.loc 1 394 0
 498 007e 1846     		mov	r0, r3
 499 0080 1037     		adds	r7, r7, #16
 500              	.LCFI13:
 501              		.cfi_def_cfa_offset 8
 502 0082 BD46     		mov	sp, r7
 503              	.LCFI14:
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 0084 80BD     		pop	{r7, pc}
 507              		.cfi_endproc
 508              	.LFE65:
 510 0086 00BF     		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 511              		.align	2
 512              		.global	HAL_ADCEx_InjectedPollForConversion
 513              		.thumb
 514              		.thumb_func
 516              	HAL_ADCEx_InjectedPollForConversion:
 517              	.LFB66:
ARM GAS  /tmp/ccZpuGm0.s 			page 17


 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 518              		.loc 1 403 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 24
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 90B5     		push	{r4, r7, lr}
 523              	.LCFI15:
 524              		.cfi_def_cfa_offset 12
 525              		.cfi_offset 4, -12
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 87B0     		sub	sp, sp, #28
 529              	.LCFI16:
 530              		.cfi_def_cfa_offset 40
 531 0004 00AF     		add	r7, sp, #0
 532              	.LCFI17:
 533              		.cfi_def_cfa_register 7
 534 0006 7860     		str	r0, [r7, #4]
 535 0008 3960     		str	r1, [r7]
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 536              		.loc 1 408 0
 537 000a 0023     		movs	r3, #0
 538 000c FB60     		str	r3, [r7, #12]
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 539              		.loc 1 409 0
 540 000e 0023     		movs	r3, #0
 541 0010 7B61     		str	r3, [r7, #20]
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get timeout */
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 542              		.loc 1 415 0
 543 0012 FFF7FEFF 		bl	HAL_GetTick
 544 0016 3861     		str	r0, [r7, #16]
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
ARM GAS  /tmp/ccZpuGm0.s 			page 18


 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    sequence.                                                             */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    As flag JEOC is not set after each conversion, no timeout status can  */
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    be set.                                                               */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 545              		.loc 1 433 0
 546 0018 7B68     		ldr	r3, [r7, #4]
 547 001a 1B68     		ldr	r3, [r3]
 548 001c 9B6B     		ldr	r3, [r3, #56]
 549 001e 03F44013 		and	r3, r3, #3145728
 550 0022 002B     		cmp	r3, #0
 551 0024 23D1     		bne	.L34
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 552              		.loc 1 436 0
 553 0026 1AE0     		b	.L35
 554              	.L38:
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 555              		.loc 1 439 0
 556 0028 3B68     		ldr	r3, [r7]
 557 002a B3F1FF3F 		cmp	r3, #-1
 558 002e 16D0     		beq	.L35
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 559              		.loc 1 441 0
 560 0030 3B68     		ldr	r3, [r7]
 561 0032 002B     		cmp	r3, #0
 562 0034 07D0     		beq	.L36
 563              		.loc 1 441 0 is_stmt 0 discriminator 1
 564 0036 FFF7FEFF 		bl	HAL_GetTick
 565 003a 0246     		mov	r2, r0
 566 003c 3B69     		ldr	r3, [r7, #16]
 567 003e D21A     		subs	r2, r2, r3
 568 0040 3B68     		ldr	r3, [r7]
 569 0042 9A42     		cmp	r2, r3
 570 0044 0BD9     		bls	.L35
 571              	.L36:
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 572              		.loc 1 444 0 is_stmt 1
 573 0046 7B68     		ldr	r3, [r7, #4]
 574 0048 9B6A     		ldr	r3, [r3, #40]
 575 004a 43F00402 		orr	r2, r3, #4
 576 004e 7B68     		ldr	r3, [r7, #4]
 577 0050 9A62     		str	r2, [r3, #40]
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 578              		.loc 1 447 0
ARM GAS  /tmp/ccZpuGm0.s 			page 19


 579 0052 7B68     		ldr	r3, [r7, #4]
 580 0054 0022     		movs	r2, #0
 581 0056 83F82420 		strb	r2, [r3, #36]
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 582              		.loc 1 449 0
 583 005a 0323     		movs	r3, #3
 584 005c ADE0     		b	.L37
 585              	.L35:
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 586              		.loc 1 436 0
 587 005e 7B68     		ldr	r3, [r7, #4]
 588 0060 1B68     		ldr	r3, [r3]
 589 0062 1B68     		ldr	r3, [r3]
 590 0064 03F00403 		and	r3, r3, #4
 591 0068 002B     		cmp	r3, #0
 592 006a DDD0     		beq	.L38
 593 006c 6CE0     		b	.L39
 594              	.L34:
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 595              		.loc 1 461 0
 596 006e 554B     		ldr	r3, .L54
 597 0070 1C68     		ldr	r4, [r3]
 598 0072 0220     		movs	r0, #2
 599 0074 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 600 0078 0346     		mov	r3, r0
 601 007a B4FBF3F2 		udiv	r2, r4, r3
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 602              		.loc 1 462 0
 603 007e 7B68     		ldr	r3, [r7, #4]
 604 0080 1B68     		ldr	r3, [r3]
 605 0082 1969     		ldr	r1, [r3, #16]
 606 0084 504B     		ldr	r3, .L54+4
 607 0086 0B40     		ands	r3, r3, r1
 608 0088 002B     		cmp	r3, #0
 609 008a 18D1     		bne	.L40
 610              		.loc 1 462 0 is_stmt 0 discriminator 1
 611 008c 7B68     		ldr	r3, [r7, #4]
 612 008e 1B68     		ldr	r3, [r3]
 613 0090 D968     		ldr	r1, [r3, #12]
 614 0092 4E4B     		ldr	r3, .L54+8
 615 0094 0B40     		ands	r3, r3, r1
 616 0096 002B     		cmp	r3, #0
 617 0098 11D1     		bne	.L40
 618              		.loc 1 462 0 discriminator 3
 619 009a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZpuGm0.s 			page 20


 620 009c 1B68     		ldr	r3, [r3]
 621 009e 1969     		ldr	r1, [r3, #16]
 622 00a0 4B4B     		ldr	r3, .L54+12
 623 00a2 0B40     		ands	r3, r3, r1
 624 00a4 002B     		cmp	r3, #0
 625 00a6 08D1     		bne	.L41
 626              		.loc 1 462 0 discriminator 5
 627 00a8 7B68     		ldr	r3, [r7, #4]
 628 00aa 1B68     		ldr	r3, [r3]
 629 00ac D968     		ldr	r1, [r3, #12]
 630 00ae 494B     		ldr	r3, .L54+16
 631 00b0 0B40     		ands	r3, r3, r1
 632 00b2 002B     		cmp	r3, #0
 633 00b4 01D1     		bne	.L41
 634              		.loc 1 462 0 discriminator 7
 635 00b6 1423     		movs	r3, #20
 636 00b8 20E0     		b	.L43
 637              	.L41:
 638              		.loc 1 462 0 discriminator 8
 639 00ba 2923     		movs	r3, #41
 640 00bc 1EE0     		b	.L43
 641              	.L40:
 642              		.loc 1 462 0 discriminator 4
 643 00be 7B68     		ldr	r3, [r7, #4]
 644 00c0 1B68     		ldr	r3, [r3]
 645 00c2 1969     		ldr	r1, [r3, #16]
 646 00c4 424B     		ldr	r3, .L54+12
 647 00c6 0B40     		ands	r3, r3, r1
 648 00c8 002B     		cmp	r3, #0
 649 00ca 06D1     		bne	.L44
 650              		.loc 1 462 0 discriminator 11
 651 00cc 7B68     		ldr	r3, [r7, #4]
 652 00ce 1B68     		ldr	r3, [r3]
 653 00d0 D968     		ldr	r1, [r3, #12]
 654 00d2 404B     		ldr	r3, .L54+16
 655 00d4 0B40     		ands	r3, r3, r1
 656 00d6 002B     		cmp	r3, #0
 657 00d8 0DD0     		beq	.L45
 658              	.L44:
 659              		.loc 1 462 0 discriminator 14
 660 00da 7B68     		ldr	r3, [r7, #4]
 661 00dc 1B68     		ldr	r3, [r3]
 662 00de 1969     		ldr	r1, [r3, #16]
 663 00e0 3D4B     		ldr	r3, .L54+20
 664 00e2 0B40     		ands	r3, r3, r1
 665 00e4 002B     		cmp	r3, #0
 666 00e6 08D1     		bne	.L46
 667              		.loc 1 462 0 discriminator 15
 668 00e8 7B68     		ldr	r3, [r7, #4]
 669 00ea 1B68     		ldr	r3, [r3]
 670 00ec D968     		ldr	r1, [r3, #12]
 671 00ee 3A4B     		ldr	r3, .L54+20
 672 00f0 0B40     		ands	r3, r3, r1
 673 00f2 002B     		cmp	r3, #0
 674 00f4 01D1     		bne	.L46
 675              	.L45:
 676              		.loc 1 462 0 discriminator 17
ARM GAS  /tmp/ccZpuGm0.s 			page 21


 677 00f6 5423     		movs	r3, #84
 678 00f8 00E0     		b	.L43
 679              	.L46:
 680              		.loc 1 462 0 discriminator 18
 681 00fa FC23     		movs	r3, #252
 682              	.L43:
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 683              		.loc 1 460 0 is_stmt 1
 684 00fc 03FB02F3 		mul	r3, r3, r2
 685 0100 7B61     		str	r3, [r7, #20]
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 686              		.loc 1 464 0
 687 0102 1DE0     		b	.L48
 688              	.L51:
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 689              		.loc 1 467 0
 690 0104 3B68     		ldr	r3, [r7]
 691 0106 B3F1FF3F 		cmp	r3, #-1
 692 010a 16D0     		beq	.L49
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 693              		.loc 1 469 0
 694 010c 3B68     		ldr	r3, [r7]
 695 010e 002B     		cmp	r3, #0
 696 0110 07D0     		beq	.L50
 697              		.loc 1 469 0 is_stmt 0 discriminator 1
 698 0112 FFF7FEFF 		bl	HAL_GetTick
 699 0116 0246     		mov	r2, r0
 700 0118 3B69     		ldr	r3, [r7, #16]
 701 011a D21A     		subs	r2, r2, r3
 702 011c 3B68     		ldr	r3, [r7]
 703 011e 9A42     		cmp	r2, r3
 704 0120 0BD9     		bls	.L49
 705              	.L50:
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 706              		.loc 1 472 0 is_stmt 1
 707 0122 7B68     		ldr	r3, [r7, #4]
 708 0124 9B6A     		ldr	r3, [r3, #40]
 709 0126 43F00402 		orr	r2, r3, #4
 710 012a 7B68     		ldr	r3, [r7, #4]
 711 012c 9A62     		str	r2, [r3, #40]
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 712              		.loc 1 475 0
 713 012e 7B68     		ldr	r3, [r7, #4]
 714 0130 0022     		movs	r2, #0
 715 0132 83F82420 		strb	r2, [r3, #36]
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 716              		.loc 1 477 0
 717 0136 0323     		movs	r3, #3
ARM GAS  /tmp/ccZpuGm0.s 			page 22


 718 0138 3FE0     		b	.L37
 719              	.L49:
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
 720              		.loc 1 480 0
 721 013a FB68     		ldr	r3, [r7, #12]
 722 013c 0133     		adds	r3, r3, #1
 723 013e FB60     		str	r3, [r7, #12]
 724              	.L48:
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 725              		.loc 1 464 0
 726 0140 FA68     		ldr	r2, [r7, #12]
 727 0142 7B69     		ldr	r3, [r7, #20]
 728 0144 9A42     		cmp	r2, r3
 729 0146 DDD3     		bcc	.L51
 730              	.L39:
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Clear injected group conversion flag */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* simultaneously.                                                          */
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 731              		.loc 1 487 0
 732 0148 7B68     		ldr	r3, [r7, #4]
 733 014a 1B68     		ldr	r3, [r3]
 734 014c 6FF00E02 		mvn	r2, #14
 735 0150 1A60     		str	r2, [r3]
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Update ADC state machine */
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 736              		.loc 1 490 0
 737 0152 7B68     		ldr	r3, [r7, #4]
 738 0154 9B6A     		ldr	r3, [r3, #40]
 739 0156 43F40052 		orr	r2, r3, #8192
 740 015a 7B68     		ldr	r3, [r7, #4]
 741 015c 9A62     		str	r2, [r3, #40]
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 742              		.loc 1 495 0
 743 015e 7B68     		ldr	r3, [r7, #4]
 744 0160 1B68     		ldr	r3, [r3]
 745 0162 9B68     		ldr	r3, [r3, #8]
 746 0164 03F4E043 		and	r3, r3, #28672
 747 0168 B3F5E04F 		cmp	r3, #28672
 748 016c 12D0     		beq	.L52
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 749              		.loc 1 496 0 discriminator 1
 750 016e 7B68     		ldr	r3, [r7, #4]
 751 0170 1B68     		ldr	r3, [r3]
 752 0172 5B68     		ldr	r3, [r3, #4]
 753 0174 03F48063 		and	r3, r3, #1024
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
ARM GAS  /tmp/ccZpuGm0.s 			page 23


 754              		.loc 1 495 0 discriminator 1
 755 0178 002B     		cmp	r3, #0
 756 017a 1DD1     		bne	.L53
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 757              		.loc 1 497 0
 758 017c 7B68     		ldr	r3, [r7, #4]
 759 017e 1B68     		ldr	r3, [r3]
 760 0180 9B68     		ldr	r3, [r3, #8]
 761 0182 03F46023 		and	r3, r3, #917504
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 762              		.loc 1 496 0
 763 0186 B3F5602F 		cmp	r3, #917504
 764 018a 15D1     		bne	.L53
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 765              		.loc 1 498 0
 766 018c 7B68     		ldr	r3, [r7, #4]
 767 018e DB68     		ldr	r3, [r3, #12]
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 768              		.loc 1 497 0
 769 0190 002B     		cmp	r3, #0
 770 0192 11D1     		bne	.L53
 771              	.L52:
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 772              		.loc 1 501 0
 773 0194 7B68     		ldr	r3, [r7, #4]
 774 0196 9B6A     		ldr	r3, [r3, #40]
 775 0198 23F48052 		bic	r2, r3, #4096
 776 019c 7B68     		ldr	r3, [r7, #4]
 777 019e 9A62     		str	r2, [r3, #40]
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 778              		.loc 1 503 0
 779 01a0 7B68     		ldr	r3, [r7, #4]
 780 01a2 9B6A     		ldr	r3, [r3, #40]
 781 01a4 03F48073 		and	r3, r3, #256
 782 01a8 002B     		cmp	r3, #0
 783 01aa 05D1     		bne	.L53
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 784              		.loc 1 505 0
 785 01ac 7B68     		ldr	r3, [r7, #4]
 786 01ae 9B6A     		ldr	r3, [r3, #40]
 787 01b0 43F00102 		orr	r2, r3, #1
 788 01b4 7B68     		ldr	r3, [r7, #4]
 789 01b6 9A62     		str	r2, [r3, #40]
 790              	.L53:
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC state */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return HAL_OK;
 791              		.loc 1 510 0
 792 01b8 0023     		movs	r3, #0
 793              	.L37:
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
ARM GAS  /tmp/ccZpuGm0.s 			page 24


 794              		.loc 1 511 0
 795 01ba 1846     		mov	r0, r3
 796 01bc 1C37     		adds	r7, r7, #28
 797              	.LCFI18:
 798              		.cfi_def_cfa_offset 12
 799 01be BD46     		mov	sp, r7
 800              	.LCFI19:
 801              		.cfi_def_cfa_register 13
 802              		@ sp needed
 803 01c0 90BD     		pop	{r4, r7, pc}
 804              	.L55:
 805 01c2 00BF     		.align	2
 806              	.L54:
 807 01c4 00000000 		.word	SystemCoreClock
 808 01c8 24499224 		.word	613566756
 809 01cc 24499200 		.word	9586980
 810 01d0 92244912 		.word	306783378
 811 01d4 92244900 		.word	4793490
 812 01d8 49922400 		.word	2396745
 813              		.cfi_endproc
 814              	.LFE66:
 816              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 817              		.align	2
 818              		.global	HAL_ADCEx_InjectedStart_IT
 819              		.thumb
 820              		.thumb_func
 822              	HAL_ADCEx_InjectedStart_IT:
 823              	.LFB67:
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status.
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 824              		.loc 1 521 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 16
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828 0000 80B5     		push	{r7, lr}
 829              	.LCFI20:
 830              		.cfi_def_cfa_offset 8
 831              		.cfi_offset 7, -8
 832              		.cfi_offset 14, -4
 833 0002 84B0     		sub	sp, sp, #16
 834              	.LCFI21:
 835              		.cfi_def_cfa_offset 24
 836 0004 00AF     		add	r7, sp, #0
 837              	.LCFI22:
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 840              		.loc 1 522 0
 841 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccZpuGm0.s 			page 25


 842 000a FB73     		strb	r3, [r7, #15]
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 843              		.loc 1 528 0
 844 000c 7B68     		ldr	r3, [r7, #4]
 845 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 846 0012 012B     		cmp	r3, #1
 847 0014 01D1     		bne	.L57
 848              		.loc 1 528 0 is_stmt 0 discriminator 1
 849 0016 0223     		movs	r3, #2
 850 0018 78E0     		b	.L58
 851              	.L57:
 852              		.loc 1 528 0 discriminator 2
 853 001a 7B68     		ldr	r3, [r7, #4]
 854 001c 0122     		movs	r2, #1
 855 001e 83F82420 		strb	r2, [r3, #36]
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 856              		.loc 1 531 0 is_stmt 1 discriminator 2
 857 0022 7868     		ldr	r0, [r7, #4]
 858 0024 FFF7FEFF 		bl	ADC_Enable
 859 0028 0346     		mov	r3, r0
 860 002a FB73     		strb	r3, [r7, #15]
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 861              		.loc 1 534 0 discriminator 2
 862 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 863 002e 002B     		cmp	r3, #0
 864 0030 67D1     		bne	.L59
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 865              		.loc 1 539 0
 866 0032 7B68     		ldr	r3, [r7, #4]
 867 0034 9B6A     		ldr	r3, [r3, #40]
 868 0036 23F44053 		bic	r3, r3, #12288
 869 003a 23F00103 		bic	r3, r3, #1
 870 003e 43F48052 		orr	r2, r3, #4096
 871 0042 7B68     		ldr	r3, [r7, #4]
 872 0044 9A62     		str	r2, [r3, #40]
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 873              		.loc 1 545 0
 874 0046 7B68     		ldr	r3, [r7, #4]
 875 0048 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZpuGm0.s 			page 26


 876 004a 324A     		ldr	r2, .L68
 877 004c 9342     		cmp	r3, r2
 878 004e 05D1     		bne	.L60
 879              		.loc 1 545 0 is_stmt 0 discriminator 1
 880 0050 314B     		ldr	r3, .L68+4
 881 0052 5B68     		ldr	r3, [r3, #4]
 882 0054 03F47023 		and	r3, r3, #983040
 883 0058 002B     		cmp	r3, #0
 884 005a 06D1     		bne	.L61
 885              	.L60:
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 886              		.loc 1 547 0 is_stmt 1
 887 005c 7B68     		ldr	r3, [r7, #4]
 888 005e 9B6A     		ldr	r3, [r3, #40]
 889 0060 23F48012 		bic	r2, r3, #1048576
 890 0064 7B68     		ldr	r3, [r7, #4]
 891 0066 9A62     		str	r2, [r3, #40]
 892 0068 05E0     		b	.L62
 893              	.L61:
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 894              		.loc 1 551 0
 895 006a 7B68     		ldr	r3, [r7, #4]
 896 006c 9B6A     		ldr	r3, [r3, #40]
 897 006e 43F48012 		orr	r2, r3, #1048576
 898 0072 7B68     		ldr	r3, [r7, #4]
 899 0074 9A62     		str	r2, [r3, #40]
 900              	.L62:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 901              		.loc 1 558 0
 902 0076 7B68     		ldr	r3, [r7, #4]
 903 0078 9B6A     		ldr	r3, [r3, #40]
 904 007a 03F48073 		and	r3, r3, #256
 905 007e 002B     		cmp	r3, #0
 906 0080 02D1     		bne	.L63
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 907              		.loc 1 561 0
 908 0082 7B68     		ldr	r3, [r7, #4]
 909 0084 0022     		movs	r2, #0
 910 0086 DA62     		str	r2, [r3, #44]
 911              	.L63:
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
ARM GAS  /tmp/ccZpuGm0.s 			page 27


 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 912              		.loc 1 567 0
 913 0088 7B68     		ldr	r3, [r7, #4]
 914 008a 0022     		movs	r2, #0
 915 008c 83F82420 		strb	r2, [r3, #36]
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 916              		.loc 1 571 0
 917 0090 7B68     		ldr	r3, [r7, #4]
 918 0092 1B68     		ldr	r3, [r3]
 919 0094 6FF00402 		mvn	r2, #4
 920 0098 1A60     		str	r2, [r3]
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 921              		.loc 1 574 0
 922 009a 7B68     		ldr	r3, [r7, #4]
 923 009c 1B68     		ldr	r3, [r3]
 924 009e 7A68     		ldr	r2, [r7, #4]
 925 00a0 1268     		ldr	r2, [r2]
 926 00a2 5268     		ldr	r2, [r2, #4]
 927 00a4 42F08002 		orr	r2, r2, #128
 928 00a8 5A60     		str	r2, [r3, #4]
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of injected group if software start has been selected */
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* and if automatic injected conversion is disabled.                      */
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 929              		.loc 1 582 0
 930 00aa 7B68     		ldr	r3, [r7, #4]
 931 00ac 1B68     		ldr	r3, [r3]
 932 00ae 5B68     		ldr	r3, [r3, #4]
 933 00b0 03F48063 		and	r3, r3, #1024
 934 00b4 002B     		cmp	r3, #0
 935 00b6 28D1     		bne	.L67
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 936              		.loc 1 584 0
 937 00b8 7B68     		ldr	r3, [r7, #4]
 938 00ba 1B68     		ldr	r3, [r3]
 939 00bc 9B68     		ldr	r3, [r3, #8]
 940 00be 03F4E043 		and	r3, r3, #28672
 941 00c2 B3F5E04F 		cmp	r3, #28672
 942 00c6 13D1     		bne	.L65
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 943              		.loc 1 585 0 discriminator 1
 944 00c8 7B68     		ldr	r3, [r7, #4]
 945 00ca 1B68     		ldr	r3, [r3]
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 946              		.loc 1 584 0 discriminator 1
 947 00cc 114A     		ldr	r2, .L68
 948 00ce 9342     		cmp	r3, r2
ARM GAS  /tmp/ccZpuGm0.s 			page 28


 949 00d0 05D1     		bne	.L66
 950              		.loc 1 585 0 discriminator 2
 951 00d2 114B     		ldr	r3, .L68+4
 952 00d4 5B68     		ldr	r3, [r3, #4]
 953 00d6 03F47023 		and	r3, r3, #983040
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 954              		.loc 1 584 0 discriminator 2
 955 00da 002B     		cmp	r3, #0
 956 00dc 08D1     		bne	.L65
 957              	.L66:
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 958              		.loc 1 588 0
 959 00de 7B68     		ldr	r3, [r7, #4]
 960 00e0 1B68     		ldr	r3, [r3]
 961 00e2 7A68     		ldr	r2, [r7, #4]
 962 00e4 1268     		ldr	r2, [r2]
 963 00e6 9268     		ldr	r2, [r2, #8]
 964 00e8 42F40212 		orr	r2, r2, #2129920
 965 00ec 9A60     		str	r2, [r3, #8]
 966 00ee 0CE0     		b	.L67
 967              	.L65:
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 968              		.loc 1 593 0
 969 00f0 7B68     		ldr	r3, [r7, #4]
 970 00f2 1B68     		ldr	r3, [r3]
 971 00f4 7A68     		ldr	r2, [r7, #4]
 972 00f6 1268     		ldr	r2, [r2]
 973 00f8 9268     		ldr	r2, [r2, #8]
 974 00fa 42F40042 		orr	r2, r2, #32768
 975 00fe 9A60     		str	r2, [r3, #8]
 976 0100 03E0     		b	.L67
 977              	.L59:
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 978              		.loc 1 600 0
 979 0102 7B68     		ldr	r3, [r7, #4]
 980 0104 0022     		movs	r2, #0
 981 0106 83F82420 		strb	r2, [r3, #36]
 982              	.L67:
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 983              		.loc 1 604 0
 984 010a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 985              	.L58:
ARM GAS  /tmp/ccZpuGm0.s 			page 29


 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 986              		.loc 1 605 0
 987 010c 1846     		mov	r0, r3
 988 010e 1037     		adds	r7, r7, #16
 989              	.LCFI23:
 990              		.cfi_def_cfa_offset 8
 991 0110 BD46     		mov	sp, r7
 992              	.LCFI24:
 993              		.cfi_def_cfa_register 13
 994              		@ sp needed
 995 0112 80BD     		pop	{r7, pc}
 996              	.L69:
 997              		.align	2
 998              	.L68:
 999 0114 00280140 		.word	1073817600
 1000 0118 00240140 		.word	1073816576
 1001              		.cfi_endproc
 1002              	.LFE67:
 1004              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 1005              		.align	2
 1006              		.global	HAL_ADCEx_InjectedStop_IT
 1007              		.thumb
 1008              		.thumb_func
 1010              	HAL_ADCEx_InjectedStop_IT:
 1011              	.LFB68:
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         is on going.
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1012              		.loc 1 620 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 16
 1015              		@ frame_needed = 1, uses_anonymous_args = 0
 1016 0000 80B5     		push	{r7, lr}
 1017              	.LCFI25:
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 1021 0002 84B0     		sub	sp, sp, #16
 1022              	.LCFI26:
 1023              		.cfi_def_cfa_offset 24
 1024 0004 00AF     		add	r7, sp, #0
 1025              	.LCFI27:
 1026              		.cfi_def_cfa_register 7
 1027 0006 7860     		str	r0, [r7, #4]
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccZpuGm0.s 			page 30


 1028              		.loc 1 621 0
 1029 0008 0023     		movs	r3, #0
 1030 000a FB73     		strb	r3, [r7, #15]
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1031              		.loc 1 627 0
 1032 000c 7B68     		ldr	r3, [r7, #4]
 1033 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1034 0012 012B     		cmp	r3, #1
 1035 0014 01D1     		bne	.L71
 1036              		.loc 1 627 0 is_stmt 0 discriminator 1
 1037 0016 0223     		movs	r3, #2
 1038 0018 39E0     		b	.L72
 1039              	.L71:
 1040              		.loc 1 627 0 discriminator 2
 1041 001a 7B68     		ldr	r3, [r7, #4]
 1042 001c 0122     		movs	r2, #1
 1043 001e 83F82420 		strb	r2, [r3, #36]
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 1044              		.loc 1 635 0 is_stmt 1 discriminator 2
 1045 0022 7B68     		ldr	r3, [r7, #4]
 1046 0024 9B6A     		ldr	r3, [r3, #40]
 1047 0026 03F48073 		and	r3, r3, #256
 1048 002a 002B     		cmp	r3, #0
 1049 002c 22D1     		bne	.L73
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 1050              		.loc 1 636 0 discriminator 1
 1051 002e 7B68     		ldr	r3, [r7, #4]
 1052 0030 1B68     		ldr	r3, [r3]
 1053 0032 5B68     		ldr	r3, [r3, #4]
 1054 0034 03F48063 		and	r3, r3, #1024
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 1055              		.loc 1 635 0 discriminator 1
 1056 0038 002B     		cmp	r3, #0
 1057 003a 1BD1     		bne	.L73
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1058              		.loc 1 640 0
 1059 003c 7868     		ldr	r0, [r7, #4]
 1060 003e FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1061 0042 0346     		mov	r3, r0
 1062 0044 FB73     		strb	r3, [r7, #15]
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
ARM GAS  /tmp/ccZpuGm0.s 			page 31


 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1063              		.loc 1 643 0
 1064 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1065 0048 002B     		cmp	r3, #0
 1066 004a 12D1     		bne	.L74
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 1067              		.loc 1 646 0
 1068 004c 7B68     		ldr	r3, [r7, #4]
 1069 004e 1B68     		ldr	r3, [r3]
 1070 0050 7A68     		ldr	r2, [r7, #4]
 1071 0052 1268     		ldr	r2, [r2]
 1072 0054 5268     		ldr	r2, [r2, #4]
 1073 0056 22F08002 		bic	r2, r2, #128
 1074 005a 5A60     		str	r2, [r3, #4]
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1075              		.loc 1 649 0
 1076 005c 7B68     		ldr	r3, [r7, #4]
 1077 005e 9B6A     		ldr	r3, [r3, #40]
 1078 0060 23F48853 		bic	r3, r3, #4352
 1079 0064 23F00103 		bic	r3, r3, #1
 1080 0068 43F00102 		orr	r2, r3, #1
 1081 006c 7B68     		ldr	r3, [r7, #4]
 1082 006e 9A62     		str	r2, [r3, #40]
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 1083              		.loc 1 643 0
 1084 0070 08E0     		b	.L75
 1085              	.L74:
 1086 0072 07E0     		b	.L75
 1087              	.L73:
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1088              		.loc 1 657 0
 1089 0074 7B68     		ldr	r3, [r7, #4]
 1090 0076 9B6A     		ldr	r3, [r3, #40]
 1091 0078 43F02002 		orr	r2, r3, #32
 1092 007c 7B68     		ldr	r3, [r7, #4]
 1093 007e 9A62     		str	r2, [r3, #40]
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 1094              		.loc 1 659 0
 1095 0080 0123     		movs	r3, #1
 1096 0082 FB73     		strb	r3, [r7, #15]
 1097              	.L75:
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
ARM GAS  /tmp/ccZpuGm0.s 			page 32


 1098              		.loc 1 663 0
 1099 0084 7B68     		ldr	r3, [r7, #4]
 1100 0086 0022     		movs	r2, #0
 1101 0088 83F82420 		strb	r2, [r3, #36]
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1102              		.loc 1 666 0
 1103 008c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1104              	.L72:
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1105              		.loc 1 667 0
 1106 008e 1846     		mov	r0, r3
 1107 0090 1037     		adds	r7, r7, #16
 1108              	.LCFI28:
 1109              		.cfi_def_cfa_offset 8
 1110 0092 BD46     		mov	sp, r7
 1111              	.LCFI29:
 1112              		.cfi_def_cfa_register 13
 1113              		@ sp needed
 1114 0094 80BD     		pop	{r7, pc}
 1115              		.cfi_endproc
 1116              	.LFE68:
 1118 0096 00BF     		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 1119              		.align	2
 1120              		.global	HAL_ADCEx_MultiModeStart_DMA
 1121              		.thumb
 1122              		.thumb_func
 1124              	HAL_ADCEx_MultiModeStart_DMA:
 1125              	.LFB69:
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         through DMA.
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Multimode must have been previously configured using 
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA transfer complete
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA half transfer
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  On STM32F1 devices, ADC slave regular group must be configured 
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         with conversion trigger ADC_SOFTWARE_START.
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  ADC slave can be enabled preliminarily using single-mode  
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Start() function.
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1126              		.loc 1 689 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 72
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccZpuGm0.s 			page 33


 1131              	.LCFI30:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 92B0     		sub	sp, sp, #72
 1136              	.LCFI31:
 1137              		.cfi_def_cfa_offset 80
 1138 0004 00AF     		add	r7, sp, #0
 1139              	.LCFI32:
 1140              		.cfi_def_cfa_register 7
 1141 0006 F860     		str	r0, [r7, #12]
 1142 0008 B960     		str	r1, [r7, #8]
 1143 000a 7A60     		str	r2, [r7, #4]
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1144              		.loc 1 690 0
 1145 000c 0023     		movs	r3, #0
 1146 000e 87F84730 		strb	r3, [r7, #71]
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1147              		.loc 1 698 0
 1148 0012 FB68     		ldr	r3, [r7, #12]
 1149 0014 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1150 0018 012B     		cmp	r3, #1
 1151 001a 01D1     		bne	.L77
 1152              		.loc 1 698 0 is_stmt 0 discriminator 1
 1153 001c 0223     		movs	r3, #2
 1154 001e 94E0     		b	.L87
 1155              	.L77:
 1156              		.loc 1 698 0 discriminator 2
 1157 0020 FB68     		ldr	r3, [r7, #12]
 1158 0022 0122     		movs	r2, #1
 1159 0024 83F82420 		strb	r2, [r3, #36]
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1160              		.loc 1 701 0 is_stmt 1 discriminator 2
 1161 0028 4A4B     		ldr	r3, .L88
 1162 002a 7B61     		str	r3, [r7, #20]
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC slave regular group must be configured with      */
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion trigger ADC_SOFTWARE_START.                                   */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: External trigger of ADC slave must be enabled, it is already done  */
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       into function "HAL_ADC_Init()".                                    */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((tmphadcSlave.Instance == NULL)                 ||
 1163              		.loc 1 707 0 discriminator 2
 1164 002c 7B69     		ldr	r3, [r7, #20]
 1165 002e 002B     		cmp	r3, #0
 1166 0030 06D0     		beq	.L79
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 1167              		.loc 1 708 0 discriminator 1
 1168 0032 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccZpuGm0.s 			page 34


 1169 0034 9B68     		ldr	r3, [r3, #8]
 1170 0036 03F46023 		and	r3, r3, #917504
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 1171              		.loc 1 707 0 discriminator 1
 1172 003a B3F5602F 		cmp	r3, #917504
 1173 003e 0BD0     		beq	.L80
 1174              	.L79:
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1175              		.loc 1 711 0
 1176 0040 FB68     		ldr	r3, [r7, #12]
 1177 0042 9B6A     		ldr	r3, [r3, #40]
 1178 0044 43F02002 		orr	r2, r3, #32
 1179 0048 FB68     		ldr	r3, [r7, #12]
 1180 004a 9A62     		str	r2, [r3, #40]
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 1181              		.loc 1 714 0
 1182 004c FB68     		ldr	r3, [r7, #12]
 1183 004e 0022     		movs	r2, #0
 1184 0050 83F82420 		strb	r2, [r3, #36]
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     return HAL_ERROR;
 1185              		.loc 1 716 0
 1186 0054 0123     		movs	r3, #1
 1187 0056 78E0     		b	.L87
 1188              	.L80:
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripherals: master and slave (in case if not already     */
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* enabled previously)                                                      */
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 1189              		.loc 1 721 0
 1190 0058 F868     		ldr	r0, [r7, #12]
 1191 005a FFF7FEFF 		bl	ADC_Enable
 1192 005e 0346     		mov	r3, r0
 1193 0060 87F84730 		strb	r3, [r7, #71]
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1194              		.loc 1 722 0
 1195 0064 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 1196 0068 002B     		cmp	r3, #0
 1197 006a 07D1     		bne	.L81
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(&tmphadcSlave);
 1198              		.loc 1 724 0
 1199 006c 07F11403 		add	r3, r7, #20
 1200 0070 1846     		mov	r0, r3
 1201 0072 FFF7FEFF 		bl	ADC_Enable
 1202 0076 0346     		mov	r3, r0
 1203 0078 87F84730 		strb	r3, [r7, #71]
 1204              	.L81:
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if all ADCs of multimode are effectively enabled */
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
ARM GAS  /tmp/ccZpuGm0.s 			page 35


 1205              		.loc 1 728 0
 1206 007c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 1207 0080 002B     		cmp	r3, #0
 1208 0082 5CD1     		bne	.L82
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state (ADC master)                                             */
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 1209              		.loc 1 733 0
 1210 0084 FB68     		ldr	r3, [r7, #12]
 1211 0086 9A6A     		ldr	r2, [r3, #40]
 1212 0088 334B     		ldr	r3, .L88+4
 1213 008a 1340     		ands	r3, r3, r2
 1214 008c 43F48072 		orr	r2, r3, #256
 1215 0090 FB68     		ldr	r3, [r7, #12]
 1216 0092 9A62     		str	r2, [r3, #40]
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1217              		.loc 1 739 0
 1218 0094 FB68     		ldr	r3, [r7, #12]
 1219 0096 1B68     		ldr	r3, [r3]
 1220 0098 5B68     		ldr	r3, [r3, #4]
 1221 009a 03F48063 		and	r3, r3, #1024
 1222 009e 002B     		cmp	r3, #0
 1223 00a0 07D0     		beq	.L83
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1224              		.loc 1 741 0
 1225 00a2 FB68     		ldr	r3, [r7, #12]
 1226 00a4 9B6A     		ldr	r3, [r3, #40]
 1227 00a6 23F44053 		bic	r3, r3, #12288
 1228 00aa 43F48052 		orr	r2, r3, #4096
 1229 00ae FB68     		ldr	r3, [r7, #12]
 1230 00b0 9A62     		str	r2, [r3, #40]
 1231              	.L83:
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 1232              		.loc 1 747 0
 1233 00b2 FB68     		ldr	r3, [r7, #12]
 1234 00b4 0022     		movs	r2, #0
 1235 00b6 83F82420 		strb	r2, [r3, #36]
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 1236              		.loc 1 750 0
 1237 00ba FB68     		ldr	r3, [r7, #12]
 1238 00bc 0022     		movs	r2, #0
 1239 00be DA62     		str	r2, [r3, #44]
ARM GAS  /tmp/ccZpuGm0.s 			page 36


 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA transfer complete callback */
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1240              		.loc 1 754 0
 1241 00c0 FB68     		ldr	r3, [r7, #12]
 1242 00c2 1B6A     		ldr	r3, [r3, #32]
 1243 00c4 254A     		ldr	r2, .L88+8
 1244 00c6 9A62     		str	r2, [r3, #40]
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****        
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA half transfer complete callback */
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1245              		.loc 1 757 0
 1246 00c8 FB68     		ldr	r3, [r7, #12]
 1247 00ca 1B6A     		ldr	r3, [r3, #32]
 1248 00cc 244A     		ldr	r2, .L88+12
 1249 00ce DA62     		str	r2, [r3, #44]
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA error callback */
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1250              		.loc 1 760 0
 1251 00d0 FB68     		ldr	r3, [r7, #12]
 1252 00d2 1B6A     		ldr	r3, [r3, #32]
 1253 00d4 234A     		ldr	r2, .L88+16
 1254 00d6 1A63     		str	r2, [r3, #48]
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* start (in case of SW start):                                           */
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1255              		.loc 1 768 0
 1256 00d8 FB68     		ldr	r3, [r7, #12]
 1257 00da 1B68     		ldr	r3, [r3]
 1258 00dc 6FF00202 		mvn	r2, #2
 1259 00e0 1A60     		str	r2, [r3]
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable ADC DMA mode of ADC master */
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1260              		.loc 1 771 0
 1261 00e2 FB68     		ldr	r3, [r7, #12]
 1262 00e4 1B68     		ldr	r3, [r3]
 1263 00e6 FA68     		ldr	r2, [r7, #12]
 1264 00e8 1268     		ldr	r2, [r2]
 1265 00ea 9268     		ldr	r2, [r2, #8]
 1266 00ec 42F48072 		orr	r2, r2, #256
 1267 00f0 9A60     		str	r2, [r3, #8]
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start the DMA channel */
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1268              		.loc 1 774 0
 1269 00f2 FB68     		ldr	r3, [r7, #12]
 1270 00f4 1A6A     		ldr	r2, [r3, #32]
 1271 00f6 FB68     		ldr	r3, [r7, #12]
 1272 00f8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZpuGm0.s 			page 37


 1273 00fa 4C33     		adds	r3, r3, #76
 1274 00fc 1946     		mov	r1, r3
 1275 00fe BB68     		ldr	r3, [r7, #8]
 1276 0100 1046     		mov	r0, r2
 1277 0102 1A46     		mov	r2, r3
 1278 0104 7B68     		ldr	r3, [r7, #4]
 1279 0106 FFF7FEFF 		bl	HAL_DMA_Start_IT
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of regular group if software start has been selected. */
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1280              		.loc 1 781 0
 1281 010a FB68     		ldr	r3, [r7, #12]
 1282 010c 1B68     		ldr	r3, [r3]
 1283 010e 9B68     		ldr	r3, [r3, #8]
 1284 0110 03F46023 		and	r3, r3, #917504
 1285 0114 B3F5602F 		cmp	r3, #917504
 1286 0118 08D1     		bne	.L84
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1287              		.loc 1 784 0
 1288 011a FB68     		ldr	r3, [r7, #12]
 1289 011c 1B68     		ldr	r3, [r3]
 1290 011e FA68     		ldr	r2, [r7, #12]
 1291 0120 1268     		ldr	r2, [r2]
 1292 0122 9268     		ldr	r2, [r2, #8]
 1293 0124 42F4A002 		orr	r2, r2, #5242880
 1294 0128 9A60     		str	r2, [r3, #8]
 1295 012a 0CE0     		b	.L86
 1296              	.L84:
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1297              		.loc 1 789 0
 1298 012c FB68     		ldr	r3, [r7, #12]
 1299 012e 1B68     		ldr	r3, [r3]
 1300 0130 FA68     		ldr	r2, [r7, #12]
 1301 0132 1268     		ldr	r2, [r2]
 1302 0134 9268     		ldr	r2, [r2, #8]
 1303 0136 42F48012 		orr	r2, r2, #1048576
 1304 013a 9A60     		str	r2, [r3, #8]
 1305 013c 03E0     		b	.L86
 1306              	.L82:
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 1307              		.loc 1 795 0
 1308 013e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccZpuGm0.s 			page 38


 1309 0140 0022     		movs	r2, #0
 1310 0142 83F82420 		strb	r2, [r3, #36]
 1311              	.L86:
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1312              		.loc 1 799 0
 1313 0146 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 1314              	.L87:
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1315              		.loc 1 800 0 discriminator 1
 1316 014a 1846     		mov	r0, r3
 1317 014c 4837     		adds	r7, r7, #72
 1318              	.LCFI33:
 1319              		.cfi_def_cfa_offset 8
 1320 014e BD46     		mov	sp, r7
 1321              	.LCFI34:
 1322              		.cfi_def_cfa_register 13
 1323              		@ sp needed
 1324 0150 80BD     		pop	{r7, pc}
 1325              	.L89:
 1326 0152 00BF     		.align	2
 1327              	.L88:
 1328 0154 00280140 		.word	1073817600
 1329 0158 FEFCEFFF 		.word	-1049346
 1330 015c 00000000 		.word	ADC_DMAConvCplt
 1331 0160 00000000 		.word	ADC_DMAHalfConvCplt
 1332 0164 00000000 		.word	ADC_DMAError
 1333              		.cfi_endproc
 1334              	.LFE69:
 1336              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 1337              		.align	2
 1338              		.global	HAL_ADCEx_MultiModeStop_DMA
 1339              		.thumb
 1340              		.thumb_func
 1342              	HAL_ADCEx_MultiModeStop_DMA:
 1343              	.LFB70:
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC peripheral.
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode 
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel(), ADC must be 
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1344              		.loc 1 816 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 64
ARM GAS  /tmp/ccZpuGm0.s 			page 39


 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348 0000 80B5     		push	{r7, lr}
 1349              	.LCFI35:
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 7, -8
 1352              		.cfi_offset 14, -4
 1353 0002 90B0     		sub	sp, sp, #64
 1354              	.LCFI36:
 1355              		.cfi_def_cfa_offset 72
 1356 0004 00AF     		add	r7, sp, #0
 1357              	.LCFI37:
 1358              		.cfi_def_cfa_register 7
 1359 0006 7860     		str	r0, [r7, #4]
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1360              		.loc 1 817 0
 1361 0008 0023     		movs	r3, #0
 1362 000a 87F83F30 		strb	r3, [r7, #63]
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1363              		.loc 1 824 0
 1364 000e 7B68     		ldr	r3, [r7, #4]
 1365 0010 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1366 0014 012B     		cmp	r3, #1
 1367 0016 01D1     		bne	.L91
 1368              		.loc 1 824 0 is_stmt 0 discriminator 1
 1369 0018 0223     		movs	r3, #2
 1370 001a 69E0     		b	.L97
 1371              	.L91:
 1372              		.loc 1 824 0 discriminator 2
 1373 001c 7B68     		ldr	r3, [r7, #4]
 1374 001e 0122     		movs	r2, #1
 1375 0020 83F82420 		strb	r2, [r3, #36]
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC master peripheral */
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1376              		.loc 1 829 0 is_stmt 1 discriminator 2
 1377 0024 7868     		ldr	r0, [r7, #4]
 1378 0026 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1379 002a 0346     		mov	r3, r0
 1380 002c 87F83F30 		strb	r3, [r7, #63]
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1381              		.loc 1 832 0 discriminator 2
 1382 0030 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1383 0034 002B     		cmp	r3, #0
 1384 0036 55D1     		bne	.L93
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
ARM GAS  /tmp/ccZpuGm0.s 			page 40


 1385              		.loc 1 835 0
 1386 0038 2F4B     		ldr	r3, .L98
 1387 003a FB60     		str	r3, [r7, #12]
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 1388              		.loc 1 837 0
 1389 003c FB68     		ldr	r3, [r7, #12]
 1390 003e 002B     		cmp	r3, #0
 1391 0040 0BD1     		bne	.L94
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1392              		.loc 1 840 0
 1393 0042 7B68     		ldr	r3, [r7, #4]
 1394 0044 9B6A     		ldr	r3, [r3, #40]
 1395 0046 43F04002 		orr	r2, r3, #64
 1396 004a 7B68     		ldr	r3, [r7, #4]
 1397 004c 9A62     		str	r2, [r3, #40]
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Process unlocked */
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1398              		.loc 1 843 0
 1399 004e 7B68     		ldr	r3, [r7, #4]
 1400 0050 0022     		movs	r2, #0
 1401 0052 83F82420 		strb	r2, [r3, #36]
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       return HAL_ERROR;
 1402              		.loc 1 845 0
 1403 0056 0123     		movs	r3, #1
 1404 0058 4AE0     		b	.L97
 1405              	.L94:
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC slave peripheral */
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = ADC_ConversionStop_Disable(&tmphadcSlave);
 1406              		.loc 1 850 0
 1407 005a 07F10C03 		add	r3, r7, #12
 1408 005e 1846     		mov	r0, r3
 1409 0060 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1410 0064 0346     		mov	r3, r0
 1411 0066 87F83F30 		strb	r3, [r7, #63]
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (tmp_hal_status != HAL_OK)
 1412              		.loc 1 853 0
 1413 006a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1414 006e 002B     		cmp	r3, #0
 1415 0070 0BD0     		beq	.L95
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 1416              		.loc 1 856 0
 1417 0072 7B68     		ldr	r3, [r7, #4]
 1418 0074 9B6A     		ldr	r3, [r3, #40]
 1419 0076 43F01002 		orr	r2, r3, #16
 1420 007a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZpuGm0.s 			page 41


 1421 007c 9A62     		str	r2, [r3, #40]
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1422              		.loc 1 859 0
 1423 007e 7B68     		ldr	r3, [r7, #4]
 1424 0080 0022     		movs	r2, #0
 1425 0082 83F82420 		strb	r2, [r3, #36]
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 1426              		.loc 1 861 0
 1427 0086 0123     		movs	r3, #1
 1428 0088 32E0     		b	.L97
 1429              	.L95:
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC DMA mode */
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1430              		.loc 1 866 0
 1431 008a 7B68     		ldr	r3, [r7, #4]
 1432 008c 1B68     		ldr	r3, [r3]
 1433 008e 7A68     		ldr	r2, [r7, #4]
 1434 0090 1268     		ldr	r2, [r2]
 1435 0092 9268     		ldr	r2, [r2, #8]
 1436 0094 22F48072 		bic	r2, r2, #256
 1437 0098 9A60     		str	r2, [r3, #8]
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Reset configuration of ADC DMA continuous request for dual mode */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 1438              		.loc 1 869 0
 1439 009a 7B68     		ldr	r3, [r7, #4]
 1440 009c 1B68     		ldr	r3, [r3]
 1441 009e 7A68     		ldr	r2, [r7, #4]
 1442 00a0 1268     		ldr	r2, [r2]
 1443 00a2 5268     		ldr	r2, [r2, #4]
 1444 00a4 22F47022 		bic	r2, r2, #983040
 1445 00a8 5A60     		str	r2, [r3, #4]
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1446              		.loc 1 873 0
 1447 00aa 7B68     		ldr	r3, [r7, #4]
 1448 00ac 1B6A     		ldr	r3, [r3, #32]
 1449 00ae 1846     		mov	r0, r3
 1450 00b0 FFF7FEFF 		bl	HAL_DMA_Abort
 1451 00b4 0346     		mov	r3, r0
 1452 00b6 87F83F30 		strb	r3, [r7, #63]
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1453              		.loc 1 877 0
 1454 00ba 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1455 00be 002B     		cmp	r3, #0
 1456 00c0 0AD1     		bne	.L96
ARM GAS  /tmp/ccZpuGm0.s 			page 42


 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Change ADC state (ADC master) */
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1457              		.loc 1 880 0
 1458 00c2 7B68     		ldr	r3, [r7, #4]
 1459 00c4 9B6A     		ldr	r3, [r3, #40]
 1460 00c6 23F48853 		bic	r3, r3, #4352
 1461 00ca 23F00103 		bic	r3, r3, #1
 1462 00ce 43F00102 		orr	r2, r3, #1
 1463 00d2 7B68     		ldr	r3, [r7, #4]
 1464 00d4 9A62     		str	r2, [r3, #40]
 1465 00d6 05E0     		b	.L93
 1466              	.L96:
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);    
 1467              		.loc 1 887 0
 1468 00d8 7B68     		ldr	r3, [r7, #4]
 1469 00da 9B6A     		ldr	r3, [r3, #40]
 1470 00dc 43F04002 		orr	r2, r3, #64
 1471 00e0 7B68     		ldr	r3, [r7, #4]
 1472 00e2 9A62     		str	r2, [r3, #40]
 1473              	.L93:
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1474              		.loc 1 892 0
 1475 00e4 7B68     		ldr	r3, [r7, #4]
 1476 00e6 0022     		movs	r2, #0
 1477 00e8 83F82420 		strb	r2, [r3, #36]
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1478              		.loc 1 895 0
 1479 00ec 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1480              	.L97:
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1481              		.loc 1 896 0 discriminator 1
 1482 00f0 1846     		mov	r0, r3
 1483 00f2 4037     		adds	r7, r7, #64
 1484              	.LCFI38:
 1485              		.cfi_def_cfa_offset 8
 1486 00f4 BD46     		mov	sp, r7
 1487              	.LCFI39:
 1488              		.cfi_def_cfa_register 13
 1489              		@ sp needed
 1490 00f6 80BD     		pop	{r7, pc}
 1491              	.L99:
 1492              		.align	2
 1493              	.L98:
 1494 00f8 00280140 		.word	1073817600
ARM GAS  /tmp/ccZpuGm0.s 			page 43


 1495              		.cfi_endproc
 1496              	.LFE70:
 1498              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 1499              		.align	2
 1500              		.global	HAL_ADCEx_InjectedGetValue
 1501              		.thumb
 1502              		.thumb_func
 1504              	HAL_ADCEx_InjectedGetValue:
 1505              	.LFB71:
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            to flag JEOC.
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1506              		.loc 1 928 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 16
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 1511 0000 80B4     		push	{r7}
 1512              	.LCFI40:
 1513              		.cfi_def_cfa_offset 4
 1514              		.cfi_offset 7, -4
 1515 0002 85B0     		sub	sp, sp, #20
 1516              	.LCFI41:
 1517              		.cfi_def_cfa_offset 24
 1518 0004 00AF     		add	r7, sp, #0
 1519              	.LCFI42:
 1520              		.cfi_def_cfa_register 7
 1521 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccZpuGm0.s 			page 44


 1522 0008 3960     		str	r1, [r7]
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0;
 1523              		.loc 1 929 0
 1524 000a 0023     		movs	r3, #0
 1525 000c FB60     		str	r3, [r7, #12]
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(InjectedRank)
 1526              		.loc 1 936 0
 1527 000e 3B68     		ldr	r3, [r7]
 1528 0010 032B     		cmp	r3, #3
 1529 0012 09D0     		beq	.L102
 1530 0014 042B     		cmp	r3, #4
 1531 0016 02D0     		beq	.L103
 1532 0018 022B     		cmp	r3, #2
 1533 001a 0AD0     		beq	.L104
 1534 001c 0EE0     		b	.L107
 1535              	.L103:
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {  
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 1536              		.loc 1 939 0
 1537 001e 7B68     		ldr	r3, [r7, #4]
 1538 0020 1B68     		ldr	r3, [r3]
 1539 0022 9B6C     		ldr	r3, [r3, #72]
 1540 0024 FB60     		str	r3, [r7, #12]
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1541              		.loc 1 940 0
 1542 0026 0EE0     		b	.L105
 1543              	.L102:
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 1544              		.loc 1 942 0
 1545 0028 7B68     		ldr	r3, [r7, #4]
 1546 002a 1B68     		ldr	r3, [r3]
 1547 002c 5B6C     		ldr	r3, [r3, #68]
 1548 002e FB60     		str	r3, [r7, #12]
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1549              		.loc 1 943 0
 1550 0030 09E0     		b	.L105
 1551              	.L104:
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 1552              		.loc 1 945 0
 1553 0032 7B68     		ldr	r3, [r7, #4]
 1554 0034 1B68     		ldr	r3, [r3]
 1555 0036 1B6C     		ldr	r3, [r3, #64]
 1556 0038 FB60     		str	r3, [r7, #12]
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1557              		.loc 1 946 0
 1558 003a 04E0     		b	.L105
 1559              	.L107:
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
ARM GAS  /tmp/ccZpuGm0.s 			page 45


 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 1560              		.loc 1 949 0
 1561 003c 7B68     		ldr	r3, [r7, #4]
 1562 003e 1B68     		ldr	r3, [r3]
 1563 0040 DB6B     		ldr	r3, [r3, #60]
 1564 0042 FB60     		str	r3, [r7, #12]
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1565              		.loc 1 950 0
 1566 0044 00BF     		nop
 1567              	.L105:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_jdr;
 1568              		.loc 1 954 0
 1569 0046 FB68     		ldr	r3, [r7, #12]
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1570              		.loc 1 955 0
 1571 0048 1846     		mov	r0, r3
 1572 004a 1437     		adds	r7, r7, #20
 1573              	.LCFI43:
 1574              		.cfi_def_cfa_offset 4
 1575 004c BD46     		mov	sp, r7
 1576              	.LCFI44:
 1577              		.cfi_def_cfa_register 13
 1578              		@ sp needed
 1579 004e 5DF8047B 		ldr	r7, [sp], #4
 1580              	.LCFI45:
 1581              		.cfi_restore 7
 1582              		.cfi_def_cfa_offset 0
 1583 0052 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE71:
 1587              		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 1588              		.align	2
 1589              		.global	HAL_ADCEx_MultiModeGetValue
 1590              		.thumb
 1591              		.thumb_func
 1593              	HAL_ADCEx_MultiModeGetValue:
 1594              	.LFB72:
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Returns the last ADC Master&Slave regular conversions results data
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in the selected multi mode.
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval The converted data value.
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1595              		.loc 1 965 0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 16
 1598              		@ frame_needed = 1, uses_anonymous_args = 0
 1599              		@ link register save eliminated.
 1600 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccZpuGm0.s 			page 46


 1601              	.LCFI46:
 1602              		.cfi_def_cfa_offset 4
 1603              		.cfi_offset 7, -4
 1604 0002 85B0     		sub	sp, sp, #20
 1605              	.LCFI47:
 1606              		.cfi_def_cfa_offset 24
 1607 0004 00AF     		add	r7, sp, #0
 1608              	.LCFI48:
 1609              		.cfi_def_cfa_register 7
 1610 0006 7860     		str	r0, [r7, #4]
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmpDR = 0;
 1611              		.loc 1 966 0
 1612 0008 0023     		movs	r3, #0
 1613 000a FB60     		str	r3, [r7, #12]
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       cleared by hardware when reading register DR.                      */
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC1 data register DR contains ADC2 conversions      */
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* only if ADC1 DMA mode is enabled.                                        */
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmpDR = hadc->Instance->DR;
 1614              		.loc 1 979 0
 1615 000c 7B68     		ldr	r3, [r7, #4]
 1616 000e 1B68     		ldr	r3, [r3]
 1617 0010 DB6C     		ldr	r3, [r3, #76]
 1618 0012 FB60     		str	r3, [r7, #12]
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(ADC1->CR2, ADC_CR2_DMA))
 1619              		.loc 1 981 0
 1620 0014 094B     		ldr	r3, .L111
 1621 0016 9B68     		ldr	r3, [r3, #8]
 1622 0018 03F48073 		and	r3, r3, #256
 1623 001c 002B     		cmp	r3, #0
 1624 001e 05D1     		bne	.L109
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmpDR |= (ADC2->DR << 16);
 1625              		.loc 1 983 0
 1626 0020 074B     		ldr	r3, .L111+4
 1627 0022 DB6C     		ldr	r3, [r3, #76]
 1628 0024 1B04     		lsls	r3, r3, #16
 1629 0026 FA68     		ldr	r2, [r7, #12]
 1630 0028 1343     		orrs	r3, r3, r2
 1631 002a FB60     		str	r3, [r7, #12]
 1632              	.L109:
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmpDR;
 1633              		.loc 1 987 0
 1634 002c FB68     		ldr	r3, [r7, #12]
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
ARM GAS  /tmp/ccZpuGm0.s 			page 47


 1635              		.loc 1 988 0
 1636 002e 1846     		mov	r0, r3
 1637 0030 1437     		adds	r7, r7, #20
 1638              	.LCFI49:
 1639              		.cfi_def_cfa_offset 4
 1640 0032 BD46     		mov	sp, r7
 1641              	.LCFI50:
 1642              		.cfi_def_cfa_register 13
 1643              		@ sp needed
 1644 0034 5DF8047B 		ldr	r7, [sp], #4
 1645              	.LCFI51:
 1646              		.cfi_restore 7
 1647              		.cfi_def_cfa_offset 0
 1648 0038 7047     		bx	lr
 1649              	.L112:
 1650 003a 00BF     		.align	2
 1651              	.L111:
 1652 003c 00240140 		.word	1073816576
 1653 0040 00280140 		.word	1073817600
 1654              		.cfi_endproc
 1655              	.LFE72:
 1657              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 1658              		.align	2
 1659              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1660              		.thumb
 1661              		.thumb_func
 1663              	HAL_ADCEx_InjectedConvCpltCallback:
 1664              	.LFB73:
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1665              		.loc 1 997 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 8
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 1670 0000 80B4     		push	{r7}
 1671              	.LCFI52:
 1672              		.cfi_def_cfa_offset 4
 1673              		.cfi_offset 7, -4
 1674 0002 83B0     		sub	sp, sp, #12
 1675              	.LCFI53:
 1676              		.cfi_def_cfa_offset 16
 1677 0004 00AF     		add	r7, sp, #0
 1678              	.LCFI54:
 1679              		.cfi_def_cfa_register 7
 1680 0006 7860     		str	r0, [r7, #4]
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   UNUSED(hadc);
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
ARM GAS  /tmp/ccZpuGm0.s 			page 48


1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1681              		.loc 1 1003 0
 1682 0008 0C37     		adds	r7, r7, #12
 1683              	.LCFI55:
 1684              		.cfi_def_cfa_offset 4
 1685 000a BD46     		mov	sp, r7
 1686              	.LCFI56:
 1687              		.cfi_def_cfa_register 13
 1688              		@ sp needed
 1689 000c 5DF8047B 		ldr	r7, [sp], #4
 1690              	.LCFI57:
 1691              		.cfi_restore 7
 1692              		.cfi_def_cfa_offset 0
 1693 0010 7047     		bx	lr
 1694              		.cfi_endproc
 1695              	.LFE73:
 1697 0012 00BF     		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 1698              		.align	2
 1699              		.global	HAL_ADCEx_InjectedConfigChannel
 1700              		.thumb
 1701              		.thumb_func
 1703              	HAL_ADCEx_InjectedConfigChannel:
 1704              	.LFB74:
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 Extended Peripheral Control functions
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief    Extended Peripheral Control functions
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim   
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================  
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure multimode
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         linked to the injected group.
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected group.
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
ARM GAS  /tmp/ccZpuGm0.s 			page 49


1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1705              		.loc 1 1039 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 88
 1708              		@ frame_needed = 1, uses_anonymous_args = 0
 1709              		@ link register save eliminated.
 1710 0000 F0B4     		push	{r4, r5, r6, r7}
 1711              	.LCFI58:
 1712              		.cfi_def_cfa_offset 16
 1713              		.cfi_offset 4, -16
 1714              		.cfi_offset 5, -12
 1715              		.cfi_offset 6, -8
 1716              		.cfi_offset 7, -4
 1717 0002 96B0     		sub	sp, sp, #88
 1718              	.LCFI59:
 1719              		.cfi_def_cfa_offset 104
 1720 0004 00AF     		add	r7, sp, #0
 1721              	.LCFI60:
 1722              		.cfi_def_cfa_register 7
 1723 0006 7860     		str	r0, [r7, #4]
 1724 0008 3960     		str	r1, [r7]
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1725              		.loc 1 1040 0
 1726 000a 0023     		movs	r3, #0
 1727 000c 87F85730 		strb	r3, [r7, #87]
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1728              		.loc 1 1041 0
 1729 0010 0023     		movs	r3, #0
 1730 0012 BB60     		str	r3, [r7, #8]
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1731              		.loc 1 1059 0
 1732 0014 7B68     		ldr	r3, [r7, #4]
 1733 0016 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1734 001a 012B     		cmp	r3, #1
 1735 001c 01D1     		bne	.L115
 1736              		.loc 1 1059 0 is_stmt 0 discriminator 1
 1737 001e 0223     		movs	r3, #2
 1738 0020 D6E1     		b	.L116
ARM GAS  /tmp/ccZpuGm0.s 			page 50


 1739              	.L115:
 1740              		.loc 1 1059 0 discriminator 2
 1741 0022 7B68     		ldr	r3, [r7, #4]
 1742 0024 0122     		movs	r2, #1
 1743 0026 83F82420 		strb	r2, [r3, #36]
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1)                  */
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   parameter "InjectedNbrOfConversion".                                   */
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 1744              		.loc 1 1070 0 is_stmt 1 discriminator 2
 1745 002a 7B68     		ldr	r3, [r7, #4]
 1746 002c 9B68     		ldr	r3, [r3, #8]
 1747 002e 002B     		cmp	r3, #0
 1748 0030 29D1     		bne	.L117
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 1749              		.loc 1 1072 0
 1750 0032 3B68     		ldr	r3, [r7]
 1751 0034 5B68     		ldr	r3, [r3, #4]
 1752 0036 012B     		cmp	r3, #1
 1753 0038 1BD1     		bne	.L118
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                             ,
 1754              		.loc 1 1075 0
 1755 003a 7B68     		ldr	r3, [r7, #4]
 1756 003c 1968     		ldr	r1, [r3]
 1757 003e 7B68     		ldr	r3, [r7, #4]
 1758 0040 1B68     		ldr	r3, [r3]
 1759 0042 9B6B     		ldr	r3, [r3, #56]
 1760 0044 9B0D     		lsrs	r3, r3, #22
 1761 0046 9B05     		lsls	r3, r3, #22
 1762 0048 3A68     		ldr	r2, [r7]
 1763 004a 1068     		ldr	r0, [r2]
 1764 004c 4FF47872 		mov	r2, #992
 1765 0050 3A65     		str	r2, [r7, #80]
 1766              	.LBB20:
 1767              	.LBB21:
 1768              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
ARM GAS  /tmp/ccZpuGm0.s 			page 51


  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccZpuGm0.s 			page 52


  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccZpuGm0.s 			page 53


 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZpuGm0.s 			page 54


 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
ARM GAS  /tmp/ccZpuGm0.s 			page 55


 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
ARM GAS  /tmp/ccZpuGm0.s 			page 56


 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
ARM GAS  /tmp/ccZpuGm0.s 			page 57


 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZpuGm0.s 			page 58


 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccZpuGm0.s 			page 59


 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccZpuGm0.s 			page 60


 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1769              		.loc 2 531 0
 1770 0052 3A6D     		ldr	r2, [r7, #80]
 1771              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1772 0054 92FAA2F2 		rbit r2, r2
 1773              	@ 0 "" 2
 1774              		.thumb
 1775 0058 FA64     		str	r2, [r7, #76]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1776              		.loc 2 544 0
 1777 005a FA6C     		ldr	r2, [r7, #76]
 1778              	.LBE21:
 1779              	.LBE20:
 1780              		.loc 1 1075 0
 1781 005c B2FA82F2 		clz	r2, r2
 1782 0060 1446     		mov	r4, r2
 1783 0062 2246     		mov	r2, r4
 1784 0064 5200     		lsls	r2, r2, #1
 1785 0066 2244     		add	r2, r2, r4
 1786 0068 00FA02F2 		lsl	r2, r0, r2
 1787 006c 1343     		orrs	r3, r3, r2
 1788 006e 8B63     		str	r3, [r1, #56]
 1789 0070 76E0     		b	.L121
 1790              	.L118:
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL   |
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4 |
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3 |
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2 |
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1                                    ,
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   ADC_INJECTED_RANK_1,
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   0x01)                            );
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
ARM GAS  /tmp/ccZpuGm0.s 			page 61


 1791              		.loc 1 1090 0
 1792 0072 7B68     		ldr	r3, [r7, #4]
 1793 0074 9B6A     		ldr	r3, [r3, #40]
 1794 0076 43F02002 		orr	r2, r3, #32
 1795 007a 7B68     		ldr	r3, [r7, #4]
 1796 007c 9A62     		str	r2, [r3, #40]
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 1797              		.loc 1 1092 0
 1798 007e 0123     		movs	r3, #1
 1799 0080 87F85730 		strb	r3, [r7, #87]
 1800 0084 6CE0     		b	.L121
 1801              	.L117:
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 1802              		.loc 1 1100 0
 1803 0086 3B68     		ldr	r3, [r7]
 1804 0088 5A68     		ldr	r2, [r3, #4]
 1805 008a 3B68     		ldr	r3, [r7]
 1806 008c 1B69     		ldr	r3, [r3, #16]
 1807 008e 9A42     		cmp	r2, r3
 1808 0090 46D8     		bhi	.L122
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                         ,
 1809              		.loc 1 1104 0
 1810 0092 7B68     		ldr	r3, [r7, #4]
 1811 0094 1B68     		ldr	r3, [r3]
 1812 0096 7A68     		ldr	r2, [r7, #4]
 1813 0098 1268     		ldr	r2, [r2]
 1814 009a 916B     		ldr	r1, [r2, #56]
 1815 009c 4FF47872 		mov	r2, #992
 1816 00a0 BA64     		str	r2, [r7, #72]
 1817              	.LBB22:
 1818              	.LBB23:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1819              		.loc 2 531 0
 1820 00a2 BA6C     		ldr	r2, [r7, #72]
 1821              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1822 00a4 92FAA2F2 		rbit r2, r2
 1823              	@ 0 "" 2
 1824              		.thumb
 1825 00a8 7A64     		str	r2, [r7, #68]
 1826              		.loc 2 544 0
 1827 00aa 7A6C     		ldr	r2, [r7, #68]
 1828              	.LBE23:
 1829              	.LBE22:
 1830              		.loc 1 1104 0
 1831 00ac B2FA82F2 		clz	r2, r2
 1832 00b0 1446     		mov	r4, r2
ARM GAS  /tmp/ccZpuGm0.s 			page 62


 1833 00b2 3A68     		ldr	r2, [r7]
 1834 00b4 5068     		ldr	r0, [r2, #4]
 1835 00b6 3A68     		ldr	r2, [r7]
 1836 00b8 1269     		ldr	r2, [r2, #16]
 1837 00ba 821A     		subs	r2, r0, r2
 1838 00bc 0332     		adds	r2, r2, #3
 1839 00be 02FB04F2 		mul	r2, r2, r4
 1840 00c2 1046     		mov	r0, r2
 1841 00c4 1F22     		movs	r2, #31
 1842 00c6 8240     		lsls	r2, r2, r0
 1843 00c8 42F44012 		orr	r2, r2, #3145728
 1844 00cc D243     		mvns	r2, r2
 1845 00ce 1140     		ands	r1, r1, r2
 1846 00d0 3A68     		ldr	r2, [r7]
 1847 00d2 1269     		ldr	r2, [r2, #16]
 1848 00d4 501E     		subs	r0, r2, #1
 1849 00d6 4FF44012 		mov	r2, #3145728
 1850 00da 3A64     		str	r2, [r7, #64]
 1851              	.LBB24:
 1852              	.LBB25:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1853              		.loc 2 531 0
 1854 00dc 3A6C     		ldr	r2, [r7, #64]
 1855              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1856 00de 92FAA2F2 		rbit r2, r2
 1857              	@ 0 "" 2
 1858              		.thumb
 1859 00e2 FA63     		str	r2, [r7, #60]
 1860              		.loc 2 544 0
 1861 00e4 FA6B     		ldr	r2, [r7, #60]
 1862              	.LBE25:
 1863              	.LBE24:
 1864              		.loc 1 1104 0
 1865 00e6 B2FA82F2 		clz	r2, r2
 1866 00ea 9040     		lsls	r0, r0, r2
 1867 00ec 3A68     		ldr	r2, [r7]
 1868 00ee 1268     		ldr	r2, [r2]
 1869 00f0 4FF47874 		mov	r4, #992
 1870 00f4 BC63     		str	r4, [r7, #56]
 1871              	.LBB26:
 1872              	.LBB27:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1873              		.loc 2 531 0
 1874 00f6 BC6B     		ldr	r4, [r7, #56]
 1875              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1876 00f8 94FAA4F4 		rbit r4, r4
 1877              	@ 0 "" 2
 1878              		.thumb
 1879 00fc 7C63     		str	r4, [r7, #52]
 1880              		.loc 2 544 0
 1881 00fe 7C6B     		ldr	r4, [r7, #52]
 1882              	.LBE27:
 1883              	.LBE26:
 1884              		.loc 1 1104 0
 1885 0100 B4FA84F4 		clz	r4, r4
 1886 0104 2646     		mov	r6, r4
 1887 0106 3C68     		ldr	r4, [r7]
ARM GAS  /tmp/ccZpuGm0.s 			page 63


 1888 0108 6568     		ldr	r5, [r4, #4]
 1889 010a 3C68     		ldr	r4, [r7]
 1890 010c 2469     		ldr	r4, [r4, #16]
 1891 010e 2C1B     		subs	r4, r5, r4
 1892 0110 0334     		adds	r4, r4, #3
 1893 0112 04FB06F4 		mul	r4, r4, r6
 1894 0116 A240     		lsls	r2, r2, r4
 1895 0118 0243     		orrs	r2, r2, r0
 1896 011a 0A43     		orrs	r2, r2, r1
 1897 011c 9A63     		str	r2, [r3, #56]
 1898 011e 1FE0     		b	.L121
 1899              	.L122:
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)   ,
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)    );
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                       ,
 1900              		.loc 1 1119 0
 1901 0120 7B68     		ldr	r3, [r7, #4]
 1902 0122 1B68     		ldr	r3, [r3]
 1903 0124 7A68     		ldr	r2, [r7, #4]
 1904 0126 1268     		ldr	r2, [r2]
 1905 0128 916B     		ldr	r1, [r2, #56]
 1906 012a 4FF47872 		mov	r2, #992
 1907 012e 3A63     		str	r2, [r7, #48]
 1908              	.LBB28:
 1909              	.LBB29:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1910              		.loc 2 531 0
 1911 0130 3A6B     		ldr	r2, [r7, #48]
 1912              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1913 0132 92FAA2F2 		rbit r2, r2
 1914              	@ 0 "" 2
 1915              		.thumb
 1916 0136 FA62     		str	r2, [r7, #44]
 1917              		.loc 2 544 0
 1918 0138 FA6A     		ldr	r2, [r7, #44]
 1919              	.LBE29:
 1920              	.LBE28:
 1921              		.loc 1 1119 0
 1922 013a B2FA82F2 		clz	r2, r2
 1923 013e 1446     		mov	r4, r2
 1924 0140 3A68     		ldr	r2, [r7]
 1925 0142 5068     		ldr	r0, [r2, #4]
 1926 0144 3A68     		ldr	r2, [r7]
 1927 0146 1269     		ldr	r2, [r2, #16]
 1928 0148 821A     		subs	r2, r0, r2
ARM GAS  /tmp/ccZpuGm0.s 			page 64


 1929 014a 0332     		adds	r2, r2, #3
 1930 014c 02FB04F2 		mul	r2, r2, r4
 1931 0150 1046     		mov	r0, r2
 1932 0152 1F22     		movs	r2, #31
 1933 0154 8240     		lsls	r2, r2, r0
 1934 0156 42F44012 		orr	r2, r2, #3145728
 1935 015a D243     		mvns	r2, r2
 1936 015c 0A40     		ands	r2, r2, r1
 1937 015e 9A63     		str	r2, [r3, #56]
 1938              	.L121:
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion) ,
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  0x00000000                                                  );
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   } 
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - external trigger to start conversion                                  */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update not conditioned to ADC state:                          */
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 1939              		.loc 1 1139 0
 1940 0160 7B68     		ldr	r3, [r7, #4]
 1941 0162 1B68     		ldr	r3, [r3]
 1942 0164 9B68     		ldr	r3, [r3, #8]
 1943 0166 03F00103 		and	r3, r3, #1
 1944 016a 002B     		cmp	r3, #0
 1945 016c 0CD1     		bne	.L127
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {    
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                                           ,
 1946              		.loc 1 1141 0
 1947 016e 7B68     		ldr	r3, [r7, #4]
 1948 0170 1A68     		ldr	r2, [r3]
 1949 0172 7B68     		ldr	r3, [r7, #4]
 1950 0174 1B68     		ldr	r3, [r3]
 1951 0176 9B68     		ldr	r3, [r3, #8]
 1952 0178 23F4E043 		bic	r3, r3, #28672
 1953 017c 23F00103 		bic	r3, r3, #1
 1954 0180 3968     		ldr	r1, [r7]
 1955 0182 C969     		ldr	r1, [r1, #28]
 1956 0184 0B43     		orrs	r3, r3, r1
 1957 0186 9360     		str	r3, [r2, #8]
 1958              	.L127:
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL |
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_ADON                                                  ,
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CFGR_JEXTSEL(hadc, sConfigInjected->ExternalTrigInjecConv) );
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /tmp/ccZpuGm0.s 			page 65


1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
 1959              		.loc 1 1154 0
 1960 0188 3B68     		ldr	r3, [r7]
 1961 018a 9B69     		ldr	r3, [r3, #24]
 1962 018c 012B     		cmp	r3, #1
 1963 018e 16D1     		bne	.L128
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 1964              		.loc 1 1156 0
 1965 0190 3B68     		ldr	r3, [r7]
 1966 0192 DB69     		ldr	r3, [r3, #28]
 1967 0194 B3F5E04F 		cmp	r3, #28672
 1968 0198 08D1     		bne	.L129
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 1969              		.loc 1 1158 0
 1970 019a 7B68     		ldr	r3, [r7, #4]
 1971 019c 1B68     		ldr	r3, [r3]
 1972 019e 7A68     		ldr	r2, [r7, #4]
 1973 01a0 1268     		ldr	r2, [r2]
 1974 01a2 5268     		ldr	r2, [r2, #4]
 1975 01a4 42F48062 		orr	r2, r2, #1024
 1976 01a8 5A60     		str	r2, [r3, #4]
 1977 01aa 08E0     		b	.L128
 1978              	.L129:
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1979              		.loc 1 1163 0
 1980 01ac 7B68     		ldr	r3, [r7, #4]
 1981 01ae 9B6A     		ldr	r3, [r3, #40]
 1982 01b0 43F02002 		orr	r2, r3, #32
 1983 01b4 7B68     		ldr	r3, [r7, #4]
 1984 01b6 9A62     		str	r2, [r3, #40]
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1985              		.loc 1 1165 0
 1986 01b8 0123     		movs	r3, #1
 1987 01ba 87F85730 		strb	r3, [r7, #87]
 1988              	.L128:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* disabled.                                                              */  
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 1989              		.loc 1 1171 0
 1990 01be 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccZpuGm0.s 			page 66


 1991 01c0 5B69     		ldr	r3, [r3, #20]
 1992 01c2 012B     		cmp	r3, #1
 1993 01c4 15D1     		bne	.L130
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
 1994              		.loc 1 1173 0
 1995 01c6 3B68     		ldr	r3, [r7]
 1996 01c8 9B69     		ldr	r3, [r3, #24]
 1997 01ca 002B     		cmp	r3, #0
 1998 01cc 08D1     		bne	.L131
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 1999              		.loc 1 1175 0
 2000 01ce 7B68     		ldr	r3, [r7, #4]
 2001 01d0 1B68     		ldr	r3, [r3]
 2002 01d2 7A68     		ldr	r2, [r7, #4]
 2003 01d4 1268     		ldr	r2, [r2]
 2004 01d6 5268     		ldr	r2, [r2, #4]
 2005 01d8 42F48052 		orr	r2, r2, #4096
 2006 01dc 5A60     		str	r2, [r3, #4]
 2007 01de 08E0     		b	.L130
 2008              	.L131:
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       } 
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2009              		.loc 1 1180 0
 2010 01e0 7B68     		ldr	r3, [r7, #4]
 2011 01e2 9B6A     		ldr	r3, [r3, #40]
 2012 01e4 43F02002 		orr	r2, r3, #32
 2013 01e8 7B68     		ldr	r3, [r7, #4]
 2014 01ea 9A62     		str	r2, [r3, #40]
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 2015              		.loc 1 1182 0
 2016 01ec 0123     		movs	r3, #1
 2017 01ee 87F85730 		strb	r3, [r7, #87]
 2018              	.L130:
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* InjectedChannel sampling time configuration */
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For channels 10 to 17 */
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 2019              		.loc 1 1189 0
 2020 01f2 3B68     		ldr	r3, [r7]
 2021 01f4 1B68     		ldr	r3, [r3]
 2022 01f6 092B     		cmp	r3, #9
 2023 01f8 2DD9     		bls	.L132
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 2024              		.loc 1 1191 0
 2025 01fa 7B68     		ldr	r3, [r7, #4]
 2026 01fc 1B68     		ldr	r3, [r3]
 2027 01fe 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccZpuGm0.s 			page 67


 2028 0200 1268     		ldr	r2, [r2]
 2029 0202 D168     		ldr	r1, [r2, #12]
 2030 0204 3822     		movs	r2, #56
 2031 0206 BA62     		str	r2, [r7, #40]
 2032              	.LBB30:
 2033              	.LBB31:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2034              		.loc 2 531 0
 2035 0208 BA6A     		ldr	r2, [r7, #40]
 2036              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2037 020a 92FAA2F2 		rbit r2, r2
 2038              	@ 0 "" 2
 2039              		.thumb
 2040 020e 7A62     		str	r2, [r7, #36]
 2041              		.loc 2 544 0
 2042 0210 7A6A     		ldr	r2, [r7, #36]
 2043              	.LBE31:
 2044              	.LBE30:
 2045              		.loc 1 1191 0
 2046 0212 B2FA82F2 		clz	r2, r2
 2047 0216 1046     		mov	r0, r2
 2048 0218 3A68     		ldr	r2, [r7]
 2049 021a 1268     		ldr	r2, [r2]
 2050 021c 0A3A     		subs	r2, r2, #10
 2051 021e 02FB00F2 		mul	r2, r2, r0
 2052 0222 1046     		mov	r0, r2
 2053 0224 0722     		movs	r2, #7
 2054 0226 8240     		lsls	r2, r2, r0
 2055 0228 D243     		mvns	r2, r2
 2056 022a 1140     		ands	r1, r1, r2
 2057 022c 3A68     		ldr	r2, [r7]
 2058 022e 9268     		ldr	r2, [r2, #8]
 2059 0230 3820     		movs	r0, #56
 2060 0232 3862     		str	r0, [r7, #32]
 2061              	.LBB32:
 2062              	.LBB33:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2063              		.loc 2 531 0
 2064 0234 386A     		ldr	r0, [r7, #32]
 2065              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2066 0236 90FAA0F0 		rbit r0, r0
 2067              	@ 0 "" 2
 2068              		.thumb
 2069 023a F861     		str	r0, [r7, #28]
 2070              		.loc 2 544 0
 2071 023c F869     		ldr	r0, [r7, #28]
 2072              	.LBE33:
 2073              	.LBE32:
 2074              		.loc 1 1191 0
 2075 023e B0FA80F0 		clz	r0, r0
 2076 0242 0446     		mov	r4, r0
 2077 0244 3868     		ldr	r0, [r7]
 2078 0246 0068     		ldr	r0, [r0]
 2079 0248 0A38     		subs	r0, r0, #10
 2080 024a 00FB04F0 		mul	r0, r0, r4
 2081 024e 8240     		lsls	r2, r2, r0
 2082 0250 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccZpuGm0.s 			page 68


 2083 0252 DA60     		str	r2, [r3, #12]
 2084 0254 2AE0     		b	.L135
 2085              	.L132:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else /* For channels 0 to 9 */
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 2086              		.loc 1 1197 0
 2087 0256 7B68     		ldr	r3, [r7, #4]
 2088 0258 1B68     		ldr	r3, [r3]
 2089 025a 7A68     		ldr	r2, [r7, #4]
 2090 025c 1268     		ldr	r2, [r2]
 2091 025e 1169     		ldr	r1, [r2, #16]
 2092 0260 3822     		movs	r2, #56
 2093 0262 BA61     		str	r2, [r7, #24]
 2094              	.LBB34:
 2095              	.LBB35:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2096              		.loc 2 531 0
 2097 0264 BA69     		ldr	r2, [r7, #24]
 2098              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2099 0266 92FAA2F2 		rbit r2, r2
 2100              	@ 0 "" 2
 2101              		.thumb
 2102 026a 7A61     		str	r2, [r7, #20]
 2103              		.loc 2 544 0
 2104 026c 7A69     		ldr	r2, [r7, #20]
 2105              	.LBE35:
 2106              	.LBE34:
 2107              		.loc 1 1197 0
 2108 026e B2FA82F2 		clz	r2, r2
 2109 0272 1046     		mov	r0, r2
 2110 0274 3A68     		ldr	r2, [r7]
 2111 0276 1268     		ldr	r2, [r2]
 2112 0278 02FB00F2 		mul	r2, r2, r0
 2113 027c 1046     		mov	r0, r2
 2114 027e 0722     		movs	r2, #7
 2115 0280 8240     		lsls	r2, r2, r0
 2116 0282 D243     		mvns	r2, r2
 2117 0284 1140     		ands	r1, r1, r2
 2118 0286 3A68     		ldr	r2, [r7]
 2119 0288 9268     		ldr	r2, [r2, #8]
 2120 028a 3820     		movs	r0, #56
 2121 028c 3861     		str	r0, [r7, #16]
 2122              	.LBB36:
 2123              	.LBB37:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2124              		.loc 2 531 0
 2125 028e 3869     		ldr	r0, [r7, #16]
 2126              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2127 0290 90FAA0F0 		rbit r0, r0
 2128              	@ 0 "" 2
 2129              		.thumb
 2130 0294 F860     		str	r0, [r7, #12]
 2131              		.loc 2 544 0
ARM GAS  /tmp/ccZpuGm0.s 			page 69


 2132 0296 F868     		ldr	r0, [r7, #12]
 2133              	.LBE37:
 2134              	.LBE36:
 2135              		.loc 1 1197 0
 2136 0298 B0FA80F0 		clz	r0, r0
 2137 029c 0446     		mov	r4, r0
 2138 029e 3868     		ldr	r0, [r7]
 2139 02a0 0068     		ldr	r0, [r0]
 2140 02a2 00FB04F0 		mul	r0, r0, r4
 2141 02a6 8240     		lsls	r2, r2, r0
 2142 02a8 0A43     		orrs	r2, r2, r1
 2143 02aa 1A61     		str	r2, [r3, #16]
 2144              	.L135:
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 2145              		.loc 1 1204 0
 2146 02ac 3B68     		ldr	r3, [r7]
 2147 02ae 1B68     		ldr	r3, [r3]
 2148 02b0 102B     		cmp	r3, #16
 2149 02b2 03D0     		beq	.L138
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 2150              		.loc 1 1205 0 discriminator 1
 2151 02b4 3B68     		ldr	r3, [r7]
 2152 02b6 1B68     		ldr	r3, [r3]
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 2153              		.loc 1 1204 0 discriminator 1
 2154 02b8 112B     		cmp	r3, #17
 2155 02ba 07D1     		bne	.L139
 2156              	.L138:
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2157              		.loc 1 1207 0
 2158 02bc 7B68     		ldr	r3, [r7, #4]
 2159 02be 1B68     		ldr	r3, [r3]
 2160 02c0 7A68     		ldr	r2, [r7, #4]
 2161 02c2 1268     		ldr	r2, [r2]
 2162 02c4 9268     		ldr	r2, [r2, #8]
 2163 02c6 42F40002 		orr	r2, r2, #8388608
 2164 02ca 9A60     		str	r2, [r3, #8]
 2165              	.L139:
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 2166              		.loc 1 1212 0
 2167 02cc 3B68     		ldr	r3, [r7]
 2168 02ce 5B68     		ldr	r3, [r3, #4]
 2169 02d0 022B     		cmp	r3, #2
 2170 02d2 11D0     		beq	.L141
 2171 02d4 032B     		cmp	r3, #3
 2172 02d6 1DD0     		beq	.L142
ARM GAS  /tmp/ccZpuGm0.s 			page 70


 2173 02d8 012B     		cmp	r3, #1
 2174 02da 29D1     		bne	.L150
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 1:
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
 2175              		.loc 1 1216 0
 2176 02dc 7B68     		ldr	r3, [r7, #4]
 2177 02de 1A68     		ldr	r2, [r3]
 2178 02e0 7B68     		ldr	r3, [r7, #4]
 2179 02e2 1B68     		ldr	r3, [r3]
 2180 02e4 5B69     		ldr	r3, [r3, #20]
 2181 02e6 23F47F63 		bic	r3, r3, #4080
 2182 02ea 23F00F03 		bic	r3, r3, #15
 2183 02ee 3968     		ldr	r1, [r7]
 2184 02f0 C968     		ldr	r1, [r1, #12]
 2185 02f2 0B43     		orrs	r3, r3, r1
 2186 02f4 5361     		str	r3, [r2, #20]
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 2187              		.loc 1 1219 0
 2188 02f6 29E0     		b	.L144
 2189              	.L141:
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 2:
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
 2190              		.loc 1 1222 0
 2191 02f8 7B68     		ldr	r3, [r7, #4]
 2192 02fa 1A68     		ldr	r2, [r3]
 2193 02fc 7B68     		ldr	r3, [r7, #4]
 2194 02fe 1B68     		ldr	r3, [r3]
 2195 0300 9B69     		ldr	r3, [r3, #24]
 2196 0302 23F47F63 		bic	r3, r3, #4080
 2197 0306 23F00F03 		bic	r3, r3, #15
 2198 030a 3968     		ldr	r1, [r7]
 2199 030c C968     		ldr	r1, [r1, #12]
 2200 030e 0B43     		orrs	r3, r3, r1
 2201 0310 9361     		str	r3, [r2, #24]
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 2202              		.loc 1 1225 0
 2203 0312 1BE0     		b	.L144
 2204              	.L142:
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 3:
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
 2205              		.loc 1 1228 0
 2206 0314 7B68     		ldr	r3, [r7, #4]
 2207 0316 1A68     		ldr	r2, [r3]
 2208 0318 7B68     		ldr	r3, [r7, #4]
 2209 031a 1B68     		ldr	r3, [r3]
 2210 031c DB69     		ldr	r3, [r3, #28]
 2211 031e 23F47F63 		bic	r3, r3, #4080
 2212 0322 23F00F03 		bic	r3, r3, #15
 2213 0326 3968     		ldr	r1, [r7]
ARM GAS  /tmp/ccZpuGm0.s 			page 71


 2214 0328 C968     		ldr	r1, [r1, #12]
 2215 032a 0B43     		orrs	r3, r3, r1
 2216 032c D361     		str	r3, [r2, #28]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 2217              		.loc 1 1231 0
 2218 032e 0DE0     		b	.L144
 2219              	.L150:
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 4:
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
 2220              		.loc 1 1234 0
 2221 0330 7B68     		ldr	r3, [r7, #4]
 2222 0332 1A68     		ldr	r2, [r3]
 2223 0334 7B68     		ldr	r3, [r7, #4]
 2224 0336 1B68     		ldr	r3, [r3]
 2225 0338 1B6A     		ldr	r3, [r3, #32]
 2226 033a 23F47F63 		bic	r3, r3, #4080
 2227 033e 23F00F03 		bic	r3, r3, #15
 2228 0342 3968     		ldr	r1, [r7]
 2229 0344 C968     		ldr	r1, [r1, #12]
 2230 0346 0B43     		orrs	r3, r3, r1
 2231 0348 1362     		str	r3, [r2, #32]
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 2232              		.loc 1 1237 0
 2233 034a 00BF     		nop
 2234              	.L144:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 2235              		.loc 1 1242 0
 2236 034c 3B68     		ldr	r3, [r7]
 2237 034e 1B68     		ldr	r3, [r3]
 2238 0350 102B     		cmp	r3, #16
 2239 0352 03D0     		beq	.L145
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 2240              		.loc 1 1243 0 discriminator 1
 2241 0354 3B68     		ldr	r3, [r7]
 2242 0356 1B68     		ldr	r3, [r3]
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 2243              		.loc 1 1242 0 discriminator 1
 2244 0358 112B     		cmp	r3, #17
 2245 035a 33D1     		bne	.L146
 2246              	.L145:
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
 2247              		.loc 1 1248 0
 2248 035c 7B68     		ldr	r3, [r7, #4]
 2249 035e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZpuGm0.s 			page 72


 2250 0360 1E4A     		ldr	r2, .L151
 2251 0362 9342     		cmp	r3, r2
 2252 0364 25D1     		bne	.L147
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2253              		.loc 1 1250 0
 2254 0366 7B68     		ldr	r3, [r7, #4]
 2255 0368 1B68     		ldr	r3, [r3]
 2256 036a 9B68     		ldr	r3, [r3, #8]
 2257 036c 03F40003 		and	r3, r3, #8388608
 2258 0370 002B     		cmp	r3, #0
 2259 0372 27D1     		bne	.L146
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2260              		.loc 1 1252 0
 2261 0374 7B68     		ldr	r3, [r7, #4]
 2262 0376 1B68     		ldr	r3, [r3]
 2263 0378 7A68     		ldr	r2, [r7, #4]
 2264 037a 1268     		ldr	r2, [r2]
 2265 037c 9268     		ldr	r2, [r2, #8]
 2266 037e 42F40002 		orr	r2, r2, #8388608
 2267 0382 9A60     		str	r2, [r3, #8]
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 2268              		.loc 1 1254 0
 2269 0384 3B68     		ldr	r3, [r7]
 2270 0386 1B68     		ldr	r3, [r3]
 2271 0388 102B     		cmp	r3, #16
 2272 038a 1BD1     		bne	.L146
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 2273              		.loc 1 1258 0
 2274 038c 144B     		ldr	r3, .L151+4
 2275 038e 1B68     		ldr	r3, [r3]
 2276 0390 144A     		ldr	r2, .L151+8
 2277 0392 A2FB0323 		umull	r2, r3, r2, r3
 2278 0396 9A0C     		lsrs	r2, r3, #18
 2279 0398 1346     		mov	r3, r2
 2280 039a 9B00     		lsls	r3, r3, #2
 2281 039c 1344     		add	r3, r3, r2
 2282 039e 5B00     		lsls	r3, r3, #1
 2283 03a0 BB60     		str	r3, [r7, #8]
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 2284              		.loc 1 1259 0
 2285 03a2 02E0     		b	.L148
 2286              	.L149:
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           {
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             wait_loop_index--;
 2287              		.loc 1 1261 0
 2288 03a4 BB68     		ldr	r3, [r7, #8]
 2289 03a6 013B     		subs	r3, r3, #1
 2290 03a8 BB60     		str	r3, [r7, #8]
 2291              	.L148:
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 2292              		.loc 1 1259 0
ARM GAS  /tmp/ccZpuGm0.s 			page 73


 2293 03aa BB68     		ldr	r3, [r7, #8]
 2294 03ac 002B     		cmp	r3, #0
 2295 03ae F9D1     		bne	.L149
 2296 03b0 08E0     		b	.L146
 2297              	.L147:
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           }
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2298              		.loc 1 1269 0
 2299 03b2 7B68     		ldr	r3, [r7, #4]
 2300 03b4 9B6A     		ldr	r3, [r3, #40]
 2301 03b6 43F02002 		orr	r2, r3, #32
 2302 03ba 7B68     		ldr	r3, [r7, #4]
 2303 03bc 9A62     		str	r2, [r3, #40]
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 2304              		.loc 1 1271 0
 2305 03be 0123     		movs	r3, #1
 2306 03c0 87F85730 		strb	r3, [r7, #87]
 2307              	.L146:
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2308              		.loc 1 1276 0
 2309 03c4 7B68     		ldr	r3, [r7, #4]
 2310 03c6 0022     		movs	r2, #0
 2311 03c8 83F82420 		strb	r2, [r3, #36]
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 2312              		.loc 1 1279 0
 2313 03cc 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 2314              	.L116:
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 2315              		.loc 1 1280 0
 2316 03d0 1846     		mov	r0, r3
 2317 03d2 5837     		adds	r7, r7, #88
 2318              	.LCFI61:
 2319              		.cfi_def_cfa_offset 16
 2320 03d4 BD46     		mov	sp, r7
 2321              	.LCFI62:
 2322              		.cfi_def_cfa_register 13
 2323              		@ sp needed
 2324 03d6 F0BC     		pop	{r4, r5, r6, r7}
 2325              	.LCFI63:
 2326              		.cfi_restore 7
 2327              		.cfi_restore 6
 2328              		.cfi_restore 5
 2329              		.cfi_restore 4
 2330              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccZpuGm0.s 			page 74


 2331 03d8 7047     		bx	lr
 2332              	.L152:
 2333 03da 00BF     		.align	2
 2334              	.L151:
 2335 03dc 00240140 		.word	1073816576
 2336 03e0 00000000 		.word	SystemCoreClock
 2337 03e4 83DE1B43 		.word	1125899907
 2338              		.cfi_endproc
 2339              	.LFE74:
 2341              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 2342              		.align	2
 2343              		.global	HAL_ADCEx_MultiModeConfigChannel
 2344              		.thumb
 2345              		.thumb_func
 2347              	HAL_ADCEx_MultiModeConfigChannel:
 2348              	.LFB75:
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following  
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without reseting 
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the ADCs (both ADCs of the common group).
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   To change back configuration from multimode to single mode, ADC must
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  multimode: Structure of ADC multimode configuration
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 2349              		.loc 1 1300 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 64
 2352              		@ frame_needed = 1, uses_anonymous_args = 0
 2353              		@ link register save eliminated.
 2354 0000 80B4     		push	{r7}
 2355              	.LCFI64:
 2356              		.cfi_def_cfa_offset 4
 2357              		.cfi_offset 7, -4
 2358 0002 91B0     		sub	sp, sp, #68
 2359              	.LCFI65:
 2360              		.cfi_def_cfa_offset 72
 2361 0004 00AF     		add	r7, sp, #0
 2362              	.LCFI66:
 2363              		.cfi_def_cfa_register 7
 2364 0006 7860     		str	r0, [r7, #4]
 2365 0008 3960     		str	r1, [r7]
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2366              		.loc 1 1301 0
 2367 000a 0023     		movs	r3, #0
 2368 000c 87F83F30 		strb	r3, [r7, #63]
ARM GAS  /tmp/ccZpuGm0.s 			page 75


1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2369              		.loc 1 1309 0
 2370 0010 7B68     		ldr	r3, [r7, #4]
 2371 0012 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2372 0016 012B     		cmp	r3, #1
 2373 0018 01D1     		bne	.L154
 2374              		.loc 1 1309 0 is_stmt 0 discriminator 1
 2375 001a 0223     		movs	r3, #2
 2376 001c 32E0     		b	.L158
 2377              	.L154:
 2378              		.loc 1 1309 0 discriminator 2
 2379 001e 7B68     		ldr	r3, [r7, #4]
 2380 0020 0122     		movs	r2, #1
 2381 0022 83F82420 		strb	r2, [r3, #36]
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 2382              		.loc 1 1312 0 is_stmt 1 discriminator 2
 2383 0026 1A4B     		ldr	r3, .L159
 2384 0028 FB60     		str	r3, [r7, #12]
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - ADC master and ADC slave DMA configuration                            */
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Multimode mode selection                                              */
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* To optimize code, all multimode settings can be set when both ADCs of    */
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* the common group are in state: disabled.                                 */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 2385              		.loc 1 1322 0 discriminator 2
 2386 002a 7B68     		ldr	r3, [r7, #4]
 2387 002c 1B68     		ldr	r3, [r3]
 2388 002e 9B68     		ldr	r3, [r3, #8]
 2389 0030 03F00103 		and	r3, r3, #1
 2390 0034 002B     		cmp	r3, #0
 2391 0036 16D1     		bne	.L156
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 2392              		.loc 1 1323 0 discriminator 1
 2393 0038 FB68     		ldr	r3, [r7, #12]
 2394 003a 9B68     		ldr	r3, [r3, #8]
 2395 003c 03F00103 		and	r3, r3, #1
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 2396              		.loc 1 1322 0 discriminator 1
 2397 0040 002B     		cmp	r3, #0
 2398 0042 10D1     		bne	.L156
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 2399              		.loc 1 1324 0
 2400 0044 7B68     		ldr	r3, [r7, #4]
 2401 0046 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZpuGm0.s 			page 76


1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 2402              		.loc 1 1323 0
 2403 0048 124A     		ldr	r2, .L159+4
 2404 004a 9342     		cmp	r3, r2
 2405 004c 0BD1     		bne	.L156
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR1,
 2406              		.loc 1 1326 0
 2407 004e 7B68     		ldr	r3, [r7, #4]
 2408 0050 1B68     		ldr	r3, [r3]
 2409 0052 7A68     		ldr	r2, [r7, #4]
 2410 0054 1268     		ldr	r2, [r2]
 2411 0056 5268     		ldr	r2, [r2, #4]
 2412 0058 22F47021 		bic	r1, r2, #983040
 2413 005c 3A68     		ldr	r2, [r7]
 2414 005e 1268     		ldr	r2, [r2]
 2415 0060 0A43     		orrs	r2, r2, r1
 2416 0062 5A60     		str	r2, [r3, #4]
 2417 0064 08E0     		b	.L157
 2418              	.L156:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR1_DUALMOD    ,
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                multimode->Mode     );
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2419              		.loc 1 1335 0
 2420 0066 7B68     		ldr	r3, [r7, #4]
 2421 0068 9B6A     		ldr	r3, [r3, #40]
 2422 006a 43F02002 		orr	r2, r3, #32
 2423 006e 7B68     		ldr	r3, [r7, #4]
 2424 0070 9A62     		str	r2, [r3, #40]
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 2425              		.loc 1 1337 0
 2426 0072 0123     		movs	r3, #1
 2427 0074 87F83F30 		strb	r3, [r7, #63]
 2428              	.L157:
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2429              		.loc 1 1342 0
 2430 0078 7B68     		ldr	r3, [r7, #4]
 2431 007a 0022     		movs	r2, #0
 2432 007c 83F82420 		strb	r2, [r3, #36]
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 2433              		.loc 1 1345 0
 2434 0080 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 2435              	.L158:
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** } 
ARM GAS  /tmp/ccZpuGm0.s 			page 77


 2436              		.loc 1 1346 0 discriminator 1
 2437 0084 1846     		mov	r0, r3
 2438 0086 4437     		adds	r7, r7, #68
 2439              	.LCFI67:
 2440              		.cfi_def_cfa_offset 4
 2441 0088 BD46     		mov	sp, r7
 2442              	.LCFI68:
 2443              		.cfi_def_cfa_register 13
 2444              		@ sp needed
 2445 008a 5DF8047B 		ldr	r7, [sp], #4
 2446              	.LCFI69:
 2447              		.cfi_restore 7
 2448              		.cfi_def_cfa_offset 0
 2449 008e 7047     		bx	lr
 2450              	.L160:
 2451              		.align	2
 2452              	.L159:
 2453 0090 00280140 		.word	1073817600
 2454 0094 00240140 		.word	1073816576
 2455              		.cfi_endproc
 2456              	.LFE75:
 2458              		.text
 2459              	.Letext0:
 2460              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2461              		.file 4 "/usr/include/newlib/stdint.h"
 2462              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2463              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2464              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2465              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2466              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2467              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 2468              		.file 11 "Drivers/CMSIS/Include/core_cm3.h"
 2469              		.file 12 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/ccZpuGm0.s 			page 78


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc_ex.c
     /tmp/ccZpuGm0.s:19     .text.HAL_ADCEx_Calibration_Start:0000000000000000 $t
     /tmp/ccZpuGm0.s:24     .text.HAL_ADCEx_Calibration_Start:0000000000000000 HAL_ADCEx_Calibration_Start
     /tmp/ccZpuGm0.s:220    .text.HAL_ADCEx_Calibration_Start:0000000000000134 $d
     /tmp/ccZpuGm0.s:225    .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
     /tmp/ccZpuGm0.s:230    .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
     /tmp/ccZpuGm0.s:399    .text.HAL_ADCEx_InjectedStart:0000000000000104 $d
     /tmp/ccZpuGm0.s:405    .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
     /tmp/ccZpuGm0.s:410    .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
     /tmp/ccZpuGm0.s:511    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
     /tmp/ccZpuGm0.s:516    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
     /tmp/ccZpuGm0.s:807    .text.HAL_ADCEx_InjectedPollForConversion:00000000000001c4 $d
     /tmp/ccZpuGm0.s:817    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
     /tmp/ccZpuGm0.s:822    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
     /tmp/ccZpuGm0.s:999    .text.HAL_ADCEx_InjectedStart_IT:0000000000000114 $d
     /tmp/ccZpuGm0.s:1005   .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
     /tmp/ccZpuGm0.s:1010   .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
     /tmp/ccZpuGm0.s:1119   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 $t
     /tmp/ccZpuGm0.s:1124   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 HAL_ADCEx_MultiModeStart_DMA
     /tmp/ccZpuGm0.s:1328   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000154 $d
     /tmp/ccZpuGm0.s:1337   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 $t
     /tmp/ccZpuGm0.s:1342   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 HAL_ADCEx_MultiModeStop_DMA
     /tmp/ccZpuGm0.s:1494   .text.HAL_ADCEx_MultiModeStop_DMA:00000000000000f8 $d
     /tmp/ccZpuGm0.s:1499   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
     /tmp/ccZpuGm0.s:1504   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
     /tmp/ccZpuGm0.s:1588   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 $t
     /tmp/ccZpuGm0.s:1593   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 HAL_ADCEx_MultiModeGetValue
     /tmp/ccZpuGm0.s:1652   .text.HAL_ADCEx_MultiModeGetValue:000000000000003c $d
     /tmp/ccZpuGm0.s:1658   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
     /tmp/ccZpuGm0.s:1663   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
     /tmp/ccZpuGm0.s:1698   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
     /tmp/ccZpuGm0.s:1703   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
     /tmp/ccZpuGm0.s:2335   .text.HAL_ADCEx_InjectedConfigChannel:00000000000003dc $d
     /tmp/ccZpuGm0.s:2342   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 $t
     /tmp/ccZpuGm0.s:2347   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 HAL_ADCEx_MultiModeConfigChannel
     /tmp/ccZpuGm0.s:2453   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000090 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_ConversionStop_Disable
HAL_RCCEx_GetPeriphCLKFreq
ADC_Enable
HAL_GetTick
SystemCoreClock
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
