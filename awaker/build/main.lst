ARM GAS  /tmp/cc2eBQlR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  19              		.align	2
  20              		.global	HAL_TIM_PeriodElapsedCallback
  21              		.thumb
  22              		.thumb_func
  24              	HAL_TIM_PeriodElapsedCallback:
  25              	.LFB63:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   *
   7:Src/main.c    ****   * COPYRIGHT(c) 2016 STMicroelectronics
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/main.c    ****   * are permitted provided that the following conditions are met:
  11:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  13:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/main.c    ****   *      and/or other materials provided with the distribution.
  16:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  18:Src/main.c    ****   *      without specific prior written permission.
  19:Src/main.c    ****   *
  20:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/main.c    ****   *
  31:Src/main.c    ****   ******************************************************************************
  32:Src/main.c    ****   */
ARM GAS  /tmp/cc2eBQlR.s 			page 2


  33:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  34:Src/main.c    **** #include "stm32f1xx_hal.h"
  35:Src/main.c    **** #include "adc.h"
  36:Src/main.c    **** #include "rtc.h"
  37:Src/main.c    **** #include "tim.h"
  38:Src/main.c    **** #include "usart.h"
  39:Src/main.c    **** #include "gpio.h"
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE BEGIN Includes */
  42:Src/main.c    **** #include "hd44780.h"
  43:Src/main.c    **** #include "controls.h"
  44:Src/main.c    **** #include "app.h"
  45:Src/main.c    **** #include "speaker.h"
  46:Src/main.c    **** /* USER CODE END Includes */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  56:Src/main.c    **** void SystemClock_Config(void);
  57:Src/main.c    **** void Error_Handler(void);
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE BEGIN PFP */
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PFP */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN 0 */
  65:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  66:Src/main.c    **** {
  27              		.loc 1 66 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  67:Src/main.c    ****     //if(htim == &htim2)
  68:Src/main.c    ****     //{
  69:Src/main.c    **** 	speaker_update();
  43              		.loc 1 69 0
  44 0008 FFF7FEFF 		bl	speaker_update
  70:Src/main.c    **** 	//}
  71:Src/main.c    **** }
ARM GAS  /tmp/cc2eBQlR.s 			page 3


  45              		.loc 1 71 0
  46 000c 0837     		adds	r7, r7, #8
  47              	.LCFI3:
  48              		.cfi_def_cfa_offset 8
  49 000e BD46     		mov	sp, r7
  50              	.LCFI4:
  51              		.cfi_def_cfa_register 13
  52              		@ sp needed
  53 0010 80BD     		pop	{r7, pc}
  54              		.cfi_endproc
  55              	.LFE63:
  57 0012 00BF     		.section	.rodata
  58              		.align	2
  59              	.LC1:
  60 0000 48656C6C 		.ascii	"Hello World! \000"
  60      6F20576F 
  60      726C6421 
  60      2000
  61 000e 0000     		.align	2
  62              	.LC2:
  63 0010 53746172 		.ascii	"Started!\000"
  63      74656421 
  63      00
  64 0019 000000   		.align	2
  65              	.LC0:
  66 001c 00       		.byte	0
  67 001d 00       		.byte	0
  68 001e 0A       		.byte	10
  69 001f 00       		.byte	0
  70 0020 11       		.byte	17
  71 0021 0E       		.byte	14
  72 0022 00       		.byte	0
  73 0023 00       		.byte	0
  74              		.section	.text.main,"ax",%progbits
  75              		.align	2
  76              		.global	main
  77              		.thumb
  78              		.thumb_func
  80              	main:
  81              	.LFB64:
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** int main(void)
  76:Src/main.c    **** {
  82              		.loc 1 76 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 16
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              	.LCFI5:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 8AB0     		sub	sp, sp, #40
  92              	.LCFI6:
  93              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cc2eBQlR.s 			page 4


  94 0004 06AF     		add	r7, sp, #24
  95              	.LCFI7:
  96              		.cfi_def_cfa 7, 24
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* USER CODE BEGIN 1 */
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* USER CODE END 1 */
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  85:Src/main.c    ****   HAL_Init();
  97              		.loc 1 85 0
  98 0006 FFF7FEFF 		bl	HAL_Init
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* Configure the system clock */
  88:Src/main.c    ****   SystemClock_Config();
  99              		.loc 1 88 0
 100 000a FFF7FEFF 		bl	SystemClock_Config
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* Initialize all configured peripherals */
  91:Src/main.c    ****   MX_GPIO_Init();
 101              		.loc 1 91 0
 102 000e FFF7FEFF 		bl	MX_GPIO_Init
  92:Src/main.c    ****   MX_RTC_Init();
 103              		.loc 1 92 0
 104 0012 FFF7FEFF 		bl	MX_RTC_Init
  93:Src/main.c    ****   MX_ADC1_Init();
 105              		.loc 1 93 0
 106 0016 FFF7FEFF 		bl	MX_ADC1_Init
  94:Src/main.c    ****   MX_TIM4_Init();
 107              		.loc 1 94 0
 108 001a FFF7FEFF 		bl	MX_TIM4_Init
  95:Src/main.c    ****   MX_TIM2_Init();
 109              		.loc 1 95 0
 110 001e FFF7FEFF 		bl	MX_TIM2_Init
  96:Src/main.c    ****   MX_USART1_UART_Init();
 111              		.loc 1 96 0
 112 0022 FFF7FEFF 		bl	MX_USART1_UART_Init
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE BEGIN 2 */
  99:Src/main.c    ****   char udg[] = { 0x00, 0x00, 0x0a, 0x00, 0x11, 0x0e, 0x00, 0x00 };
 113              		.loc 1 99 0
 114 0026 334A     		ldr	r2, .L5
 115 0028 3B1D     		adds	r3, r7, #4
 116 002a 1068     		ldr	r0, [r2]	@ unaligned
 117 002c 5168     		ldr	r1, [r2, #4]	@ unaligned
 118 002e 03C3     		stmia	r3!, {r0, r1}
 100:Src/main.c    ****   hd44780_init(GPIOA, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3,
 119              		.loc 1 100 0
 120 0030 0823     		movs	r3, #8
 121 0032 0093     		str	r3, [sp]
 122 0034 1023     		movs	r3, #16
 123 0036 0193     		str	r3, [sp, #4]
 124 0038 2023     		movs	r3, #32
 125 003a 0293     		str	r3, [sp, #8]
 126 003c 4023     		movs	r3, #64
ARM GAS  /tmp/cc2eBQlR.s 			page 5


 127 003e 0393     		str	r3, [sp, #12]
 128 0040 0823     		movs	r3, #8
 129 0042 0493     		str	r3, [sp, #16]
 130 0044 0023     		movs	r3, #0
 131 0046 0593     		str	r3, [sp, #20]
 132 0048 2B48     		ldr	r0, .L5+4
 133 004a 0121     		movs	r1, #1
 134 004c 0222     		movs	r2, #2
 135 004e 0423     		movs	r3, #4
 136 0050 FFF7FEFF 		bl	hd44780_init
 101:Src/main.c    **** 			GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, HD44780_LINES_2,
 102:Src/main.c    **** 			HD44780_FONT_5x8);
 103:Src/main.c    ****   hd44780_brightness(1);
 137              		.loc 1 103 0
 138 0054 0120     		movs	r0, #1
 139 0056 FFF7FEFF 		bl	hd44780_brightness
 104:Src/main.c    ****   hd44780_cgram(0, udg);
 140              		.loc 1 104 0
 141 005a 3B1D     		adds	r3, r7, #4
 142 005c 0020     		movs	r0, #0
 143 005e 1946     		mov	r1, r3
 144 0060 FFF7FEFF 		bl	hd44780_cgram
 105:Src/main.c    ****   hd44780_position(0, 1);
 145              		.loc 1 105 0
 146 0064 0020     		movs	r0, #0
 147 0066 0121     		movs	r1, #1
 148 0068 FFF7FEFF 		bl	hd44780_position
 106:Src/main.c    ****   hd44780_print("Hello World! ");
 149              		.loc 1 106 0
 150 006c 2348     		ldr	r0, .L5+8
 151 006e FFF7FEFF 		bl	hd44780_print
 107:Src/main.c    ****   hd44780_put(0);
 152              		.loc 1 107 0
 153 0072 0020     		movs	r0, #0
 154 0074 FFF7FEFF 		bl	hd44780_put
 108:Src/main.c    ****   hd44780_display(true, false, false);
 155              		.loc 1 108 0
 156 0078 0120     		movs	r0, #1
 157 007a 0021     		movs	r1, #0
 158 007c 0022     		movs	r2, #0
 159 007e FFF7FEFF 		bl	hd44780_display
 109:Src/main.c    ****   HAL_Delay(300);
 160              		.loc 1 109 0
 161 0082 4FF49670 		mov	r0, #300
 162 0086 FFF7FEFF 		bl	HAL_Delay
 110:Src/main.c    ****   hd44780_clear();
 163              		.loc 1 110 0
 164 008a FFF7FEFF 		bl	hd44780_clear
 111:Src/main.c    ****   HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 165              		.loc 1 111 0
 166 008e 1C48     		ldr	r0, .L5+12
 167 0090 0021     		movs	r1, #0
 168 0092 FFF7FEFF 		bl	HAL_TIM_Encoder_Start
 112:Src/main.c    **** 
 113:Src/main.c    ****   controls_init();
 169              		.loc 1 113 0
 170 0096 FFF7FEFF 		bl	controls_init
ARM GAS  /tmp/cc2eBQlR.s 			page 6


 114:Src/main.c    ****   controls_set_buttons_handler(&apps_input_buttons);
 171              		.loc 1 114 0
 172 009a 1A48     		ldr	r0, .L5+16
 173 009c FFF7FEFF 		bl	controls_set_buttons_handler
 115:Src/main.c    ****   controls_set_encoder_handler(0, &apps_input_encoder);
 174              		.loc 1 115 0
 175 00a0 0020     		movs	r0, #0
 176 00a2 1949     		ldr	r1, .L5+20
 177 00a4 FFF7FEFF 		bl	controls_set_encoder_handler
 116:Src/main.c    **** 
 117:Src/main.c    ****   clock_init();
 178              		.loc 1 117 0
 179 00a8 FFF7FEFF 		bl	clock_init
 118:Src/main.c    ****   
 119:Src/main.c    ****   apps_init();
 180              		.loc 1 119 0
 181 00ac FFF7FEFF 		bl	apps_init
 120:Src/main.c    ****   app_switch(APP_CLOCK_ID);
 182              		.loc 1 120 0
 183 00b0 0020     		movs	r0, #0
 184 00b2 FFF7FEFF 		bl	app_switch
 121:Src/main.c    ****   printf("Started!\n");
 185              		.loc 1 121 0
 186 00b6 1548     		ldr	r0, .L5+24
 187 00b8 FFF7FEFF 		bl	puts
 122:Src/main.c    ****   /* USER CODE END 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Infinite loop */
 125:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 126:Src/main.c    ****   uint32_t i = 0;
 188              		.loc 1 126 0
 189 00bc 0023     		movs	r3, #0
 190 00be FB60     		str	r3, [r7, #12]
 191              	.L4:
 127:Src/main.c    ****   while (1)
 128:Src/main.c    ****   {
 129:Src/main.c    ****       i++;
 192              		.loc 1 129 0
 193 00c0 FB68     		ldr	r3, [r7, #12]
 194 00c2 0133     		adds	r3, r3, #1
 195 00c4 FB60     		str	r3, [r7, #12]
 130:Src/main.c    ****       if(i % 100 == 1)
 196              		.loc 1 130 0
 197 00c6 FA68     		ldr	r2, [r7, #12]
 198 00c8 114B     		ldr	r3, .L5+28
 199 00ca A3FB0213 		umull	r1, r3, r3, r2
 200 00ce 5B09     		lsrs	r3, r3, #5
 201 00d0 6421     		movs	r1, #100
 202 00d2 01FB03F3 		mul	r3, r1, r3
 203 00d6 D31A     		subs	r3, r2, r3
 204 00d8 012B     		cmp	r3, #1
 205 00da 01D1     		bne	.L3
 131:Src/main.c    ****       {
 132:Src/main.c    **** 	  apps_draw();
 206              		.loc 1 132 0
 207 00dc FFF7FEFF 		bl	apps_draw
 208              	.L3:
ARM GAS  /tmp/cc2eBQlR.s 			page 7


 133:Src/main.c    ****       }
 134:Src/main.c    ****       apps_update();
 209              		.loc 1 134 0
 210 00e0 FFF7FEFF 		bl	apps_update
 135:Src/main.c    ****       clock_update();
 211              		.loc 1 135 0
 212 00e4 FFF7FEFF 		bl	clock_update
 136:Src/main.c    ****       controls_update();
 213              		.loc 1 136 0
 214 00e8 FFF7FEFF 		bl	controls_update
 137:Src/main.c    ****       HAL_Delay(1);
 215              		.loc 1 137 0
 216 00ec 0120     		movs	r0, #1
 217 00ee FFF7FEFF 		bl	HAL_Delay
 138:Src/main.c    ****   /* USER CODE END WHILE */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE BEGIN 3 */
 141:Src/main.c    **** 
 142:Src/main.c    ****   }
 218              		.loc 1 142 0
 219 00f2 E5E7     		b	.L4
 220              	.L6:
 221              		.align	2
 222              	.L5:
 223 00f4 1C000000 		.word	.LC0
 224 00f8 00080140 		.word	1073809408
 225 00fc 00000000 		.word	.LC1
 226 0100 00000000 		.word	htim4
 227 0104 00000000 		.word	apps_input_buttons
 228 0108 00000000 		.word	apps_input_encoder
 229 010c 10000000 		.word	.LC2
 230 0110 1F85EB51 		.word	1374389535
 231              		.cfi_endproc
 232              	.LFE64:
 234              		.section	.text.SystemClock_Config,"ax",%progbits
 235              		.align	2
 236              		.global	SystemClock_Config
 237              		.thumb
 238              		.thumb_func
 240              	SystemClock_Config:
 241              	.LFB65:
 143:Src/main.c    ****   /* USER CODE END 3 */
 144:Src/main.c    **** 
 145:Src/main.c    **** }
 146:Src/main.c    **** 
 147:Src/main.c    **** /** System Clock Configuration
 148:Src/main.c    **** */
 149:Src/main.c    **** void SystemClock_Config(void)
 150:Src/main.c    **** {
 242              		.loc 1 150 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 80
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246 0000 80B5     		push	{r7, lr}
 247              	.LCFI8:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
ARM GAS  /tmp/cc2eBQlR.s 			page 8


 250              		.cfi_offset 14, -4
 251 0002 94B0     		sub	sp, sp, #80
 252              	.LCFI9:
 253              		.cfi_def_cfa_offset 88
 254 0004 00AF     		add	r7, sp, #0
 255              	.LCFI10:
 256              		.cfi_def_cfa_register 7
 151:Src/main.c    **** 
 152:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 153:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 154:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 155:Src/main.c    **** 
 156:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 257              		.loc 1 156 0
 258 0006 0923     		movs	r3, #9
 259 0008 BB62     		str	r3, [r7, #40]
 157:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 260              		.loc 1 157 0
 261 000a 4FF48033 		mov	r3, #65536
 262 000e FB62     		str	r3, [r7, #44]
 158:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 263              		.loc 1 158 0
 264 0010 0023     		movs	r3, #0
 265 0012 3B63     		str	r3, [r7, #48]
 159:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 266              		.loc 1 159 0
 267 0014 0123     		movs	r3, #1
 268 0016 3B64     		str	r3, [r7, #64]
 160:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 269              		.loc 1 160 0
 270 0018 0223     		movs	r3, #2
 271 001a 7B64     		str	r3, [r7, #68]
 161:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 272              		.loc 1 161 0
 273 001c 4FF48033 		mov	r3, #65536
 274 0020 BB64     		str	r3, [r7, #72]
 162:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 275              		.loc 1 162 0
 276 0022 4FF46013 		mov	r3, #3670016
 277 0026 FB64     		str	r3, [r7, #76]
 163:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 278              		.loc 1 163 0
 279 0028 07F12803 		add	r3, r7, #40
 280 002c 1846     		mov	r0, r3
 281 002e FFF7FEFF 		bl	HAL_RCC_OscConfig
 282 0032 0346     		mov	r3, r0
 283 0034 002B     		cmp	r3, #0
 284 0036 01D0     		beq	.L8
 164:Src/main.c    ****   {
 165:Src/main.c    ****     Error_Handler();
 285              		.loc 1 165 0
 286 0038 FFF7FEFF 		bl	Error_Handler
 287              	.L8:
 166:Src/main.c    ****   }
 167:Src/main.c    **** 
 168:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 288              		.loc 1 168 0
ARM GAS  /tmp/cc2eBQlR.s 			page 9


 289 003c 0F23     		movs	r3, #15
 290 003e 7B61     		str	r3, [r7, #20]
 169:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 170:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 291              		.loc 1 170 0
 292 0040 0223     		movs	r3, #2
 293 0042 BB61     		str	r3, [r7, #24]
 171:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 294              		.loc 1 171 0
 295 0044 0023     		movs	r3, #0
 296 0046 FB61     		str	r3, [r7, #28]
 172:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 297              		.loc 1 172 0
 298 0048 4FF48063 		mov	r3, #1024
 299 004c 3B62     		str	r3, [r7, #32]
 173:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 300              		.loc 1 173 0
 301 004e 0023     		movs	r3, #0
 302 0050 7B62     		str	r3, [r7, #36]
 174:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 303              		.loc 1 174 0
 304 0052 07F11403 		add	r3, r7, #20
 305 0056 1846     		mov	r0, r3
 306 0058 0221     		movs	r1, #2
 307 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 308 005e 0346     		mov	r3, r0
 309 0060 002B     		cmp	r3, #0
 310 0062 01D0     		beq	.L9
 175:Src/main.c    ****   {
 176:Src/main.c    ****     Error_Handler();
 311              		.loc 1 176 0
 312 0064 FFF7FEFF 		bl	Error_Handler
 313              	.L9:
 177:Src/main.c    ****   }
 178:Src/main.c    **** 
 179:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 314              		.loc 1 179 0
 315 0068 0323     		movs	r3, #3
 316 006a 7B60     		str	r3, [r7, #4]
 180:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 317              		.loc 1 180 0
 318 006c 4FF40073 		mov	r3, #512
 319 0070 BB60     		str	r3, [r7, #8]
 181:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 320              		.loc 1 181 0
 321 0072 4FF40043 		mov	r3, #32768
 322 0076 FB60     		str	r3, [r7, #12]
 182:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 323              		.loc 1 182 0
 324 0078 3B1D     		adds	r3, r7, #4
 325 007a 1846     		mov	r0, r3
 326 007c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 327 0080 0346     		mov	r3, r0
 328 0082 002B     		cmp	r3, #0
 329 0084 01D0     		beq	.L10
 183:Src/main.c    ****   {
 184:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cc2eBQlR.s 			page 10


 330              		.loc 1 184 0
 331 0086 FFF7FEFF 		bl	Error_Handler
 332              	.L10:
 185:Src/main.c    ****   }
 186:Src/main.c    **** 
 187:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 333              		.loc 1 187 0
 334 008a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 335 008e 0246     		mov	r2, r0
 336 0090 094B     		ldr	r3, .L11
 337 0092 A3FB0223 		umull	r2, r3, r3, r2
 338 0096 9B09     		lsrs	r3, r3, #6
 339 0098 1846     		mov	r0, r3
 340 009a FFF7FEFF 		bl	HAL_SYSTICK_Config
 188:Src/main.c    **** 
 189:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 341              		.loc 1 189 0
 342 009e 0420     		movs	r0, #4
 343 00a0 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 192:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 344              		.loc 1 192 0
 345 00a4 4FF0FF30 		mov	r0, #-1
 346 00a8 0021     		movs	r1, #0
 347 00aa 0022     		movs	r2, #0
 348 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 193:Src/main.c    **** }
 349              		.loc 1 193 0
 350 00b0 5037     		adds	r7, r7, #80
 351              	.LCFI11:
 352              		.cfi_def_cfa_offset 8
 353 00b2 BD46     		mov	sp, r7
 354              	.LCFI12:
 355              		.cfi_def_cfa_register 13
 356              		@ sp needed
 357 00b4 80BD     		pop	{r7, pc}
 358              	.L12:
 359 00b6 00BF     		.align	2
 360              	.L11:
 361 00b8 D34D6210 		.word	274877907
 362              		.cfi_endproc
 363              	.LFE65:
 365              		.section	.text.Error_Handler,"ax",%progbits
 366              		.align	2
 367              		.global	Error_Handler
 368              		.thumb
 369              		.thumb_func
 371              	Error_Handler:
 372              	.LFB66:
 194:Src/main.c    **** 
 195:Src/main.c    **** /* USER CODE BEGIN 4 */
 196:Src/main.c    **** 
 197:Src/main.c    **** /* USER CODE END 4 */
 198:Src/main.c    **** 
 199:Src/main.c    **** /**
 200:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
ARM GAS  /tmp/cc2eBQlR.s 			page 11


 201:Src/main.c    ****   * @param  None
 202:Src/main.c    ****   * @retval None
 203:Src/main.c    ****   */
 204:Src/main.c    **** void Error_Handler(void)
 205:Src/main.c    **** {
 373              		.loc 1 205 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 378 0000 80B4     		push	{r7}
 379              	.LCFI13:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 7, -4
 382 0002 00AF     		add	r7, sp, #0
 383              	.LCFI14:
 384              		.cfi_def_cfa_register 7
 385              	.L14:
 206:Src/main.c    ****   /* USER CODE BEGIN Error_Handler */
 207:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 208:Src/main.c    ****   while(1) 
 209:Src/main.c    ****   {
 210:Src/main.c    ****   }
 386              		.loc 1 210 0 discriminator 1
 387 0004 FEE7     		b	.L14
 388              		.cfi_endproc
 389              	.LFE66:
 391 0006 00BF     		.text
 392              	.Letext0:
 393              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 394              		.file 3 "/usr/include/newlib/stdint.h"
 395              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 396              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 397              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 398              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 399              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 400              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 401              		.file 10 "hd44780/hd44780.h"
 402              		.file 11 "Drivers/CMSIS/Include/core_cm3.h"
 403              		.file 12 "Inc/tim.h"
ARM GAS  /tmp/cc2eBQlR.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc2eBQlR.s:19     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc2eBQlR.s:24     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc2eBQlR.s:58     .rodata:0000000000000000 $d
     /tmp/cc2eBQlR.s:75     .text.main:0000000000000000 $t
     /tmp/cc2eBQlR.s:80     .text.main:0000000000000000 main
     /tmp/cc2eBQlR.s:240    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc2eBQlR.s:223    .text.main:00000000000000f4 $d
     /tmp/cc2eBQlR.s:235    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc2eBQlR.s:371    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc2eBQlR.s:361    .text.SystemClock_Config:00000000000000b8 $d
     /tmp/cc2eBQlR.s:366    .text.Error_Handler:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
speaker_update
HAL_Init
MX_GPIO_Init
MX_RTC_Init
MX_ADC1_Init
MX_TIM4_Init
MX_TIM2_Init
MX_USART1_UART_Init
hd44780_init
hd44780_brightness
hd44780_cgram
hd44780_position
hd44780_print
hd44780_put
hd44780_display
HAL_Delay
hd44780_clear
HAL_TIM_Encoder_Start
controls_init
controls_set_buttons_handler
controls_set_encoder_handler
clock_init
apps_init
app_switch
puts
apps_draw
apps_update
clock_update
controls_update
htim4
apps_input_buttons
apps_input_encoder
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
