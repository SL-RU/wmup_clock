ARM GAS  /tmp/ccLVxKvm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_ADC_Init,"ax",%progbits
  19              		.align	2
  20              		.global	HAL_ADC_Init
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADC_Init:
  25              	.LFB63:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @version V1.0.4
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @date    29-April-2016
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
ARM GAS  /tmp/ccLVxKvm.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
ARM GAS  /tmp/ccLVxKvm.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
ARM GAS  /tmp/ccLVxKvm.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/ccLVxKvm.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     @endverbatim
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /tmp/ccLVxKvm.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      without specific prior written permission.
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************  
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              ((uint32_t) 2)
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             ((uint32_t) 2)
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ((uint32_t) 1)
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
ARM GAS  /tmp/ccLVxKvm.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccLVxKvm.s 			page 8


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  27              		.loc 1 375 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 48
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 8CB0     		sub	sp, sp, #48
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 56
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  43              		.loc 1 376 0
  44 0008 0023     		movs	r3, #0
  45 000a 87F82F30 		strb	r3, [r7, #47]
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0;
  46              		.loc 1 377 0
  47 000e 0023     		movs	r3, #0
  48 0010 BB62     		str	r3, [r7, #40]
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0;
  49              		.loc 1 378 0
  50 0012 0023     		movs	r3, #0
  51 0014 3B62     		str	r3, [r7, #32]
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0;
  52              		.loc 1 379 0
  53 0016 0023     		movs	r3, #0
  54 0018 7B62     		str	r3, [r7, #36]
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
  55              		.loc 1 382 0
  56 001a 7B68     		ldr	r3, [r7, #4]
  57 001c 002B     		cmp	r3, #0
  58 001e 01D1     		bne	.L2
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
  59              		.loc 1 384 0
  60 0020 0123     		movs	r3, #1
  61 0022 E3E0     		b	.L3
  62              	.L2:
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
  63              		.loc 1 394 0
ARM GAS  /tmp/ccLVxKvm.s 			page 9


  64 0024 7B68     		ldr	r3, [r7, #4]
  65 0026 9B68     		ldr	r3, [r3, #8]
  66 0028 002B     		cmp	r3, #0
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  67              		.loc 1 411 0
  68 002a 7B68     		ldr	r3, [r7, #4]
  69 002c 9B6A     		ldr	r3, [r3, #40]
  70 002e 002B     		cmp	r3, #0
  71 0030 09D1     		bne	.L5
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  72              		.loc 1 414 0
  73 0032 7B68     		ldr	r3, [r7, #4]
  74 0034 0022     		movs	r2, #0
  75 0036 DA62     		str	r2, [r3, #44]
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  76              		.loc 1 417 0
  77 0038 7B68     		ldr	r3, [r7, #4]
  78 003a 0022     		movs	r2, #0
  79 003c 83F82420 		strb	r2, [r3, #36]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  80              		.loc 1 420 0
  81 0040 7868     		ldr	r0, [r7, #4]
  82 0042 FFF7FEFF 		bl	HAL_ADC_MspInit
  83              	.L5:
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  84              		.loc 1 428 0
  85 0046 7868     		ldr	r0, [r7, #4]
  86 0048 FFF7FEFF 		bl	ADC_ConversionStop_Disable
ARM GAS  /tmp/ccLVxKvm.s 			page 10


  87 004c 0346     		mov	r3, r0
  88 004e 87F82F30 		strb	r3, [r7, #47]
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  89              		.loc 1 433 0
  90 0052 7B68     		ldr	r3, [r7, #4]
  91 0054 9B6A     		ldr	r3, [r3, #40]
  92 0056 03F01003 		and	r3, r3, #16
  93 005a 002B     		cmp	r3, #0
  94 005c 40F0BB80 		bne	.L6
  95              		.loc 1 433 0 is_stmt 0 discriminator 1
  96 0060 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  97 0064 002B     		cmp	r3, #0
  98 0066 40F0B680 		bne	.L6
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
  99              		.loc 1 437 0 is_stmt 1
 100 006a 7B68     		ldr	r3, [r7, #4]
 101 006c 9B6A     		ldr	r3, [r3, #40]
 102 006e 23F48853 		bic	r3, r3, #4352
 103 0072 23F00203 		bic	r3, r3, #2
 104 0076 43F00202 		orr	r2, r3, #2
 105 007a 7B68     		ldr	r3, [r7, #4]
 106 007c 9A62     		str	r2, [r3, #40]
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                               |
 107              		.loc 1 453 0
 108 007e 7B68     		ldr	r3, [r7, #4]
 109 0080 5A68     		ldr	r2, [r3, #4]
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 110              		.loc 1 454 0
 111 0082 7B68     		ldr	r3, [r7, #4]
 112 0084 DB69     		ldr	r3, [r3, #28]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 113              		.loc 1 453 0
 114 0086 1A43     		orrs	r2, r2, r3
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 115              		.loc 1 455 0
ARM GAS  /tmp/ccLVxKvm.s 			page 11


 116 0088 7B68     		ldr	r3, [r7, #4]
 117 008a D968     		ldr	r1, [r3, #12]
 118 008c 0223     		movs	r3, #2
 119 008e FB61     		str	r3, [r7, #28]
 120              	.LBB28:
 121              	.LBB29:
 122              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccLVxKvm.s 			page 12


  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccLVxKvm.s 			page 13


 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
ARM GAS  /tmp/ccLVxKvm.s 			page 14


 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccLVxKvm.s 			page 15


 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccLVxKvm.s 			page 16


 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
ARM GAS  /tmp/ccLVxKvm.s 			page 17


 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
ARM GAS  /tmp/ccLVxKvm.s 			page 18


 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccLVxKvm.s 			page 19


 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
ARM GAS  /tmp/ccLVxKvm.s 			page 20


 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 123              		.loc 2 531 0
 124 0090 FB69     		ldr	r3, [r7, #28]
 125              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 126 0092 93FAA3F3 		rbit r3, r3
 127              	@ 0 "" 2
 128              		.thumb
 129 0096 BB61     		str	r3, [r7, #24]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 130              		.loc 2 544 0
 131 0098 BB69     		ldr	r3, [r7, #24]
 132              	.LBE29:
 133              	.LBE28:
 134              		.loc 1 455 0
 135 009a B3FA83F3 		clz	r3, r3
 136 009e 01FA03F3 		lsl	r3, r1, r3
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 137              		.loc 1 454 0
 138 00a2 1343     		orrs	r3, r3, r2
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 139              		.loc 1 453 0
ARM GAS  /tmp/ccLVxKvm.s 			page 21


 140 00a4 3A6A     		ldr	r2, [r7, #32]
 141 00a6 1343     		orrs	r3, r3, r2
 142 00a8 3B62     		str	r3, [r7, #32]
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 143              		.loc 1 461 0
 144 00aa 7B68     		ldr	r3, [r7, #4]
 145 00ac 9B68     		ldr	r3, [r3, #8]
 146 00ae B3F5807F 		cmp	r3, #256
 147 00b2 03D0     		beq	.L8
 148              		.loc 1 461 0 is_stmt 0 discriminator 2
 149 00b4 7B68     		ldr	r3, [r7, #4]
 150 00b6 9B68     		ldr	r3, [r3, #8]
 151 00b8 012B     		cmp	r3, #1
 152 00ba 02D1     		bne	.L9
 153              	.L8:
 154              		.loc 1 461 0 discriminator 3
 155 00bc 4FF48073 		mov	r3, #256
 156 00c0 00E0     		b	.L10
 157              	.L9:
 158              		.loc 1 461 0 discriminator 4
 159 00c2 0023     		movs	r3, #0
 160              	.L10:
 161              		.loc 1 461 0 discriminator 6
 162 00c4 BA6A     		ldr	r2, [r7, #40]
 163 00c6 1343     		orrs	r3, r3, r2
 164 00c8 BB62     		str	r3, [r7, #40]
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 165              		.loc 1 466 0 is_stmt 1 discriminator 6
 166 00ca 7B68     		ldr	r3, [r7, #4]
 167 00cc 5B69     		ldr	r3, [r3, #20]
 168 00ce 012B     		cmp	r3, #1
 169 00d0 24D1     		bne	.L11
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 170              		.loc 1 468 0
 171 00d2 7B68     		ldr	r3, [r7, #4]
 172 00d4 DB68     		ldr	r3, [r3, #12]
 173 00d6 002B     		cmp	r3, #0
 174 00d8 14D1     		bne	.L12
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 175              		.loc 1 472 0
 176 00da 7B68     		ldr	r3, [r7, #4]
 177 00dc 9B69     		ldr	r3, [r3, #24]
 178 00de 5A1E     		subs	r2, r3, #1
 179 00e0 4FF46043 		mov	r3, #57344
ARM GAS  /tmp/ccLVxKvm.s 			page 22


 180 00e4 7B61     		str	r3, [r7, #20]
 181              	.LBB30:
 182              	.LBB31:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 183              		.loc 2 531 0
 184 00e6 7B69     		ldr	r3, [r7, #20]
 185              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 186 00e8 93FAA3F3 		rbit r3, r3
 187              	@ 0 "" 2
 188              		.thumb
 189 00ec 3B61     		str	r3, [r7, #16]
 190              		.loc 2 544 0
 191 00ee 3B69     		ldr	r3, [r7, #16]
 192              	.LBE31:
 193              	.LBE30:
 194              		.loc 1 472 0
 195 00f0 B3FA83F3 		clz	r3, r3
 196 00f4 02FA03F3 		lsl	r3, r2, r3
 197 00f8 43F40063 		orr	r3, r3, #2048
 198 00fc BA6A     		ldr	r2, [r7, #40]
 199 00fe 1343     		orrs	r3, r3, r2
 200 0100 BB62     		str	r3, [r7, #40]
 201 0102 0BE0     		b	.L11
 202              	.L12:
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 203              		.loc 1 481 0
 204 0104 7B68     		ldr	r3, [r7, #4]
 205 0106 9B6A     		ldr	r3, [r3, #40]
 206 0108 43F02002 		orr	r2, r3, #32
 207 010c 7B68     		ldr	r3, [r7, #4]
 208 010e 9A62     		str	r2, [r3, #40]
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 209              		.loc 1 484 0
 210 0110 7B68     		ldr	r3, [r7, #4]
 211 0112 DB6A     		ldr	r3, [r3, #44]
 212 0114 43F00102 		orr	r2, r3, #1
 213 0118 7B68     		ldr	r3, [r7, #4]
 214 011a DA62     		str	r2, [r3, #44]
 215              	.L11:
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 216              		.loc 1 489 0
 217 011c 7B68     		ldr	r3, [r7, #4]
 218 011e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLVxKvm.s 			page 23


 219 0120 7A68     		ldr	r2, [r7, #4]
 220 0122 1268     		ldr	r2, [r2]
 221 0124 5268     		ldr	r2, [r2, #4]
 222 0126 22F46941 		bic	r1, r2, #59648
 223 012a BA6A     		ldr	r2, [r7, #40]
 224 012c 0A43     		orrs	r2, r2, r1
 225 012e 5A60     		str	r2, [r3, #4]
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 226              		.loc 1 496 0
 227 0130 7B68     		ldr	r3, [r7, #4]
 228 0132 1A68     		ldr	r2, [r3]
 229 0134 7B68     		ldr	r3, [r7, #4]
 230 0136 1B68     		ldr	r3, [r3]
 231 0138 9968     		ldr	r1, [r3, #8]
 232 013a 2E4B     		ldr	r3, .L20
 233 013c 0B40     		ands	r3, r3, r1
 234 013e 396A     		ldr	r1, [r7, #32]
 235 0140 0B43     		orrs	r3, r3, r1
 236 0142 9360     		str	r3, [r2, #8]
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 237              		.loc 1 512 0
 238 0144 7B68     		ldr	r3, [r7, #4]
 239 0146 9B68     		ldr	r3, [r3, #8]
 240 0148 B3F5807F 		cmp	r3, #256
 241 014c 03D0     		beq	.L14
 242              		.loc 1 512 0 is_stmt 0 discriminator 1
 243 014e 7B68     		ldr	r3, [r7, #4]
 244 0150 9B68     		ldr	r3, [r3, #8]
 245 0152 012B     		cmp	r3, #1
 246 0154 0FD1     		bne	.L15
 247              	.L14:
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 248              		.loc 1 514 0 is_stmt 1
 249 0156 7B68     		ldr	r3, [r7, #4]
 250 0158 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccLVxKvm.s 			page 24


 251 015a 5A1E     		subs	r2, r3, #1
 252 015c 4FF47003 		mov	r3, #15728640
 253 0160 FB60     		str	r3, [r7, #12]
 254              	.LBB32:
 255              	.LBB33:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 256              		.loc 2 531 0
 257 0162 FB68     		ldr	r3, [r7, #12]
 258              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 259 0164 93FAA3F3 		rbit r3, r3
 260              	@ 0 "" 2
 261              		.thumb
 262 0168 BB60     		str	r3, [r7, #8]
 263              		.loc 2 544 0
 264 016a BB68     		ldr	r3, [r7, #8]
 265              	.LBE33:
 266              	.LBE32:
 267              		.loc 1 514 0
 268 016c B3FA83F3 		clz	r3, r3
 269 0170 02FA03F3 		lsl	r3, r2, r3
 270 0174 7B62     		str	r3, [r7, #36]
 271              	.L15:
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 272              		.loc 1 517 0
 273 0176 7B68     		ldr	r3, [r7, #4]
 274 0178 1B68     		ldr	r3, [r3]
 275 017a 7A68     		ldr	r2, [r7, #4]
 276 017c 1268     		ldr	r2, [r2]
 277 017e D26A     		ldr	r2, [r2, #44]
 278 0180 22F47001 		bic	r1, r2, #15728640
 279 0184 7A6A     		ldr	r2, [r7, #36]
 280 0186 0A43     		orrs	r2, r2, r1
 281 0188 DA62     		str	r2, [r3, #44]
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 282              		.loc 1 527 0
 283 018a 7B68     		ldr	r3, [r7, #4]
 284 018c 1B68     		ldr	r3, [r3]
 285 018e 9A68     		ldr	r2, [r3, #8]
 286 0190 194B     		ldr	r3, .L20+4
 287 0192 1340     		ands	r3, r3, r2
 288 0194 3A6A     		ldr	r2, [r7, #32]
 289 0196 9342     		cmp	r3, r2
 290 0198 0BD1     		bne	.L17
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
ARM GAS  /tmp/ccLVxKvm.s 			page 25


 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 291              		.loc 1 534 0
 292 019a 7B68     		ldr	r3, [r7, #4]
 293 019c 0022     		movs	r2, #0
 294 019e DA62     		str	r2, [r3, #44]
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 295              		.loc 1 537 0
 296 01a0 7B68     		ldr	r3, [r7, #4]
 297 01a2 9B6A     		ldr	r3, [r3, #40]
 298 01a4 23F00303 		bic	r3, r3, #3
 299 01a8 43F00102 		orr	r2, r3, #1
 300 01ac 7B68     		ldr	r3, [r7, #4]
 301 01ae 9A62     		str	r2, [r3, #40]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 302              		.loc 1 527 0
 303 01b0 1AE0     		b	.L19
 304              	.L17:
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 305              		.loc 1 544 0
 306 01b2 7B68     		ldr	r3, [r7, #4]
 307 01b4 9B6A     		ldr	r3, [r3, #40]
 308 01b6 23F01203 		bic	r3, r3, #18
 309 01ba 43F01002 		orr	r2, r3, #16
 310 01be 7B68     		ldr	r3, [r7, #4]
 311 01c0 9A62     		str	r2, [r3, #40]
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 312              		.loc 1 549 0
 313 01c2 7B68     		ldr	r3, [r7, #4]
 314 01c4 DB6A     		ldr	r3, [r3, #44]
 315 01c6 43F00102 		orr	r2, r3, #1
 316 01ca 7B68     		ldr	r3, [r7, #4]
 317 01cc DA62     		str	r2, [r3, #44]
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 318              		.loc 1 551 0
 319 01ce 0123     		movs	r3, #1
 320 01d0 87F82F30 		strb	r3, [r7, #47]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 321              		.loc 1 527 0
 322 01d4 08E0     		b	.L19
 323              	.L6:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccLVxKvm.s 			page 26


 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 324              		.loc 1 558 0
 325 01d6 7B68     		ldr	r3, [r7, #4]
 326 01d8 9B6A     		ldr	r3, [r3, #40]
 327 01da 43F01002 		orr	r2, r3, #16
 328 01de 7B68     		ldr	r3, [r7, #4]
 329 01e0 9A62     		str	r2, [r3, #40]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 330              		.loc 1 560 0
 331 01e2 0123     		movs	r3, #1
 332 01e4 87F82F30 		strb	r3, [r7, #47]
 333              	.L19:
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 334              		.loc 1 564 0
 335 01e8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 336              	.L3:
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 337              		.loc 1 565 0
 338 01ec 1846     		mov	r0, r3
 339 01ee 3037     		adds	r7, r7, #48
 340              	.LCFI3:
 341              		.cfi_def_cfa_offset 8
 342 01f0 BD46     		mov	sp, r7
 343              	.LCFI4:
 344              		.cfi_def_cfa_register 13
 345              		@ sp needed
 346 01f2 80BD     		pop	{r7, pc}
 347              	.L21:
 348              		.align	2
 349              	.L20:
 350 01f4 FDF7E1FF 		.word	-1968131
 351 01f8 FE0E1FFF 		.word	-14741762
 352              		.cfi_endproc
 353              	.LFE63:
 355              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 356              		.align	2
 357              		.global	HAL_ADC_DeInit
 358              		.thumb
 359              		.thumb_func
 361              	HAL_ADC_DeInit:
 362              	.LFB64:
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/ccLVxKvm.s 			page 27


 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 363              		.loc 1 576 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 16
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0000 80B5     		push	{r7, lr}
 368              	.LCFI5:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 84B0     		sub	sp, sp, #16
 373              	.LCFI6:
 374              		.cfi_def_cfa_offset 24
 375 0004 00AF     		add	r7, sp, #0
 376              	.LCFI7:
 377              		.cfi_def_cfa_register 7
 378 0006 7860     		str	r0, [r7, #4]
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 379              		.loc 1 577 0
 380 0008 0023     		movs	r3, #0
 381 000a FB73     		strb	r3, [r7, #15]
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 382              		.loc 1 580 0
 383 000c 7B68     		ldr	r3, [r7, #4]
 384 000e 002B     		cmp	r3, #0
 385 0010 01D1     		bne	.L23
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 386              		.loc 1 582 0
 387 0012 0123     		movs	r3, #1
 388 0014 ADE0     		b	.L24
 389              	.L23:
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 390              		.loc 1 589 0
 391 0016 7B68     		ldr	r3, [r7, #4]
 392 0018 9B6A     		ldr	r3, [r3, #40]
 393 001a 43F00202 		orr	r2, r3, #2
 394 001e 7B68     		ldr	r3, [r7, #4]
 395 0020 9A62     		str	r2, [r3, #40]
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 396              		.loc 1 593 0
 397 0022 7868     		ldr	r0, [r7, #4]
 398 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
ARM GAS  /tmp/ccLVxKvm.s 			page 28


 399 0028 0346     		mov	r3, r0
 400 002a FB73     		strb	r3, [r7, #15]
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 401              		.loc 1 598 0
 402 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 403 002e 002B     		cmp	r3, #0
 404 0030 40F09A80 		bne	.L25
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 405              		.loc 1 606 0
 406 0034 7B68     		ldr	r3, [r7, #4]
 407 0036 1B68     		ldr	r3, [r3]
 408 0038 6FF01F02 		mvn	r2, #31
 409 003c 1A60     		str	r2, [r3]
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 410              		.loc 1 610 0
 411 003e 7B68     		ldr	r3, [r7, #4]
 412 0040 1A68     		ldr	r2, [r3]
 413 0042 7B68     		ldr	r3, [r7, #4]
 414 0044 1B68     		ldr	r3, [r3]
 415 0046 5968     		ldr	r1, [r3, #4]
 416 0048 4C4B     		ldr	r3, .L26
 417 004a 0B40     		ands	r3, r3, r1
 418 004c 5360     		str	r3, [r2, #4]
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 419              		.loc 1 616 0
 420 004e 7B68     		ldr	r3, [r7, #4]
 421 0050 1A68     		ldr	r2, [r3]
 422 0052 7B68     		ldr	r3, [r7, #4]
 423 0054 1B68     		ldr	r3, [r3]
 424 0056 9968     		ldr	r1, [r3, #8]
 425 0058 494B     		ldr	r3, .L26+4
 426 005a 0B40     		ands	r3, r3, r1
 427 005c 9360     		str	r3, [r2, #8]
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  /tmp/ccLVxKvm.s 			page 29


 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 428              		.loc 1 623 0
 429 005e 7B68     		ldr	r3, [r7, #4]
 430 0060 1B68     		ldr	r3, [r3]
 431 0062 7A68     		ldr	r2, [r7, #4]
 432 0064 1268     		ldr	r2, [r2]
 433 0066 D268     		ldr	r2, [r2, #12]
 434 0068 02F07F42 		and	r2, r2, #-16777216
 435 006c DA60     		str	r2, [r3, #12]
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 436              		.loc 1 628 0
 437 006e 7B68     		ldr	r3, [r7, #4]
 438 0070 1B68     		ldr	r3, [r3]
 439 0072 7A68     		ldr	r2, [r7, #4]
 440 0074 1268     		ldr	r2, [r2]
 441 0076 1269     		ldr	r2, [r2, #16]
 442 0078 02F04042 		and	r2, r2, #-1073741824
 443 007c 1A61     		str	r2, [r3, #16]
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 444              		.loc 1 634 0
 445 007e 7B68     		ldr	r3, [r7, #4]
 446 0080 1A68     		ldr	r2, [r3]
 447 0082 7B68     		ldr	r3, [r7, #4]
 448 0084 1B68     		ldr	r3, [r3]
 449 0086 5B69     		ldr	r3, [r3, #20]
 450 0088 23F47F63 		bic	r3, r3, #4080
 451 008c 23F00F03 		bic	r3, r3, #15
 452 0090 5361     		str	r3, [r2, #20]
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 453              		.loc 1 636 0
 454 0092 7B68     		ldr	r3, [r7, #4]
 455 0094 1A68     		ldr	r2, [r3]
 456 0096 7B68     		ldr	r3, [r7, #4]
 457 0098 1B68     		ldr	r3, [r3]
 458 009a 9B69     		ldr	r3, [r3, #24]
 459 009c 23F47F63 		bic	r3, r3, #4080
 460 00a0 23F00F03 		bic	r3, r3, #15
 461 00a4 9361     		str	r3, [r2, #24]
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 462              		.loc 1 638 0
 463 00a6 7B68     		ldr	r3, [r7, #4]
 464 00a8 1A68     		ldr	r2, [r3]
 465 00aa 7B68     		ldr	r3, [r7, #4]
 466 00ac 1B68     		ldr	r3, [r3]
 467 00ae DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccLVxKvm.s 			page 30


 468 00b0 23F47F63 		bic	r3, r3, #4080
 469 00b4 23F00F03 		bic	r3, r3, #15
 470 00b8 D361     		str	r3, [r2, #28]
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 471              		.loc 1 640 0
 472 00ba 7B68     		ldr	r3, [r7, #4]
 473 00bc 1A68     		ldr	r2, [r3]
 474 00be 7B68     		ldr	r3, [r7, #4]
 475 00c0 1B68     		ldr	r3, [r3]
 476 00c2 1B6A     		ldr	r3, [r3, #32]
 477 00c4 23F47F63 		bic	r3, r3, #4080
 478 00c8 23F00F03 		bic	r3, r3, #15
 479 00cc 1362     		str	r3, [r2, #32]
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 480              		.loc 1 643 0
 481 00ce 7B68     		ldr	r3, [r7, #4]
 482 00d0 1A68     		ldr	r2, [r3]
 483 00d2 7B68     		ldr	r3, [r7, #4]
 484 00d4 1B68     		ldr	r3, [r3]
 485 00d6 5B6A     		ldr	r3, [r3, #36]
 486 00d8 23F47F63 		bic	r3, r3, #4080
 487 00dc 23F00F03 		bic	r3, r3, #15
 488 00e0 5362     		str	r3, [r2, #36]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 489              		.loc 1 645 0
 490 00e2 7B68     		ldr	r3, [r7, #4]
 491 00e4 1A68     		ldr	r2, [r3]
 492 00e6 7B68     		ldr	r3, [r7, #4]
 493 00e8 1B68     		ldr	r3, [r3]
 494 00ea 9B6A     		ldr	r3, [r3, #40]
 495 00ec 23F47F63 		bic	r3, r3, #4080
 496 00f0 23F00F03 		bic	r3, r3, #15
 497 00f4 9362     		str	r3, [r2, #40]
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 498              		.loc 1 648 0
 499 00f6 7B68     		ldr	r3, [r7, #4]
 500 00f8 1B68     		ldr	r3, [r3]
 501 00fa 7A68     		ldr	r2, [r7, #4]
 502 00fc 1268     		ldr	r2, [r2]
 503 00fe D26A     		ldr	r2, [r2, #44]
 504 0100 02F07F42 		and	r2, r2, #-16777216
 505 0104 DA62     		str	r2, [r3, #44]
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 506              		.loc 1 653 0
 507 0106 7B68     		ldr	r3, [r7, #4]
 508 0108 1B68     		ldr	r3, [r3]
 509 010a 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccLVxKvm.s 			page 31


 510 010c 1268     		ldr	r2, [r2]
 511 010e D26A     		ldr	r2, [r2, #44]
 512 0110 02F07F42 		and	r2, r2, #-16777216
 513 0114 DA62     		str	r2, [r3, #44]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 514              		.loc 1 658 0
 515 0116 7B68     		ldr	r3, [r7, #4]
 516 0118 1B68     		ldr	r3, [r3]
 517 011a 7A68     		ldr	r2, [r7, #4]
 518 011c 1268     		ldr	r2, [r2]
 519 011e 126B     		ldr	r2, [r2, #48]
 520 0120 02F04042 		and	r2, r2, #-1073741824
 521 0124 1A63     		str	r2, [r3, #48]
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 522              		.loc 1 662 0
 523 0126 7B68     		ldr	r3, [r7, #4]
 524 0128 1B68     		ldr	r3, [r3]
 525 012a 7A68     		ldr	r2, [r7, #4]
 526 012c 1268     		ldr	r2, [r2]
 527 012e 526B     		ldr	r2, [r2, #52]
 528 0130 02F04042 		and	r2, r2, #-1073741824
 529 0134 5A63     		str	r2, [r3, #52]
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 530              		.loc 1 666 0
 531 0136 7B68     		ldr	r3, [r7, #4]
 532 0138 1A68     		ldr	r2, [r3]
 533 013a 7B68     		ldr	r3, [r7, #4]
 534 013c 1B68     		ldr	r3, [r3]
 535 013e 9B6B     		ldr	r3, [r3, #56]
 536 0140 9B0D     		lsrs	r3, r3, #22
 537 0142 9B05     		lsls	r3, r3, #22
 538 0144 9363     		str	r3, [r2, #56]
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 539              		.loc 1 671 0
 540 0146 7B68     		ldr	r3, [r7, #4]
 541 0148 1A68     		ldr	r2, [r3]
 542 014a 7B68     		ldr	r3, [r7, #4]
 543 014c 1B68     		ldr	r3, [r3]
 544 014e 9B6B     		ldr	r3, [r3, #56]
 545 0150 9B0D     		lsrs	r3, r3, #22
 546 0152 9B05     		lsls	r3, r3, #22
 547 0154 9363     		str	r3, [r2, #56]
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
ARM GAS  /tmp/ccLVxKvm.s 			page 32


 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 548              		.loc 1 691 0
 549 0156 7868     		ldr	r0, [r7, #4]
 550 0158 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 551              		.loc 1 694 0
 552 015c 7B68     		ldr	r3, [r7, #4]
 553 015e 0022     		movs	r2, #0
 554 0160 DA62     		str	r2, [r3, #44]
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 555              		.loc 1 697 0
 556 0162 7B68     		ldr	r3, [r7, #4]
 557 0164 0022     		movs	r2, #0
 558 0166 9A62     		str	r2, [r3, #40]
 559              	.L25:
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 560              		.loc 1 702 0
 561 0168 7B68     		ldr	r3, [r7, #4]
 562 016a 0022     		movs	r2, #0
 563 016c 83F82420 		strb	r2, [r3, #36]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 564              		.loc 1 705 0
 565 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 566              	.L24:
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 567              		.loc 1 706 0
 568 0172 1846     		mov	r0, r3
 569 0174 1037     		adds	r7, r7, #16
 570              	.LCFI8:
ARM GAS  /tmp/ccLVxKvm.s 			page 33


 571              		.cfi_def_cfa_offset 8
 572 0176 BD46     		mov	sp, r7
 573              	.LCFI9:
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 0178 80BD     		pop	{r7, pc}
 577              	.L27:
 578 017a 00BF     		.align	2
 579              	.L26:
 580 017c 00003FFF 		.word	-12648448
 581 0180 F00601FF 		.word	-16709904
 582              		.cfi_endproc
 583              	.LFE64:
 585              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 586              		.align	2
 587              		.weak	HAL_ADC_MspInit
 588              		.thumb
 589              		.thumb_func
 591              	HAL_ADC_MspInit:
 592              	.LFB65:
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 593              		.loc 1 714 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 8
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597              		@ link register save eliminated.
 598 0000 80B4     		push	{r7}
 599              	.LCFI10:
 600              		.cfi_def_cfa_offset 4
 601              		.cfi_offset 7, -4
 602 0002 83B0     		sub	sp, sp, #12
 603              	.LCFI11:
 604              		.cfi_def_cfa_offset 16
 605 0004 00AF     		add	r7, sp, #0
 606              	.LCFI12:
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 609              		.loc 1 720 0
 610 0008 0C37     		adds	r7, r7, #12
 611              	.LCFI13:
 612              		.cfi_def_cfa_offset 4
 613 000a BD46     		mov	sp, r7
 614              	.LCFI14:
 615              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccLVxKvm.s 			page 34


 616              		@ sp needed
 617 000c 5DF8047B 		ldr	r7, [sp], #4
 618              	.LCFI15:
 619              		.cfi_restore 7
 620              		.cfi_def_cfa_offset 0
 621 0010 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE65:
 625 0012 00BF     		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 626              		.align	2
 627              		.weak	HAL_ADC_MspDeInit
 628              		.thumb
 629              		.thumb_func
 631              	HAL_ADC_MspDeInit:
 632              	.LFB66:
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 633              		.loc 1 728 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              	.LCFI16:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 7, -4
 642 0002 83B0     		sub	sp, sp, #12
 643              	.LCFI17:
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              	.LCFI18:
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 649              		.loc 1 734 0
 650 0008 0C37     		adds	r7, r7, #12
 651              	.LCFI19:
 652              		.cfi_def_cfa_offset 4
 653 000a BD46     		mov	sp, r7
 654              	.LCFI20:
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 000c 5DF8047B 		ldr	r7, [sp], #4
 658              	.LCFI21:
 659              		.cfi_restore 7
 660              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccLVxKvm.s 			page 35


 661 0010 7047     		bx	lr
 662              		.cfi_endproc
 663              	.LFE66:
 665 0012 00BF     		.section	.text.HAL_ADC_Start,"ax",%progbits
 666              		.align	2
 667              		.global	HAL_ADC_Start
 668              		.thumb
 669              		.thumb_func
 671              	HAL_ADC_Start:
 672              	.LFB67:
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 673              		.loc 1 769 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 16
 676              		@ frame_needed = 1, uses_anonymous_args = 0
 677 0000 80B5     		push	{r7, lr}
 678              	.LCFI22:
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 84B0     		sub	sp, sp, #16
 683              	.LCFI23:
 684              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccLVxKvm.s 			page 36


 685 0004 00AF     		add	r7, sp, #0
 686              	.LCFI24:
 687              		.cfi_def_cfa_register 7
 688 0006 7860     		str	r0, [r7, #4]
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 689              		.loc 1 770 0
 690 0008 0023     		movs	r3, #0
 691 000a FB73     		strb	r3, [r7, #15]
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 692              		.loc 1 776 0
 693 000c 7B68     		ldr	r3, [r7, #4]
 694 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 695 0012 012B     		cmp	r3, #1
 696 0014 01D1     		bne	.L31
 697              		.loc 1 776 0 is_stmt 0 discriminator 1
 698 0016 0223     		movs	r3, #2
 699 0018 62E0     		b	.L32
 700              	.L31:
 701              		.loc 1 776 0 discriminator 2
 702 001a 7B68     		ldr	r3, [r7, #4]
 703 001c 0122     		movs	r2, #1
 704 001e 83F82420 		strb	r2, [r3, #36]
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 705              		.loc 1 779 0 is_stmt 1 discriminator 2
 706 0022 7868     		ldr	r0, [r7, #4]
 707 0024 FFF7FEFF 		bl	ADC_Enable
 708 0028 0346     		mov	r3, r0
 709 002a FB73     		strb	r3, [r7, #15]
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 710              		.loc 1 782 0 discriminator 2
 711 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 712 002e 002B     		cmp	r3, #0
 713 0030 51D1     		bne	.L33
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 714              		.loc 1 787 0
 715 0032 7B68     		ldr	r3, [r7, #4]
 716 0034 9B6A     		ldr	r3, [r3, #40]
 717 0036 23F44073 		bic	r3, r3, #768
 718 003a 23F00103 		bic	r3, r3, #1
 719 003e 43F48072 		orr	r2, r3, #256
 720 0042 7B68     		ldr	r3, [r7, #4]
 721 0044 9A62     		str	r2, [r3, #40]
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
ARM GAS  /tmp/ccLVxKvm.s 			page 37


 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 722              		.loc 1 797 0
 723 0046 7B68     		ldr	r3, [r7, #4]
 724 0048 9B6A     		ldr	r3, [r3, #40]
 725 004a 23F48012 		bic	r2, r3, #1048576
 726 004e 7B68     		ldr	r3, [r7, #4]
 727 0050 9A62     		str	r2, [r3, #40]
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 728              		.loc 1 801 0
 729 0052 7B68     		ldr	r3, [r7, #4]
 730 0054 1B68     		ldr	r3, [r3]
 731 0056 5B68     		ldr	r3, [r3, #4]
 732 0058 03F48063 		and	r3, r3, #1024
 733 005c 002B     		cmp	r3, #0
 734 005e 07D0     		beq	.L40
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 735              		.loc 1 803 0
 736 0060 7B68     		ldr	r3, [r7, #4]
 737 0062 9B6A     		ldr	r3, [r3, #40]
 738 0064 23F44053 		bic	r3, r3, #12288
 739 0068 43F48052 		orr	r2, r3, #4096
 740 006c 7B68     		ldr	r3, [r7, #4]
 741 006e 9A62     		str	r2, [r3, #40]
 742              	.L40:
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 743              		.loc 1 820 0
 744 0070 7B68     		ldr	r3, [r7, #4]
 745 0072 9B6A     		ldr	r3, [r3, #40]
 746 0074 03F48053 		and	r3, r3, #4096
 747 0078 002B     		cmp	r3, #0
ARM GAS  /tmp/ccLVxKvm.s 			page 38


 748 007a 06D0     		beq	.L35
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 749              		.loc 1 823 0
 750 007c 7B68     		ldr	r3, [r7, #4]
 751 007e DB6A     		ldr	r3, [r3, #44]
 752 0080 23F00602 		bic	r2, r3, #6
 753 0084 7B68     		ldr	r3, [r7, #4]
 754 0086 DA62     		str	r2, [r3, #44]
 755 0088 02E0     		b	.L36
 756              	.L35:
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 757              		.loc 1 828 0
 758 008a 7B68     		ldr	r3, [r7, #4]
 759 008c 0022     		movs	r2, #0
 760 008e DA62     		str	r2, [r3, #44]
 761              	.L36:
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 762              		.loc 1 834 0
 763 0090 7B68     		ldr	r3, [r7, #4]
 764 0092 0022     		movs	r2, #0
 765 0094 83F82420 		strb	r2, [r3, #36]
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 766              		.loc 1 838 0
 767 0098 7B68     		ldr	r3, [r7, #4]
 768 009a 1B68     		ldr	r3, [r3]
 769 009c 6FF00202 		mvn	r2, #2
 770 00a0 1A60     		str	r2, [r3]
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 771              		.loc 1 850 0
 772 00a2 7B68     		ldr	r3, [r7, #4]
 773 00a4 1B68     		ldr	r3, [r3]
 774 00a6 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccLVxKvm.s 			page 39


 775 00a8 03F46023 		and	r3, r3, #917504
 776 00ac B3F5602F 		cmp	r3, #917504
 777 00b0 08D1     		bne	.L37
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 778              		.loc 1 854 0
 779 00b2 7B68     		ldr	r3, [r7, #4]
 780 00b4 1B68     		ldr	r3, [r3]
 781 00b6 7A68     		ldr	r2, [r7, #4]
 782 00b8 1268     		ldr	r2, [r2]
 783 00ba 9268     		ldr	r2, [r2, #8]
 784 00bc 42F4A002 		orr	r2, r2, #5242880
 785 00c0 9A60     		str	r2, [r3, #8]
 786 00c2 0CE0     		b	.L39
 787              	.L37:
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 788              		.loc 1 859 0
 789 00c4 7B68     		ldr	r3, [r7, #4]
 790 00c6 1B68     		ldr	r3, [r3]
 791 00c8 7A68     		ldr	r2, [r7, #4]
 792 00ca 1268     		ldr	r2, [r2]
 793 00cc 9268     		ldr	r2, [r2, #8]
 794 00ce 42F48012 		orr	r2, r2, #1048576
 795 00d2 9A60     		str	r2, [r3, #8]
 796 00d4 03E0     		b	.L39
 797              	.L33:
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 798              		.loc 1 865 0
 799 00d6 7B68     		ldr	r3, [r7, #4]
 800 00d8 0022     		movs	r2, #0
 801 00da 83F82420 		strb	r2, [r3, #36]
 802              	.L39:
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 803              		.loc 1 869 0
 804 00de FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 805              	.L32:
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 806              		.loc 1 870 0
 807 00e0 1846     		mov	r0, r3
 808 00e2 1037     		adds	r7, r7, #16
 809              	.LCFI25:
 810              		.cfi_def_cfa_offset 8
 811 00e4 BD46     		mov	sp, r7
ARM GAS  /tmp/ccLVxKvm.s 			page 40


 812              	.LCFI26:
 813              		.cfi_def_cfa_register 13
 814              		@ sp needed
 815 00e6 80BD     		pop	{r7, pc}
 816              		.cfi_endproc
 817              	.LFE67:
 819              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 820              		.align	2
 821              		.global	HAL_ADC_Stop
 822              		.thumb
 823              		.thumb_func
 825              	HAL_ADC_Stop:
 826              	.LFB68:
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 827              		.loc 1 882 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 16
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831 0000 80B5     		push	{r7, lr}
 832              	.LCFI27:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 84B0     		sub	sp, sp, #16
 837              	.LCFI28:
 838              		.cfi_def_cfa_offset 24
 839 0004 00AF     		add	r7, sp, #0
 840              	.LCFI29:
 841              		.cfi_def_cfa_register 7
 842 0006 7860     		str	r0, [r7, #4]
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 843              		.loc 1 883 0
 844 0008 0023     		movs	r3, #0
 845 000a FB73     		strb	r3, [r7, #15]
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 846              		.loc 1 889 0
 847 000c 7B68     		ldr	r3, [r7, #4]
 848 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 849 0012 012B     		cmp	r3, #1
 850 0014 01D1     		bne	.L42
 851              		.loc 1 889 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccLVxKvm.s 			page 41


 852 0016 0223     		movs	r3, #2
 853 0018 1AE0     		b	.L43
 854              	.L42:
 855              		.loc 1 889 0 discriminator 2
 856 001a 7B68     		ldr	r3, [r7, #4]
 857 001c 0122     		movs	r2, #1
 858 001e 83F82420 		strb	r2, [r3, #36]
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 859              		.loc 1 893 0 is_stmt 1 discriminator 2
 860 0022 7868     		ldr	r0, [r7, #4]
 861 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 862 0028 0346     		mov	r3, r0
 863 002a FB73     		strb	r3, [r7, #15]
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 864              		.loc 1 896 0 discriminator 2
 865 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 866 002e 002B     		cmp	r3, #0
 867 0030 09D1     		bne	.L44
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 868              		.loc 1 899 0
 869 0032 7B68     		ldr	r3, [r7, #4]
 870 0034 9B6A     		ldr	r3, [r3, #40]
 871 0036 23F48853 		bic	r3, r3, #4352
 872 003a 23F00103 		bic	r3, r3, #1
 873 003e 43F00102 		orr	r2, r3, #1
 874 0042 7B68     		ldr	r3, [r7, #4]
 875 0044 9A62     		str	r2, [r3, #40]
 876              	.L44:
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 877              		.loc 1 905 0
 878 0046 7B68     		ldr	r3, [r7, #4]
 879 0048 0022     		movs	r2, #0
 880 004a 83F82420 		strb	r2, [r3, #36]
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 881              		.loc 1 908 0
 882 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 883              	.L43:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 884              		.loc 1 909 0
 885 0050 1846     		mov	r0, r3
 886 0052 1037     		adds	r7, r7, #16
 887              	.LCFI30:
 888              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLVxKvm.s 			page 42


 889 0054 BD46     		mov	sp, r7
 890              	.LCFI31:
 891              		.cfi_def_cfa_register 13
 892              		@ sp needed
 893 0056 80BD     		pop	{r7, pc}
 894              		.cfi_endproc
 895              	.LFE68:
 897              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 898              		.align	2
 899              		.global	HAL_ADC_PollForConversion
 900              		.thumb
 901              		.thumb_func
 903              	HAL_ADC_PollForConversion:
 904              	.LFB69:
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 905              		.loc 1 926 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 24
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909 0000 90B5     		push	{r4, r7, lr}
 910              	.LCFI32:
 911              		.cfi_def_cfa_offset 12
 912              		.cfi_offset 4, -12
 913              		.cfi_offset 7, -8
 914              		.cfi_offset 14, -4
 915 0002 87B0     		sub	sp, sp, #28
 916              	.LCFI33:
 917              		.cfi_def_cfa_offset 40
 918 0004 00AF     		add	r7, sp, #0
 919              	.LCFI34:
 920              		.cfi_def_cfa_register 7
 921 0006 7860     		str	r0, [r7, #4]
 922 0008 3960     		str	r1, [r7]
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 923              		.loc 1 927 0
 924 000a 0023     		movs	r3, #0
 925 000c 7B61     		str	r3, [r7, #20]
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
ARM GAS  /tmp/ccLVxKvm.s 			page 43


 926              		.loc 1 931 0
 927 000e 0023     		movs	r3, #0
 928 0010 FB60     		str	r3, [r7, #12]
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 929              		.loc 1 932 0
 930 0012 0023     		movs	r3, #0
 931 0014 3B61     		str	r3, [r7, #16]
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 932              		.loc 1 938 0
 933 0016 FFF7FEFF 		bl	HAL_GetTick
 934 001a 7861     		str	r0, [r7, #20]
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 935              		.loc 1 943 0
 936 001c 7B68     		ldr	r3, [r7, #4]
 937 001e 1B68     		ldr	r3, [r3]
 938 0020 9B68     		ldr	r3, [r3, #8]
 939 0022 03F48073 		and	r3, r3, #256
 940 0026 002B     		cmp	r3, #0
 941 0028 0BD0     		beq	.L46
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 942              		.loc 1 946 0
 943 002a 7B68     		ldr	r3, [r7, #4]
 944 002c 9B6A     		ldr	r3, [r3, #40]
 945 002e 43F02002 		orr	r2, r3, #32
 946 0032 7B68     		ldr	r3, [r7, #4]
 947 0034 9A62     		str	r2, [r3, #40]
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 948              		.loc 1 949 0
 949 0036 7B68     		ldr	r3, [r7, #4]
 950 0038 0022     		movs	r2, #0
 951 003a 83F82420 		strb	r2, [r3, #36]
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 952              		.loc 1 951 0
 953 003e 0123     		movs	r3, #1
 954 0040 C8E0     		b	.L47
 955              	.L46:
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
ARM GAS  /tmp/ccLVxKvm.s 			page 44


 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 956              		.loc 1 968 0
 957 0042 7B68     		ldr	r3, [r7, #4]
 958 0044 1B68     		ldr	r3, [r3]
 959 0046 5B68     		ldr	r3, [r3, #4]
 960 0048 03F48073 		and	r3, r3, #256
 961 004c 002B     		cmp	r3, #0
 962 004e 2AD1     		bne	.L48
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 963              		.loc 1 969 0 discriminator 1
 964 0050 7B68     		ldr	r3, [r7, #4]
 965 0052 1B68     		ldr	r3, [r3]
 966 0054 DB6A     		ldr	r3, [r3, #44]
 967 0056 03F47003 		and	r3, r3, #15728640
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 968              		.loc 1 968 0 discriminator 1
 969 005a 002B     		cmp	r3, #0
 970 005c 23D1     		bne	.L48
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 971              		.loc 1 972 0
 972 005e 1AE0     		b	.L49
 973              	.L51:
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 974              		.loc 1 975 0
 975 0060 3B68     		ldr	r3, [r7]
 976 0062 B3F1FF3F 		cmp	r3, #-1
 977 0066 16D0     		beq	.L49
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 978              		.loc 1 977 0
 979 0068 3B68     		ldr	r3, [r7]
 980 006a 002B     		cmp	r3, #0
 981 006c 07D0     		beq	.L50
 982              		.loc 1 977 0 is_stmt 0 discriminator 1
 983 006e FFF7FEFF 		bl	HAL_GetTick
 984 0072 0246     		mov	r2, r0
 985 0074 7B69     		ldr	r3, [r7, #20]
 986 0076 D21A     		subs	r2, r2, r3
 987 0078 3B68     		ldr	r3, [r7]
 988 007a 9A42     		cmp	r2, r3
 989 007c 0BD9     		bls	.L49
 990              	.L50:
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
ARM GAS  /tmp/ccLVxKvm.s 			page 45


 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 991              		.loc 1 980 0 is_stmt 1
 992 007e 7B68     		ldr	r3, [r7, #4]
 993 0080 9B6A     		ldr	r3, [r3, #40]
 994 0082 43F00402 		orr	r2, r3, #4
 995 0086 7B68     		ldr	r3, [r7, #4]
 996 0088 9A62     		str	r2, [r3, #40]
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 997              		.loc 1 983 0
 998 008a 7B68     		ldr	r3, [r7, #4]
 999 008c 0022     		movs	r2, #0
 1000 008e 83F82420 		strb	r2, [r3, #36]
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1001              		.loc 1 985 0
 1002 0092 0323     		movs	r3, #3
 1003 0094 9EE0     		b	.L47
 1004              	.L49:
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1005              		.loc 1 972 0
 1006 0096 7B68     		ldr	r3, [r7, #4]
 1007 0098 1B68     		ldr	r3, [r3]
 1008 009a 1B68     		ldr	r3, [r3]
 1009 009c 03F00203 		and	r3, r3, #2
 1010 00a0 002B     		cmp	r3, #0
 1011 00a2 DDD0     		beq	.L51
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1012              		.loc 1 968 0
 1013 00a4 6CE0     		b	.L52
 1014              	.L48:
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1015              		.loc 1 997 0
 1016 00a6 4D4B     		ldr	r3, .L66
 1017 00a8 1C68     		ldr	r4, [r3]
 1018 00aa 0220     		movs	r0, #2
 1019 00ac FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 1020 00b0 0346     		mov	r3, r0
 1021 00b2 B4FBF3F2 		udiv	r2, r4, r3
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 1022              		.loc 1 998 0
 1023 00b6 7B68     		ldr	r3, [r7, #4]
 1024 00b8 1B68     		ldr	r3, [r3]
 1025 00ba 1969     		ldr	r1, [r3, #16]
 1026 00bc 484B     		ldr	r3, .L66+4
ARM GAS  /tmp/ccLVxKvm.s 			page 46


 1027 00be 0B40     		ands	r3, r3, r1
 1028 00c0 002B     		cmp	r3, #0
 1029 00c2 18D1     		bne	.L53
 1030              		.loc 1 998 0 is_stmt 0 discriminator 1
 1031 00c4 7B68     		ldr	r3, [r7, #4]
 1032 00c6 1B68     		ldr	r3, [r3]
 1033 00c8 D968     		ldr	r1, [r3, #12]
 1034 00ca 464B     		ldr	r3, .L66+8
 1035 00cc 0B40     		ands	r3, r3, r1
 1036 00ce 002B     		cmp	r3, #0
 1037 00d0 11D1     		bne	.L53
 1038              		.loc 1 998 0 discriminator 3
 1039 00d2 7B68     		ldr	r3, [r7, #4]
 1040 00d4 1B68     		ldr	r3, [r3]
 1041 00d6 1969     		ldr	r1, [r3, #16]
 1042 00d8 434B     		ldr	r3, .L66+12
 1043 00da 0B40     		ands	r3, r3, r1
 1044 00dc 002B     		cmp	r3, #0
 1045 00de 08D1     		bne	.L54
 1046              		.loc 1 998 0 discriminator 5
 1047 00e0 7B68     		ldr	r3, [r7, #4]
 1048 00e2 1B68     		ldr	r3, [r3]
 1049 00e4 D968     		ldr	r1, [r3, #12]
 1050 00e6 414B     		ldr	r3, .L66+16
 1051 00e8 0B40     		ands	r3, r3, r1
 1052 00ea 002B     		cmp	r3, #0
 1053 00ec 01D1     		bne	.L54
 1054              		.loc 1 998 0 discriminator 7
 1055 00ee 1423     		movs	r3, #20
 1056 00f0 20E0     		b	.L56
 1057              	.L54:
 1058              		.loc 1 998 0 discriminator 8
 1059 00f2 2923     		movs	r3, #41
 1060 00f4 1EE0     		b	.L56
 1061              	.L53:
 1062              		.loc 1 998 0 discriminator 4
 1063 00f6 7B68     		ldr	r3, [r7, #4]
 1064 00f8 1B68     		ldr	r3, [r3]
 1065 00fa 1969     		ldr	r1, [r3, #16]
 1066 00fc 3A4B     		ldr	r3, .L66+12
 1067 00fe 0B40     		ands	r3, r3, r1
 1068 0100 002B     		cmp	r3, #0
 1069 0102 06D1     		bne	.L57
 1070              		.loc 1 998 0 discriminator 11
 1071 0104 7B68     		ldr	r3, [r7, #4]
 1072 0106 1B68     		ldr	r3, [r3]
 1073 0108 D968     		ldr	r1, [r3, #12]
 1074 010a 384B     		ldr	r3, .L66+16
 1075 010c 0B40     		ands	r3, r3, r1
 1076 010e 002B     		cmp	r3, #0
 1077 0110 0DD0     		beq	.L58
 1078              	.L57:
 1079              		.loc 1 998 0 discriminator 14
 1080 0112 7B68     		ldr	r3, [r7, #4]
 1081 0114 1B68     		ldr	r3, [r3]
 1082 0116 1969     		ldr	r1, [r3, #16]
 1083 0118 354B     		ldr	r3, .L66+20
ARM GAS  /tmp/ccLVxKvm.s 			page 47


 1084 011a 0B40     		ands	r3, r3, r1
 1085 011c 002B     		cmp	r3, #0
 1086 011e 08D1     		bne	.L59
 1087              		.loc 1 998 0 discriminator 15
 1088 0120 7B68     		ldr	r3, [r7, #4]
 1089 0122 1B68     		ldr	r3, [r3]
 1090 0124 D968     		ldr	r1, [r3, #12]
 1091 0126 324B     		ldr	r3, .L66+20
 1092 0128 0B40     		ands	r3, r3, r1
 1093 012a 002B     		cmp	r3, #0
 1094 012c 01D1     		bne	.L59
 1095              	.L58:
 1096              		.loc 1 998 0 discriminator 17
 1097 012e 5423     		movs	r3, #84
 1098 0130 00E0     		b	.L56
 1099              	.L59:
 1100              		.loc 1 998 0 discriminator 18
 1101 0132 FC23     		movs	r3, #252
 1102              	.L56:
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1103              		.loc 1 996 0 is_stmt 1
 1104 0134 03FB02F3 		mul	r3, r3, r2
 1105 0138 3B61     		str	r3, [r7, #16]
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1106              		.loc 1 1000 0
 1107 013a 1DE0     		b	.L61
 1108              	.L64:
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1109              		.loc 1 1003 0
 1110 013c 3B68     		ldr	r3, [r7]
 1111 013e B3F1FF3F 		cmp	r3, #-1
 1112 0142 16D0     		beq	.L62
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 1113              		.loc 1 1005 0
 1114 0144 3B68     		ldr	r3, [r7]
 1115 0146 002B     		cmp	r3, #0
 1116 0148 07D0     		beq	.L63
 1117              		.loc 1 1005 0 is_stmt 0 discriminator 1
 1118 014a FFF7FEFF 		bl	HAL_GetTick
 1119 014e 0246     		mov	r2, r0
 1120 0150 7B69     		ldr	r3, [r7, #20]
 1121 0152 D21A     		subs	r2, r2, r3
 1122 0154 3B68     		ldr	r3, [r7]
 1123 0156 9A42     		cmp	r2, r3
 1124 0158 0BD9     		bls	.L62
 1125              	.L63:
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1126              		.loc 1 1008 0 is_stmt 1
 1127 015a 7B68     		ldr	r3, [r7, #4]
 1128 015c 9B6A     		ldr	r3, [r3, #40]
 1129 015e 43F00402 		orr	r2, r3, #4
ARM GAS  /tmp/ccLVxKvm.s 			page 48


 1130 0162 7B68     		ldr	r3, [r7, #4]
 1131 0164 9A62     		str	r2, [r3, #40]
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1132              		.loc 1 1011 0
 1133 0166 7B68     		ldr	r3, [r7, #4]
 1134 0168 0022     		movs	r2, #0
 1135 016a 83F82420 		strb	r2, [r3, #36]
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1136              		.loc 1 1013 0
 1137 016e 0323     		movs	r3, #3
 1138 0170 30E0     		b	.L47
 1139              	.L62:
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 1140              		.loc 1 1016 0
 1141 0172 FB68     		ldr	r3, [r7, #12]
 1142 0174 0133     		adds	r3, r3, #1
 1143 0176 FB60     		str	r3, [r7, #12]
 1144              	.L61:
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1145              		.loc 1 1000 0
 1146 0178 FA68     		ldr	r2, [r7, #12]
 1147 017a 3B69     		ldr	r3, [r7, #16]
 1148 017c 9A42     		cmp	r2, r3
 1149 017e DDD3     		bcc	.L64
 1150              	.L52:
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1151              		.loc 1 1021 0
 1152 0180 7B68     		ldr	r3, [r7, #4]
 1153 0182 1B68     		ldr	r3, [r3]
 1154 0184 6FF01202 		mvn	r2, #18
 1155 0188 1A60     		str	r2, [r3]
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1156              		.loc 1 1024 0
 1157 018a 7B68     		ldr	r3, [r7, #4]
 1158 018c 9B6A     		ldr	r3, [r3, #40]
 1159 018e 43F40072 		orr	r2, r3, #512
 1160 0192 7B68     		ldr	r3, [r7, #4]
 1161 0194 9A62     		str	r2, [r3, #40]
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1162              		.loc 1 1031 0
ARM GAS  /tmp/ccLVxKvm.s 			page 49


 1163 0196 7B68     		ldr	r3, [r7, #4]
 1164 0198 1B68     		ldr	r3, [r3]
 1165 019a 9B68     		ldr	r3, [r3, #8]
 1166 019c 03F46023 		and	r3, r3, #917504
 1167 01a0 B3F5602F 		cmp	r3, #917504
 1168 01a4 15D1     		bne	.L65
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1169              		.loc 1 1032 0 discriminator 1
 1170 01a6 7B68     		ldr	r3, [r7, #4]
 1171 01a8 DB68     		ldr	r3, [r3, #12]
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1172              		.loc 1 1031 0 discriminator 1
 1173 01aa 002B     		cmp	r3, #0
 1174 01ac 11D1     		bne	.L65
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1175              		.loc 1 1035 0
 1176 01ae 7B68     		ldr	r3, [r7, #4]
 1177 01b0 9B6A     		ldr	r3, [r3, #40]
 1178 01b2 23F48072 		bic	r2, r3, #256
 1179 01b6 7B68     		ldr	r3, [r7, #4]
 1180 01b8 9A62     		str	r2, [r3, #40]
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1181              		.loc 1 1037 0
 1182 01ba 7B68     		ldr	r3, [r7, #4]
 1183 01bc 9B6A     		ldr	r3, [r3, #40]
 1184 01be 03F48053 		and	r3, r3, #4096
 1185 01c2 002B     		cmp	r3, #0
 1186 01c4 05D1     		bne	.L65
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1187              		.loc 1 1039 0
 1188 01c6 7B68     		ldr	r3, [r7, #4]
 1189 01c8 9B6A     		ldr	r3, [r3, #40]
 1190 01ca 43F00102 		orr	r2, r3, #1
 1191 01ce 7B68     		ldr	r3, [r7, #4]
 1192 01d0 9A62     		str	r2, [r3, #40]
 1193              	.L65:
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1194              		.loc 1 1044 0
 1195 01d2 0023     		movs	r3, #0
 1196              	.L47:
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1197              		.loc 1 1045 0
 1198 01d4 1846     		mov	r0, r3
 1199 01d6 1C37     		adds	r7, r7, #28
 1200              	.LCFI35:
 1201              		.cfi_def_cfa_offset 12
 1202 01d8 BD46     		mov	sp, r7
 1203              	.LCFI36:
 1204              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccLVxKvm.s 			page 50


 1205              		@ sp needed
 1206 01da 90BD     		pop	{r4, r7, pc}
 1207              	.L67:
 1208              		.align	2
 1209              	.L66:
 1210 01dc 00000000 		.word	SystemCoreClock
 1211 01e0 24499224 		.word	613566756
 1212 01e4 24499200 		.word	9586980
 1213 01e8 92244912 		.word	306783378
 1214 01ec 92244900 		.word	4793490
 1215 01f0 49922400 		.word	2396745
 1216              		.cfi_endproc
 1217              	.LFE69:
 1219              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1220              		.align	2
 1221              		.global	HAL_ADC_PollForEvent
 1222              		.thumb
 1223              		.thumb_func
 1225              	HAL_ADC_PollForEvent:
 1226              	.LFB70:
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1227              		.loc 1 1057 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 24
 1230              		@ frame_needed = 1, uses_anonymous_args = 0
 1231 0000 80B5     		push	{r7, lr}
 1232              	.LCFI37:
 1233              		.cfi_def_cfa_offset 8
 1234              		.cfi_offset 7, -8
 1235              		.cfi_offset 14, -4
 1236 0002 86B0     		sub	sp, sp, #24
 1237              	.LCFI38:
 1238              		.cfi_def_cfa_offset 32
 1239 0004 00AF     		add	r7, sp, #0
 1240              	.LCFI39:
 1241              		.cfi_def_cfa_register 7
 1242 0006 F860     		str	r0, [r7, #12]
 1243 0008 B960     		str	r1, [r7, #8]
 1244 000a 7A60     		str	r2, [r7, #4]
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0; 
 1245              		.loc 1 1058 0
 1246 000c 0023     		movs	r3, #0
 1247 000e 7B61     		str	r3, [r7, #20]
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccLVxKvm.s 			page 51


1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1248              		.loc 1 1065 0
 1249 0010 FFF7FEFF 		bl	HAL_GetTick
 1250 0014 7861     		str	r0, [r7, #20]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1251              		.loc 1 1068 0
 1252 0016 1AE0     		b	.L69
 1253              	.L72:
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1254              		.loc 1 1071 0
 1255 0018 7B68     		ldr	r3, [r7, #4]
 1256 001a B3F1FF3F 		cmp	r3, #-1
 1257 001e 16D0     		beq	.L69
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 1258              		.loc 1 1073 0
 1259 0020 7B68     		ldr	r3, [r7, #4]
 1260 0022 002B     		cmp	r3, #0
 1261 0024 07D0     		beq	.L70
 1262              		.loc 1 1073 0 is_stmt 0 discriminator 1
 1263 0026 FFF7FEFF 		bl	HAL_GetTick
 1264 002a 0246     		mov	r2, r0
 1265 002c 7B69     		ldr	r3, [r7, #20]
 1266 002e D21A     		subs	r2, r2, r3
 1267 0030 7B68     		ldr	r3, [r7, #4]
 1268 0032 9A42     		cmp	r2, r3
 1269 0034 0BD9     		bls	.L69
 1270              	.L70:
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1271              		.loc 1 1076 0 is_stmt 1
 1272 0036 FB68     		ldr	r3, [r7, #12]
 1273 0038 9B6A     		ldr	r3, [r3, #40]
 1274 003a 43F00402 		orr	r2, r3, #4
 1275 003e FB68     		ldr	r3, [r7, #12]
 1276 0040 9A62     		str	r2, [r3, #40]
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1277              		.loc 1 1079 0
 1278 0042 FB68     		ldr	r3, [r7, #12]
 1279 0044 0022     		movs	r2, #0
 1280 0046 83F82420 		strb	r2, [r3, #36]
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_TIMEOUT;
 1281              		.loc 1 1081 0
 1282 004a 0323     		movs	r3, #3
 1283 004c 13E0     		b	.L71
 1284              	.L69:
ARM GAS  /tmp/ccLVxKvm.s 			page 52


1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1285              		.loc 1 1068 0
 1286 004e FB68     		ldr	r3, [r7, #12]
 1287 0050 1B68     		ldr	r3, [r3]
 1288 0052 1A68     		ldr	r2, [r3]
 1289 0054 BB68     		ldr	r3, [r7, #8]
 1290 0056 1A40     		ands	r2, r2, r3
 1291 0058 BB68     		ldr	r3, [r7, #8]
 1292 005a 9A42     		cmp	r2, r3
 1293 005c DCD1     		bne	.L72
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1294              		.loc 1 1088 0
 1295 005e FB68     		ldr	r3, [r7, #12]
 1296 0060 9B6A     		ldr	r3, [r3, #40]
 1297 0062 43F48032 		orr	r2, r3, #65536
 1298 0066 FB68     		ldr	r3, [r7, #12]
 1299 0068 9A62     		str	r2, [r3, #40]
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1300              		.loc 1 1091 0
 1301 006a FB68     		ldr	r3, [r7, #12]
 1302 006c 1B68     		ldr	r3, [r3]
 1303 006e 6FF00102 		mvn	r2, #1
 1304 0072 1A60     		str	r2, [r3]
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1305              		.loc 1 1094 0
 1306 0074 0023     		movs	r3, #0
 1307              	.L71:
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1308              		.loc 1 1095 0
 1309 0076 1846     		mov	r0, r3
 1310 0078 1837     		adds	r7, r7, #24
 1311              	.LCFI40:
 1312              		.cfi_def_cfa_offset 8
 1313 007a BD46     		mov	sp, r7
 1314              	.LCFI41:
 1315              		.cfi_def_cfa_register 13
 1316              		@ sp needed
 1317 007c 80BD     		pop	{r7, pc}
 1318              		.cfi_endproc
 1319              	.LFE70:
 1321 007e 00BF     		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1322              		.align	2
 1323              		.global	HAL_ADC_Start_IT
 1324              		.thumb
 1325              		.thumb_func
 1327              	HAL_ADC_Start_IT:
 1328              	.LFB71:
ARM GAS  /tmp/ccLVxKvm.s 			page 53


1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1329              		.loc 1 1106 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 16
 1332              		@ frame_needed = 1, uses_anonymous_args = 0
 1333 0000 80B5     		push	{r7, lr}
 1334              	.LCFI42:
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 7, -8
 1337              		.cfi_offset 14, -4
 1338 0002 84B0     		sub	sp, sp, #16
 1339              	.LCFI43:
 1340              		.cfi_def_cfa_offset 24
 1341 0004 00AF     		add	r7, sp, #0
 1342              	.LCFI44:
 1343              		.cfi_def_cfa_register 7
 1344 0006 7860     		str	r0, [r7, #4]
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1345              		.loc 1 1107 0
 1346 0008 0023     		movs	r3, #0
 1347 000a FB73     		strb	r3, [r7, #15]
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1348              		.loc 1 1113 0
 1349 000c 7B68     		ldr	r3, [r7, #4]
 1350 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1351 0012 012B     		cmp	r3, #1
 1352 0014 01D1     		bne	.L74
 1353              		.loc 1 1113 0 is_stmt 0 discriminator 1
 1354 0016 0223     		movs	r3, #2
 1355 0018 6AE0     		b	.L75
 1356              	.L74:
 1357              		.loc 1 1113 0 discriminator 2
 1358 001a 7B68     		ldr	r3, [r7, #4]
 1359 001c 0122     		movs	r2, #1
 1360 001e 83F82420 		strb	r2, [r3, #36]
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 1361              		.loc 1 1116 0 is_stmt 1 discriminator 2
 1362 0022 7868     		ldr	r0, [r7, #4]
 1363 0024 FFF7FEFF 		bl	ADC_Enable
 1364 0028 0346     		mov	r3, r0
ARM GAS  /tmp/ccLVxKvm.s 			page 54


 1365 002a FB73     		strb	r3, [r7, #15]
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1366              		.loc 1 1119 0 discriminator 2
 1367 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1368 002e 002B     		cmp	r3, #0
 1369 0030 59D1     		bne	.L76
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1370              		.loc 1 1124 0
 1371 0032 7B68     		ldr	r3, [r7, #4]
 1372 0034 9B6A     		ldr	r3, [r3, #40]
 1373 0036 23F47063 		bic	r3, r3, #3840
 1374 003a 23F00103 		bic	r3, r3, #1
 1375 003e 43F48072 		orr	r2, r3, #256
 1376 0042 7B68     		ldr	r3, [r7, #4]
 1377 0044 9A62     		str	r2, [r3, #40]
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1378              		.loc 1 1134 0
 1379 0046 7B68     		ldr	r3, [r7, #4]
 1380 0048 9B6A     		ldr	r3, [r3, #40]
 1381 004a 23F48012 		bic	r2, r3, #1048576
 1382 004e 7B68     		ldr	r3, [r7, #4]
 1383 0050 9A62     		str	r2, [r3, #40]
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1384              		.loc 1 1138 0
 1385 0052 7B68     		ldr	r3, [r7, #4]
 1386 0054 1B68     		ldr	r3, [r3]
 1387 0056 5B68     		ldr	r3, [r3, #4]
 1388 0058 03F48063 		and	r3, r3, #1024
 1389 005c 002B     		cmp	r3, #0
 1390 005e 07D0     		beq	.L83
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1391              		.loc 1 1140 0
 1392 0060 7B68     		ldr	r3, [r7, #4]
 1393 0062 9B6A     		ldr	r3, [r3, #40]
 1394 0064 23F44053 		bic	r3, r3, #12288
 1395 0068 43F48052 		orr	r2, r3, #4096
 1396 006c 7B68     		ldr	r3, [r7, #4]
 1397 006e 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/ccLVxKvm.s 			page 55


 1398              	.L83:
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1399              		.loc 1 1157 0
 1400 0070 7B68     		ldr	r3, [r7, #4]
 1401 0072 9B6A     		ldr	r3, [r3, #40]
 1402 0074 03F48053 		and	r3, r3, #4096
 1403 0078 002B     		cmp	r3, #0
 1404 007a 06D0     		beq	.L78
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1405              		.loc 1 1160 0
 1406 007c 7B68     		ldr	r3, [r7, #4]
 1407 007e DB6A     		ldr	r3, [r3, #44]
 1408 0080 23F00602 		bic	r2, r3, #6
 1409 0084 7B68     		ldr	r3, [r7, #4]
 1410 0086 DA62     		str	r2, [r3, #44]
 1411 0088 02E0     		b	.L79
 1412              	.L78:
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1413              		.loc 1 1165 0
 1414 008a 7B68     		ldr	r3, [r7, #4]
 1415 008c 0022     		movs	r2, #0
 1416 008e DA62     		str	r2, [r3, #44]
 1417              	.L79:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1418              		.loc 1 1171 0
 1419 0090 7B68     		ldr	r3, [r7, #4]
 1420 0092 0022     		movs	r2, #0
 1421 0094 83F82420 		strb	r2, [r3, #36]
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
ARM GAS  /tmp/ccLVxKvm.s 			page 56


1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1422              		.loc 1 1175 0
 1423 0098 7B68     		ldr	r3, [r7, #4]
 1424 009a 1B68     		ldr	r3, [r3]
 1425 009c 6FF00202 		mvn	r2, #2
 1426 00a0 1A60     		str	r2, [r3]
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 1427              		.loc 1 1178 0
 1428 00a2 7B68     		ldr	r3, [r7, #4]
 1429 00a4 1B68     		ldr	r3, [r3]
 1430 00a6 7A68     		ldr	r2, [r7, #4]
 1431 00a8 1268     		ldr	r2, [r2]
 1432 00aa 5268     		ldr	r2, [r2, #4]
 1433 00ac 42F02002 		orr	r2, r2, #32
 1434 00b0 5A60     		str	r2, [r3, #4]
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 1435              		.loc 1 1187 0
 1436 00b2 7B68     		ldr	r3, [r7, #4]
 1437 00b4 1B68     		ldr	r3, [r3]
 1438 00b6 9B68     		ldr	r3, [r3, #8]
 1439 00b8 03F46023 		and	r3, r3, #917504
 1440 00bc B3F5602F 		cmp	r3, #917504
 1441 00c0 08D1     		bne	.L80
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1442              		.loc 1 1191 0
 1443 00c2 7B68     		ldr	r3, [r7, #4]
 1444 00c4 1B68     		ldr	r3, [r3]
 1445 00c6 7A68     		ldr	r2, [r7, #4]
 1446 00c8 1268     		ldr	r2, [r2]
 1447 00ca 9268     		ldr	r2, [r2, #8]
 1448 00cc 42F4A002 		orr	r2, r2, #5242880
 1449 00d0 9A60     		str	r2, [r3, #8]
 1450 00d2 0CE0     		b	.L82
 1451              	.L80:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1452              		.loc 1 1196 0
 1453 00d4 7B68     		ldr	r3, [r7, #4]
 1454 00d6 1B68     		ldr	r3, [r3]
 1455 00d8 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccLVxKvm.s 			page 57


 1456 00da 1268     		ldr	r2, [r2]
 1457 00dc 9268     		ldr	r2, [r2, #8]
 1458 00de 42F48012 		orr	r2, r2, #1048576
 1459 00e2 9A60     		str	r2, [r3, #8]
 1460 00e4 03E0     		b	.L82
 1461              	.L76:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1462              		.loc 1 1202 0
 1463 00e6 7B68     		ldr	r3, [r7, #4]
 1464 00e8 0022     		movs	r2, #0
 1465 00ea 83F82420 		strb	r2, [r3, #36]
 1466              	.L82:
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1467              		.loc 1 1206 0
 1468 00ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1469              	.L75:
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1470              		.loc 1 1207 0
 1471 00f0 1846     		mov	r0, r3
 1472 00f2 1037     		adds	r7, r7, #16
 1473              	.LCFI45:
 1474              		.cfi_def_cfa_offset 8
 1475 00f4 BD46     		mov	sp, r7
 1476              	.LCFI46:
 1477              		.cfi_def_cfa_register 13
 1478              		@ sp needed
 1479 00f6 80BD     		pop	{r7, pc}
 1480              		.cfi_endproc
 1481              	.LFE71:
 1483              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1484              		.align	2
 1485              		.global	HAL_ADC_Stop_IT
 1486              		.thumb
 1487              		.thumb_func
 1489              	HAL_ADC_Stop_IT:
 1490              	.LFB72:
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1491              		.loc 1 1217 0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccLVxKvm.s 			page 58


 1494              		@ frame_needed = 1, uses_anonymous_args = 0
 1495 0000 80B5     		push	{r7, lr}
 1496              	.LCFI47:
 1497              		.cfi_def_cfa_offset 8
 1498              		.cfi_offset 7, -8
 1499              		.cfi_offset 14, -4
 1500 0002 84B0     		sub	sp, sp, #16
 1501              	.LCFI48:
 1502              		.cfi_def_cfa_offset 24
 1503 0004 00AF     		add	r7, sp, #0
 1504              	.LCFI49:
 1505              		.cfi_def_cfa_register 7
 1506 0006 7860     		str	r0, [r7, #4]
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1507              		.loc 1 1218 0
 1508 0008 0023     		movs	r3, #0
 1509 000a FB73     		strb	r3, [r7, #15]
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1510              		.loc 1 1224 0
 1511 000c 7B68     		ldr	r3, [r7, #4]
 1512 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1513 0012 012B     		cmp	r3, #1
 1514 0014 01D1     		bne	.L85
 1515              		.loc 1 1224 0 is_stmt 0 discriminator 1
 1516 0016 0223     		movs	r3, #2
 1517 0018 22E0     		b	.L86
 1518              	.L85:
 1519              		.loc 1 1224 0 discriminator 2
 1520 001a 7B68     		ldr	r3, [r7, #4]
 1521 001c 0122     		movs	r2, #1
 1522 001e 83F82420 		strb	r2, [r3, #36]
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1523              		.loc 1 1228 0 is_stmt 1 discriminator 2
 1524 0022 7868     		ldr	r0, [r7, #4]
 1525 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1526 0028 0346     		mov	r3, r0
 1527 002a FB73     		strb	r3, [r7, #15]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1528              		.loc 1 1231 0 discriminator 2
 1529 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1530 002e 002B     		cmp	r3, #0
 1531 0030 11D1     		bne	.L87
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1532              		.loc 1 1234 0
 1533 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLVxKvm.s 			page 59


 1534 0034 1B68     		ldr	r3, [r3]
 1535 0036 7A68     		ldr	r2, [r7, #4]
 1536 0038 1268     		ldr	r2, [r2]
 1537 003a 5268     		ldr	r2, [r2, #4]
 1538 003c 22F02002 		bic	r2, r2, #32
 1539 0040 5A60     		str	r2, [r3, #4]
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1540              		.loc 1 1237 0
 1541 0042 7B68     		ldr	r3, [r7, #4]
 1542 0044 9B6A     		ldr	r3, [r3, #40]
 1543 0046 23F48853 		bic	r3, r3, #4352
 1544 004a 23F00103 		bic	r3, r3, #1
 1545 004e 43F00102 		orr	r2, r3, #1
 1546 0052 7B68     		ldr	r3, [r7, #4]
 1547 0054 9A62     		str	r2, [r3, #40]
 1548              	.L87:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1549              		.loc 1 1243 0
 1550 0056 7B68     		ldr	r3, [r7, #4]
 1551 0058 0022     		movs	r2, #0
 1552 005a 83F82420 		strb	r2, [r3, #36]
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1553              		.loc 1 1246 0
 1554 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1555              	.L86:
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1556              		.loc 1 1247 0
 1557 0060 1846     		mov	r0, r3
 1558 0062 1037     		adds	r7, r7, #16
 1559              	.LCFI50:
 1560              		.cfi_def_cfa_offset 8
 1561 0064 BD46     		mov	sp, r7
 1562              	.LCFI51:
 1563              		.cfi_def_cfa_register 13
 1564              		@ sp needed
 1565 0066 80BD     		pop	{r7, pc}
 1566              		.cfi_endproc
 1567              	.LFE72:
 1569              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1570              		.align	2
 1571              		.global	HAL_ADC_Start_DMA
 1572              		.thumb
 1573              		.thumb_func
 1575              	HAL_ADC_Start_DMA:
 1576              	.LFB73:
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
ARM GAS  /tmp/ccLVxKvm.s 			page 60


1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1577              		.loc 1 1274 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 24
 1580              		@ frame_needed = 1, uses_anonymous_args = 0
 1581 0000 80B5     		push	{r7, lr}
 1582              	.LCFI52:
 1583              		.cfi_def_cfa_offset 8
 1584              		.cfi_offset 7, -8
 1585              		.cfi_offset 14, -4
 1586 0002 86B0     		sub	sp, sp, #24
 1587              	.LCFI53:
 1588              		.cfi_def_cfa_offset 32
 1589 0004 00AF     		add	r7, sp, #0
 1590              	.LCFI54:
 1591              		.cfi_def_cfa_register 7
 1592 0006 F860     		str	r0, [r7, #12]
 1593 0008 B960     		str	r1, [r7, #8]
 1594 000a 7A60     		str	r2, [r7, #4]
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1595              		.loc 1 1275 0
 1596 000c 0023     		movs	r3, #0
 1597 000e FB75     		strb	r3, [r7, #23]
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
ARM GAS  /tmp/ccLVxKvm.s 			page 61


 1598              		.loc 1 1286 0
 1599 0010 FB68     		ldr	r3, [r7, #12]
 1600 0012 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1601 0016 012B     		cmp	r3, #1
 1602 0018 01D1     		bne	.L89
 1603              		.loc 1 1286 0 is_stmt 0 discriminator 1
 1604 001a 0223     		movs	r3, #2
 1605 001c 82E0     		b	.L90
 1606              	.L89:
 1607              		.loc 1 1286 0 discriminator 2
 1608 001e FB68     		ldr	r3, [r7, #12]
 1609 0020 0122     		movs	r2, #1
 1610 0022 83F82420 		strb	r2, [r3, #36]
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 1611              		.loc 1 1289 0 is_stmt 1 discriminator 2
 1612 0026 F868     		ldr	r0, [r7, #12]
 1613 0028 FFF7FEFF 		bl	ADC_Enable
 1614 002c 0346     		mov	r3, r0
 1615 002e FB75     		strb	r3, [r7, #23]
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1616              		.loc 1 1292 0 discriminator 2
 1617 0030 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1618 0032 002B     		cmp	r3, #0
 1619 0034 71D1     		bne	.L91
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1620              		.loc 1 1297 0
 1621 0036 FB68     		ldr	r3, [r7, #12]
 1622 0038 9B6A     		ldr	r3, [r3, #40]
 1623 003a 23F47063 		bic	r3, r3, #3840
 1624 003e 23F00103 		bic	r3, r3, #1
 1625 0042 43F48072 		orr	r2, r3, #256
 1626 0046 FB68     		ldr	r3, [r7, #12]
 1627 0048 9A62     		str	r2, [r3, #40]
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1628              		.loc 1 1307 0
 1629 004a FB68     		ldr	r3, [r7, #12]
 1630 004c 9B6A     		ldr	r3, [r3, #40]
 1631 004e 23F48012 		bic	r2, r3, #1048576
 1632 0052 FB68     		ldr	r3, [r7, #12]
 1633 0054 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/ccLVxKvm.s 			page 62


1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1634              		.loc 1 1311 0
 1635 0056 FB68     		ldr	r3, [r7, #12]
 1636 0058 1B68     		ldr	r3, [r3]
 1637 005a 5B68     		ldr	r3, [r3, #4]
 1638 005c 03F48063 		and	r3, r3, #1024
 1639 0060 002B     		cmp	r3, #0
 1640 0062 07D0     		beq	.L98
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1641              		.loc 1 1313 0
 1642 0064 FB68     		ldr	r3, [r7, #12]
 1643 0066 9B6A     		ldr	r3, [r3, #40]
 1644 0068 23F44053 		bic	r3, r3, #12288
 1645 006c 43F48052 		orr	r2, r3, #4096
 1646 0070 FB68     		ldr	r3, [r7, #12]
 1647 0072 9A62     		str	r2, [r3, #40]
 1648              	.L98:
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1649              		.loc 1 1330 0
 1650 0074 FB68     		ldr	r3, [r7, #12]
 1651 0076 9B6A     		ldr	r3, [r3, #40]
 1652 0078 03F48053 		and	r3, r3, #4096
 1653 007c 002B     		cmp	r3, #0
 1654 007e 06D0     		beq	.L93
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1655              		.loc 1 1333 0
 1656 0080 FB68     		ldr	r3, [r7, #12]
 1657 0082 DB6A     		ldr	r3, [r3, #44]
 1658 0084 23F00602 		bic	r2, r3, #6
 1659 0088 FB68     		ldr	r3, [r7, #12]
 1660 008a DA62     		str	r2, [r3, #44]
 1661 008c 02E0     		b	.L94
 1662              	.L93:
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
ARM GAS  /tmp/ccLVxKvm.s 			page 63


1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1663              		.loc 1 1338 0
 1664 008e FB68     		ldr	r3, [r7, #12]
 1665 0090 0022     		movs	r2, #0
 1666 0092 DA62     		str	r2, [r3, #44]
 1667              	.L94:
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1668              		.loc 1 1344 0
 1669 0094 FB68     		ldr	r3, [r7, #12]
 1670 0096 0022     		movs	r2, #0
 1671 0098 83F82420 		strb	r2, [r3, #36]
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1672              		.loc 1 1347 0
 1673 009c FB68     		ldr	r3, [r7, #12]
 1674 009e 1B6A     		ldr	r3, [r3, #32]
 1675 00a0 224A     		ldr	r2, .L100
 1676 00a2 9A62     		str	r2, [r3, #40]
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1677              		.loc 1 1350 0
 1678 00a4 FB68     		ldr	r3, [r7, #12]
 1679 00a6 1B6A     		ldr	r3, [r3, #32]
 1680 00a8 214A     		ldr	r2, .L100+4
 1681 00aa DA62     		str	r2, [r3, #44]
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1682              		.loc 1 1353 0
 1683 00ac FB68     		ldr	r3, [r7, #12]
 1684 00ae 1B6A     		ldr	r3, [r3, #32]
 1685 00b0 204A     		ldr	r2, .L100+8
 1686 00b2 1A63     		str	r2, [r3, #48]
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1687              		.loc 1 1362 0
 1688 00b4 FB68     		ldr	r3, [r7, #12]
 1689 00b6 1B68     		ldr	r3, [r3]
 1690 00b8 6FF00202 		mvn	r2, #2
 1691 00bc 1A60     		str	r2, [r3]
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/ccLVxKvm.s 			page 64


1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1692              		.loc 1 1365 0
 1693 00be FB68     		ldr	r3, [r7, #12]
 1694 00c0 1B68     		ldr	r3, [r3]
 1695 00c2 FA68     		ldr	r2, [r7, #12]
 1696 00c4 1268     		ldr	r2, [r2]
 1697 00c6 9268     		ldr	r2, [r2, #8]
 1698 00c8 42F48072 		orr	r2, r2, #256
 1699 00cc 9A60     		str	r2, [r3, #8]
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1700              		.loc 1 1368 0
 1701 00ce FB68     		ldr	r3, [r7, #12]
 1702 00d0 1A6A     		ldr	r2, [r3, #32]
 1703 00d2 FB68     		ldr	r3, [r7, #12]
 1704 00d4 1B68     		ldr	r3, [r3]
 1705 00d6 4C33     		adds	r3, r3, #76
 1706 00d8 1946     		mov	r1, r3
 1707 00da BB68     		ldr	r3, [r7, #8]
 1708 00dc 1046     		mov	r0, r2
 1709 00de 1A46     		mov	r2, r3
 1710 00e0 7B68     		ldr	r3, [r7, #4]
 1711 00e2 FFF7FEFF 		bl	HAL_DMA_Start_IT
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1712              		.loc 1 1374 0
 1713 00e6 FB68     		ldr	r3, [r7, #12]
 1714 00e8 1B68     		ldr	r3, [r3]
 1715 00ea 9B68     		ldr	r3, [r3, #8]
 1716 00ec 03F46023 		and	r3, r3, #917504
 1717 00f0 B3F5602F 		cmp	r3, #917504
 1718 00f4 08D1     		bne	.L95
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1719              		.loc 1 1377 0
 1720 00f6 FB68     		ldr	r3, [r7, #12]
 1721 00f8 1B68     		ldr	r3, [r3]
 1722 00fa FA68     		ldr	r2, [r7, #12]
 1723 00fc 1268     		ldr	r2, [r2]
 1724 00fe 9268     		ldr	r2, [r2, #8]
 1725 0100 42F4A002 		orr	r2, r2, #5242880
 1726 0104 9A60     		str	r2, [r3, #8]
 1727 0106 0CE0     		b	.L99
 1728              	.L95:
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1729              		.loc 1 1382 0
ARM GAS  /tmp/ccLVxKvm.s 			page 65


 1730 0108 FB68     		ldr	r3, [r7, #12]
 1731 010a 1B68     		ldr	r3, [r3]
 1732 010c FA68     		ldr	r2, [r7, #12]
 1733 010e 1268     		ldr	r2, [r2]
 1734 0110 9268     		ldr	r2, [r2, #8]
 1735 0112 42F48012 		orr	r2, r2, #1048576
 1736 0116 9A60     		str	r2, [r3, #8]
 1737 0118 03E0     		b	.L99
 1738              	.L91:
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1739              		.loc 1 1388 0
 1740 011a FB68     		ldr	r3, [r7, #12]
 1741 011c 0022     		movs	r2, #0
 1742 011e 83F82420 		strb	r2, [r3, #36]
 1743              	.L99:
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1744              		.loc 1 1397 0
 1745 0122 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1746              	.L90:
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1747              		.loc 1 1398 0
 1748 0124 1846     		mov	r0, r3
 1749 0126 1837     		adds	r7, r7, #24
 1750              	.LCFI55:
 1751              		.cfi_def_cfa_offset 8
 1752 0128 BD46     		mov	sp, r7
 1753              	.LCFI56:
 1754              		.cfi_def_cfa_register 13
 1755              		@ sp needed
 1756 012a 80BD     		pop	{r7, pc}
 1757              	.L101:
 1758              		.align	2
 1759              	.L100:
 1760 012c 00000000 		.word	ADC_DMAConvCplt
 1761 0130 00000000 		.word	ADC_DMAHalfConvCplt
 1762 0134 00000000 		.word	ADC_DMAError
 1763              		.cfi_endproc
 1764              	.LFE73:
 1766              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1767              		.align	2
 1768              		.global	HAL_ADC_Stop_DMA
 1769              		.thumb
 1770              		.thumb_func
 1772              	HAL_ADC_Stop_DMA:
ARM GAS  /tmp/ccLVxKvm.s 			page 66


 1773              	.LFB74:
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1774              		.loc 1 1415 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 16
 1777              		@ frame_needed = 1, uses_anonymous_args = 0
 1778 0000 80B5     		push	{r7, lr}
 1779              	.LCFI57:
 1780              		.cfi_def_cfa_offset 8
 1781              		.cfi_offset 7, -8
 1782              		.cfi_offset 14, -4
 1783 0002 84B0     		sub	sp, sp, #16
 1784              	.LCFI58:
 1785              		.cfi_def_cfa_offset 24
 1786 0004 00AF     		add	r7, sp, #0
 1787              	.LCFI59:
 1788              		.cfi_def_cfa_register 7
 1789 0006 7860     		str	r0, [r7, #4]
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1790              		.loc 1 1416 0
 1791 0008 0023     		movs	r3, #0
 1792 000a FB73     		strb	r3, [r7, #15]
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1793              		.loc 1 1422 0
 1794 000c 7B68     		ldr	r3, [r7, #4]
 1795 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1796 0012 012B     		cmp	r3, #1
 1797 0014 01D1     		bne	.L103
 1798              		.loc 1 1422 0 is_stmt 0 discriminator 1
 1799 0016 0223     		movs	r3, #2
 1800 0018 33E0     		b	.L104
 1801              	.L103:
 1802              		.loc 1 1422 0 discriminator 2
 1803 001a 7B68     		ldr	r3, [r7, #4]
 1804 001c 0122     		movs	r2, #1
 1805 001e 83F82420 		strb	r2, [r3, #36]
ARM GAS  /tmp/ccLVxKvm.s 			page 67


1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1806              		.loc 1 1426 0 is_stmt 1 discriminator 2
 1807 0022 7868     		ldr	r0, [r7, #4]
 1808 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1809 0028 0346     		mov	r3, r0
 1810 002a FB73     		strb	r3, [r7, #15]
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1811              		.loc 1 1429 0 discriminator 2
 1812 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1813 002e 002B     		cmp	r3, #0
 1814 0030 22D1     		bne	.L105
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1815              		.loc 1 1432 0
 1816 0032 7B68     		ldr	r3, [r7, #4]
 1817 0034 1B68     		ldr	r3, [r3]
 1818 0036 7A68     		ldr	r2, [r7, #4]
 1819 0038 1268     		ldr	r2, [r2]
 1820 003a 9268     		ldr	r2, [r2, #8]
 1821 003c 22F48072 		bic	r2, r2, #256
 1822 0040 9A60     		str	r2, [r3, #8]
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1823              		.loc 1 1436 0
 1824 0042 7B68     		ldr	r3, [r7, #4]
 1825 0044 1B6A     		ldr	r3, [r3, #32]
 1826 0046 1846     		mov	r0, r3
 1827 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 1828 004c 0346     		mov	r3, r0
 1829 004e FB73     		strb	r3, [r7, #15]
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1830              		.loc 1 1439 0
 1831 0050 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1832 0052 002B     		cmp	r3, #0
 1833 0054 0AD1     		bne	.L106
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1834              		.loc 1 1442 0
 1835 0056 7B68     		ldr	r3, [r7, #4]
 1836 0058 9B6A     		ldr	r3, [r3, #40]
 1837 005a 23F48853 		bic	r3, r3, #4352
 1838 005e 23F00103 		bic	r3, r3, #1
 1839 0062 43F00102 		orr	r2, r3, #1
 1840 0066 7B68     		ldr	r3, [r7, #4]
 1841 0068 9A62     		str	r2, [r3, #40]
 1842 006a 05E0     		b	.L105
ARM GAS  /tmp/ccLVxKvm.s 			page 68


 1843              	.L106:
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1844              		.loc 1 1449 0
 1845 006c 7B68     		ldr	r3, [r7, #4]
 1846 006e 9B6A     		ldr	r3, [r3, #40]
 1847 0070 43F04002 		orr	r2, r3, #64
 1848 0074 7B68     		ldr	r3, [r7, #4]
 1849 0076 9A62     		str	r2, [r3, #40]
 1850              	.L105:
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1851              		.loc 1 1454 0
 1852 0078 7B68     		ldr	r3, [r7, #4]
 1853 007a 0022     		movs	r2, #0
 1854 007c 83F82420 		strb	r2, [r3, #36]
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1855              		.loc 1 1457 0
 1856 0080 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1857              	.L104:
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1858              		.loc 1 1458 0
 1859 0082 1846     		mov	r0, r3
 1860 0084 1037     		adds	r7, r7, #16
 1861              	.LCFI60:
 1862              		.cfi_def_cfa_offset 8
 1863 0086 BD46     		mov	sp, r7
 1864              	.LCFI61:
 1865              		.cfi_def_cfa_register 13
 1866              		@ sp needed
 1867 0088 80BD     		pop	{r7, pc}
 1868              		.cfi_endproc
 1869              	.LFE74:
 1871 008a 00BF     		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1872              		.align	2
 1873              		.global	HAL_ADC_GetValue
 1874              		.thumb
 1875              		.thumb_func
 1877              	HAL_ADC_GetValue:
 1878              	.LFB75:
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
ARM GAS  /tmp/ccLVxKvm.s 			page 69


1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1879              		.loc 1 1480 0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 8
 1882              		@ frame_needed = 1, uses_anonymous_args = 0
 1883              		@ link register save eliminated.
 1884 0000 80B4     		push	{r7}
 1885              	.LCFI62:
 1886              		.cfi_def_cfa_offset 4
 1887              		.cfi_offset 7, -4
 1888 0002 83B0     		sub	sp, sp, #12
 1889              	.LCFI63:
 1890              		.cfi_def_cfa_offset 16
 1891 0004 00AF     		add	r7, sp, #0
 1892              	.LCFI64:
 1893              		.cfi_def_cfa_register 7
 1894 0006 7860     		str	r0, [r7, #4]
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 1895              		.loc 1 1488 0
 1896 0008 7B68     		ldr	r3, [r7, #4]
 1897 000a 1B68     		ldr	r3, [r3]
 1898 000c DB6C     		ldr	r3, [r3, #76]
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1899              		.loc 1 1489 0
 1900 000e 1846     		mov	r0, r3
 1901 0010 0C37     		adds	r7, r7, #12
 1902              	.LCFI65:
 1903              		.cfi_def_cfa_offset 4
 1904 0012 BD46     		mov	sp, r7
 1905              	.LCFI66:
 1906              		.cfi_def_cfa_register 13
 1907              		@ sp needed
 1908 0014 5DF8047B 		ldr	r7, [sp], #4
 1909              	.LCFI67:
 1910              		.cfi_restore 7
 1911              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccLVxKvm.s 			page 70


 1912 0018 7047     		bx	lr
 1913              		.cfi_endproc
 1914              	.LFE75:
 1916 001a 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1917              		.align	2
 1918              		.global	HAL_ADC_IRQHandler
 1919              		.thumb
 1920              		.thumb_func
 1922              	HAL_ADC_IRQHandler:
 1923              	.LFB76:
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1924              		.loc 1 1497 0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 8
 1927              		@ frame_needed = 1, uses_anonymous_args = 0
 1928 0000 80B5     		push	{r7, lr}
 1929              	.LCFI68:
 1930              		.cfi_def_cfa_offset 8
 1931              		.cfi_offset 7, -8
 1932              		.cfi_offset 14, -4
 1933 0002 82B0     		sub	sp, sp, #8
 1934              	.LCFI69:
 1935              		.cfi_def_cfa_offset 16
 1936 0004 00AF     		add	r7, sp, #0
 1937              	.LCFI70:
 1938              		.cfi_def_cfa_register 7
 1939 0006 7860     		str	r0, [r7, #4]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 1940              		.loc 1 1505 0
 1941 0008 7B68     		ldr	r3, [r7, #4]
 1942 000a 1B68     		ldr	r3, [r3]
 1943 000c 5B68     		ldr	r3, [r3, #4]
 1944 000e 03F02003 		and	r3, r3, #32
 1945 0012 002B     		cmp	r3, #0
 1946 0014 40D0     		beq	.L110
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 1947              		.loc 1 1507 0
 1948 0016 7B68     		ldr	r3, [r7, #4]
 1949 0018 1B68     		ldr	r3, [r3]
 1950 001a 1B68     		ldr	r3, [r3]
 1951 001c 03F00203 		and	r3, r3, #2
 1952 0020 002B     		cmp	r3, #0
ARM GAS  /tmp/ccLVxKvm.s 			page 71


 1953 0022 39D0     		beq	.L110
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 1954              		.loc 1 1510 0
 1955 0024 7B68     		ldr	r3, [r7, #4]
 1956 0026 9B6A     		ldr	r3, [r3, #40]
 1957 0028 03F01003 		and	r3, r3, #16
 1958 002c 002B     		cmp	r3, #0
 1959 002e 05D1     		bne	.L111
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 1960              		.loc 1 1513 0
 1961 0030 7B68     		ldr	r3, [r7, #4]
 1962 0032 9B6A     		ldr	r3, [r3, #40]
 1963 0034 43F40072 		orr	r2, r3, #512
 1964 0038 7B68     		ldr	r3, [r7, #4]
 1965 003a 9A62     		str	r2, [r3, #40]
 1966              	.L111:
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1967              		.loc 1 1521 0
 1968 003c 7B68     		ldr	r3, [r7, #4]
 1969 003e 1B68     		ldr	r3, [r3]
 1970 0040 9B68     		ldr	r3, [r3, #8]
 1971 0042 03F46023 		and	r3, r3, #917504
 1972 0046 B3F5602F 		cmp	r3, #917504
 1973 004a 1DD1     		bne	.L112
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 1974              		.loc 1 1522 0 discriminator 1
 1975 004c 7B68     		ldr	r3, [r7, #4]
 1976 004e DB68     		ldr	r3, [r3, #12]
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 1977              		.loc 1 1521 0 discriminator 1
 1978 0050 002B     		cmp	r3, #0
 1979 0052 19D1     		bne	.L112
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1980              		.loc 1 1525 0
 1981 0054 7B68     		ldr	r3, [r7, #4]
 1982 0056 1B68     		ldr	r3, [r3]
 1983 0058 7A68     		ldr	r2, [r7, #4]
 1984 005a 1268     		ldr	r2, [r2]
 1985 005c 5268     		ldr	r2, [r2, #4]
 1986 005e 22F02002 		bic	r2, r2, #32
 1987 0062 5A60     		str	r2, [r3, #4]
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
ARM GAS  /tmp/ccLVxKvm.s 			page 72


 1988              		.loc 1 1528 0
 1989 0064 7B68     		ldr	r3, [r7, #4]
 1990 0066 9B6A     		ldr	r3, [r3, #40]
 1991 0068 23F48072 		bic	r2, r3, #256
 1992 006c 7B68     		ldr	r3, [r7, #4]
 1993 006e 9A62     		str	r2, [r3, #40]
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1994              		.loc 1 1530 0
 1995 0070 7B68     		ldr	r3, [r7, #4]
 1996 0072 9B6A     		ldr	r3, [r3, #40]
 1997 0074 03F48053 		and	r3, r3, #4096
 1998 0078 002B     		cmp	r3, #0
 1999 007a 05D1     		bne	.L112
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2000              		.loc 1 1532 0
 2001 007c 7B68     		ldr	r3, [r7, #4]
 2002 007e 9B6A     		ldr	r3, [r3, #40]
 2003 0080 43F00102 		orr	r2, r3, #1
 2004 0084 7B68     		ldr	r3, [r7, #4]
 2005 0086 9A62     		str	r2, [r3, #40]
 2006              	.L112:
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2007              		.loc 1 1537 0
 2008 0088 7868     		ldr	r0, [r7, #4]
 2009 008a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 2010              		.loc 1 1540 0
 2011 008e 7B68     		ldr	r3, [r7, #4]
 2012 0090 1B68     		ldr	r3, [r3]
 2013 0092 6FF01202 		mvn	r2, #18
 2014 0096 1A60     		str	r2, [r3]
 2015              	.L110:
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 2016              		.loc 1 1545 0
 2017 0098 7B68     		ldr	r3, [r7, #4]
 2018 009a 1B68     		ldr	r3, [r3]
 2019 009c 5B68     		ldr	r3, [r3, #4]
 2020 009e 03F08003 		and	r3, r3, #128
 2021 00a2 002B     		cmp	r3, #0
 2022 00a4 4FD0     		beq	.L113
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 2023              		.loc 1 1547 0
 2024 00a6 7B68     		ldr	r3, [r7, #4]
 2025 00a8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLVxKvm.s 			page 73


 2026 00aa 1B68     		ldr	r3, [r3]
 2027 00ac 03F00403 		and	r3, r3, #4
 2028 00b0 002B     		cmp	r3, #0
 2029 00b2 48D0     		beq	.L113
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2030              		.loc 1 1550 0
 2031 00b4 7B68     		ldr	r3, [r7, #4]
 2032 00b6 9B6A     		ldr	r3, [r3, #40]
 2033 00b8 03F01003 		and	r3, r3, #16
 2034 00bc 002B     		cmp	r3, #0
 2035 00be 05D1     		bne	.L114
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2036              		.loc 1 1553 0
 2037 00c0 7B68     		ldr	r3, [r7, #4]
 2038 00c2 9B6A     		ldr	r3, [r3, #40]
 2039 00c4 43F40052 		orr	r2, r3, #8192
 2040 00c8 7B68     		ldr	r3, [r7, #4]
 2041 00ca 9A62     		str	r2, [r3, #40]
 2042              	.L114:
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 2043              		.loc 1 1563 0
 2044 00cc 7B68     		ldr	r3, [r7, #4]
 2045 00ce 1B68     		ldr	r3, [r3]
 2046 00d0 9B68     		ldr	r3, [r3, #8]
 2047 00d2 03F4E043 		and	r3, r3, #28672
 2048 00d6 B3F5E04F 		cmp	r3, #28672
 2049 00da 12D0     		beq	.L115
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2050              		.loc 1 1564 0 discriminator 1
 2051 00dc 7B68     		ldr	r3, [r7, #4]
 2052 00de 1B68     		ldr	r3, [r3]
 2053 00e0 5B68     		ldr	r3, [r3, #4]
 2054 00e2 03F48063 		and	r3, r3, #1024
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2055              		.loc 1 1563 0 discriminator 1
 2056 00e6 002B     		cmp	r3, #0
 2057 00e8 25D1     		bne	.L116
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2058              		.loc 1 1565 0
 2059 00ea 7B68     		ldr	r3, [r7, #4]
 2060 00ec 1B68     		ldr	r3, [r3]
 2061 00ee 9B68     		ldr	r3, [r3, #8]
 2062 00f0 03F46023 		and	r3, r3, #917504
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
ARM GAS  /tmp/ccLVxKvm.s 			page 74


 2063              		.loc 1 1564 0
 2064 00f4 B3F5602F 		cmp	r3, #917504
 2065 00f8 1DD1     		bne	.L116
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 2066              		.loc 1 1566 0
 2067 00fa 7B68     		ldr	r3, [r7, #4]
 2068 00fc DB68     		ldr	r3, [r3, #12]
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2069              		.loc 1 1565 0
 2070 00fe 002B     		cmp	r3, #0
 2071 0100 19D1     		bne	.L116
 2072              	.L115:
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 2073              		.loc 1 1569 0
 2074 0102 7B68     		ldr	r3, [r7, #4]
 2075 0104 1B68     		ldr	r3, [r3]
 2076 0106 7A68     		ldr	r2, [r7, #4]
 2077 0108 1268     		ldr	r2, [r2]
 2078 010a 5268     		ldr	r2, [r2, #4]
 2079 010c 22F08002 		bic	r2, r2, #128
 2080 0110 5A60     		str	r2, [r3, #4]
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 2081              		.loc 1 1572 0
 2082 0112 7B68     		ldr	r3, [r7, #4]
 2083 0114 9B6A     		ldr	r3, [r3, #40]
 2084 0116 23F48052 		bic	r2, r3, #4096
 2085 011a 7B68     		ldr	r3, [r7, #4]
 2086 011c 9A62     		str	r2, [r3, #40]
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2087              		.loc 1 1574 0
 2088 011e 7B68     		ldr	r3, [r7, #4]
 2089 0120 9B6A     		ldr	r3, [r3, #40]
 2090 0122 03F48073 		and	r3, r3, #256
 2091 0126 002B     		cmp	r3, #0
 2092 0128 05D1     		bne	.L116
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2093              		.loc 1 1576 0
 2094 012a 7B68     		ldr	r3, [r7, #4]
 2095 012c 9B6A     		ldr	r3, [r3, #40]
 2096 012e 43F00102 		orr	r2, r3, #1
 2097 0132 7B68     		ldr	r3, [r7, #4]
 2098 0134 9A62     		str	r2, [r3, #40]
 2099              	.L116:
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
 2100              		.loc 1 1581 0
 2101 0136 7868     		ldr	r0, [r7, #4]
 2102 0138 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
ARM GAS  /tmp/ccLVxKvm.s 			page 75


1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 2103              		.loc 1 1584 0
 2104 013c 7B68     		ldr	r3, [r7, #4]
 2105 013e 1B68     		ldr	r3, [r3]
 2106 0140 6FF00C02 		mvn	r2, #12
 2107 0144 1A60     		str	r2, [r3]
 2108              	.L113:
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2109              		.loc 1 1589 0
 2110 0146 7B68     		ldr	r3, [r7, #4]
 2111 0148 1B68     		ldr	r3, [r3]
 2112 014a 5B68     		ldr	r3, [r3, #4]
 2113 014c 03F04003 		and	r3, r3, #64
 2114 0150 002B     		cmp	r3, #0
 2115 0152 14D0     		beq	.L109
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 2116              		.loc 1 1591 0
 2117 0154 7B68     		ldr	r3, [r7, #4]
 2118 0156 1B68     		ldr	r3, [r3]
 2119 0158 1B68     		ldr	r3, [r3]
 2120 015a 03F00103 		and	r3, r3, #1
 2121 015e 002B     		cmp	r3, #0
 2122 0160 0DD0     		beq	.L109
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2123              		.loc 1 1594 0
 2124 0162 7B68     		ldr	r3, [r7, #4]
 2125 0164 9B6A     		ldr	r3, [r3, #40]
 2126 0166 43F48032 		orr	r2, r3, #65536
 2127 016a 7B68     		ldr	r3, [r7, #4]
 2128 016c 9A62     		str	r2, [r3, #40]
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 2129              		.loc 1 1597 0
 2130 016e 7868     		ldr	r0, [r7, #4]
 2131 0170 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2132              		.loc 1 1600 0
 2133 0174 7B68     		ldr	r3, [r7, #4]
 2134 0176 1B68     		ldr	r3, [r3]
 2135 0178 6FF00102 		mvn	r2, #1
 2136 017c 1A60     		str	r2, [r3]
 2137              	.L109:
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/ccLVxKvm.s 			page 76


1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2138              		.loc 1 1604 0
 2139 017e 0837     		adds	r7, r7, #8
 2140              	.LCFI71:
 2141              		.cfi_def_cfa_offset 8
 2142 0180 BD46     		mov	sp, r7
 2143              	.LCFI72:
 2144              		.cfi_def_cfa_register 13
 2145              		@ sp needed
 2146 0182 80BD     		pop	{r7, pc}
 2147              		.cfi_endproc
 2148              	.LFE76:
 2150              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2151              		.align	2
 2152              		.weak	HAL_ADC_ConvCpltCallback
 2153              		.thumb
 2154              		.thumb_func
 2156              	HAL_ADC_ConvCpltCallback:
 2157              	.LFB77:
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2158              		.loc 1 1612 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 8
 2161              		@ frame_needed = 1, uses_anonymous_args = 0
 2162              		@ link register save eliminated.
 2163 0000 80B4     		push	{r7}
 2164              	.LCFI73:
 2165              		.cfi_def_cfa_offset 4
 2166              		.cfi_offset 7, -4
 2167 0002 83B0     		sub	sp, sp, #12
 2168              	.LCFI74:
 2169              		.cfi_def_cfa_offset 16
 2170 0004 00AF     		add	r7, sp, #0
 2171              	.LCFI75:
 2172              		.cfi_def_cfa_register 7
 2173 0006 7860     		str	r0, [r7, #4]
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2174              		.loc 1 1618 0
 2175 0008 0C37     		adds	r7, r7, #12
 2176              	.LCFI76:
 2177              		.cfi_def_cfa_offset 4
 2178 000a BD46     		mov	sp, r7
 2179              	.LCFI77:
 2180              		.cfi_def_cfa_register 13
 2181              		@ sp needed
ARM GAS  /tmp/ccLVxKvm.s 			page 77


 2182 000c 5DF8047B 		ldr	r7, [sp], #4
 2183              	.LCFI78:
 2184              		.cfi_restore 7
 2185              		.cfi_def_cfa_offset 0
 2186 0010 7047     		bx	lr
 2187              		.cfi_endproc
 2188              	.LFE77:
 2190 0012 00BF     		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2191              		.align	2
 2192              		.weak	HAL_ADC_ConvHalfCpltCallback
 2193              		.thumb
 2194              		.thumb_func
 2196              	HAL_ADC_ConvHalfCpltCallback:
 2197              	.LFB78:
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2198              		.loc 1 1626 0
 2199              		.cfi_startproc
 2200              		@ args = 0, pretend = 0, frame = 8
 2201              		@ frame_needed = 1, uses_anonymous_args = 0
 2202              		@ link register save eliminated.
 2203 0000 80B4     		push	{r7}
 2204              	.LCFI79:
 2205              		.cfi_def_cfa_offset 4
 2206              		.cfi_offset 7, -4
 2207 0002 83B0     		sub	sp, sp, #12
 2208              	.LCFI80:
 2209              		.cfi_def_cfa_offset 16
 2210 0004 00AF     		add	r7, sp, #0
 2211              	.LCFI81:
 2212              		.cfi_def_cfa_register 7
 2213 0006 7860     		str	r0, [r7, #4]
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2214              		.loc 1 1632 0
 2215 0008 0C37     		adds	r7, r7, #12
 2216              	.LCFI82:
 2217              		.cfi_def_cfa_offset 4
 2218 000a BD46     		mov	sp, r7
 2219              	.LCFI83:
 2220              		.cfi_def_cfa_register 13
 2221              		@ sp needed
 2222 000c 5DF8047B 		ldr	r7, [sp], #4
 2223              	.LCFI84:
 2224              		.cfi_restore 7
 2225              		.cfi_def_cfa_offset 0
 2226 0010 7047     		bx	lr
ARM GAS  /tmp/ccLVxKvm.s 			page 78


 2227              		.cfi_endproc
 2228              	.LFE78:
 2230 0012 00BF     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2231              		.align	2
 2232              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2233              		.thumb
 2234              		.thumb_func
 2236              	HAL_ADC_LevelOutOfWindowCallback:
 2237              	.LFB79:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2238              		.loc 1 1640 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 8
 2241              		@ frame_needed = 1, uses_anonymous_args = 0
 2242              		@ link register save eliminated.
 2243 0000 80B4     		push	{r7}
 2244              	.LCFI85:
 2245              		.cfi_def_cfa_offset 4
 2246              		.cfi_offset 7, -4
 2247 0002 83B0     		sub	sp, sp, #12
 2248              	.LCFI86:
 2249              		.cfi_def_cfa_offset 16
 2250 0004 00AF     		add	r7, sp, #0
 2251              	.LCFI87:
 2252              		.cfi_def_cfa_register 7
 2253 0006 7860     		str	r0, [r7, #4]
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2254              		.loc 1 1646 0
 2255 0008 0C37     		adds	r7, r7, #12
 2256              	.LCFI88:
 2257              		.cfi_def_cfa_offset 4
 2258 000a BD46     		mov	sp, r7
 2259              	.LCFI89:
 2260              		.cfi_def_cfa_register 13
 2261              		@ sp needed
 2262 000c 5DF8047B 		ldr	r7, [sp], #4
 2263              	.LCFI90:
 2264              		.cfi_restore 7
 2265              		.cfi_def_cfa_offset 0
 2266 0010 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE79:
 2270 0012 00BF     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2271              		.align	2
 2272              		.weak	HAL_ADC_ErrorCallback
ARM GAS  /tmp/ccLVxKvm.s 			page 79


 2273              		.thumb
 2274              		.thumb_func
 2276              	HAL_ADC_ErrorCallback:
 2277              	.LFB80:
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2278              		.loc 1 1655 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 8
 2281              		@ frame_needed = 1, uses_anonymous_args = 0
 2282              		@ link register save eliminated.
 2283 0000 80B4     		push	{r7}
 2284              	.LCFI91:
 2285              		.cfi_def_cfa_offset 4
 2286              		.cfi_offset 7, -4
 2287 0002 83B0     		sub	sp, sp, #12
 2288              	.LCFI92:
 2289              		.cfi_def_cfa_offset 16
 2290 0004 00AF     		add	r7, sp, #0
 2291              	.LCFI93:
 2292              		.cfi_def_cfa_register 7
 2293 0006 7860     		str	r0, [r7, #4]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2294              		.loc 1 1661 0
 2295 0008 0C37     		adds	r7, r7, #12
 2296              	.LCFI94:
 2297              		.cfi_def_cfa_offset 4
 2298 000a BD46     		mov	sp, r7
 2299              	.LCFI95:
 2300              		.cfi_def_cfa_register 13
 2301              		@ sp needed
 2302 000c 5DF8047B 		ldr	r7, [sp], #4
 2303              	.LCFI96:
 2304              		.cfi_restore 7
 2305              		.cfi_def_cfa_offset 0
 2306 0010 7047     		bx	lr
 2307              		.cfi_endproc
 2308              	.LFE80:
 2310 0012 00BF     		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2311              		.align	2
 2312              		.global	HAL_ADC_ConfigChannel
 2313              		.thumb
 2314              		.thumb_func
 2316              	HAL_ADC_ConfigChannel:
 2317              	.LFB81:
ARM GAS  /tmp/ccLVxKvm.s 			page 80


1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
 2318              		.loc 1 1703 0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 96
 2321              		@ frame_needed = 1, uses_anonymous_args = 0
 2322              		@ link register save eliminated.
 2323 0000 90B4     		push	{r4, r7}
 2324              	.LCFI97:
 2325              		.cfi_def_cfa_offset 8
 2326              		.cfi_offset 4, -8
 2327              		.cfi_offset 7, -4
 2328 0002 98B0     		sub	sp, sp, #96
 2329              	.LCFI98:
 2330              		.cfi_def_cfa_offset 104
 2331 0004 00AF     		add	r7, sp, #0
 2332              	.LCFI99:
ARM GAS  /tmp/ccLVxKvm.s 			page 81


 2333              		.cfi_def_cfa_register 7
 2334 0006 7860     		str	r0, [r7, #4]
 2335 0008 3960     		str	r1, [r7]
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2336              		.loc 1 1704 0
 2337 000a 0023     		movs	r3, #0
 2338 000c 87F85F30 		strb	r3, [r7, #95]
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 2339              		.loc 1 1705 0
 2340 0010 0023     		movs	r3, #0
 2341 0012 BB60     		str	r3, [r7, #8]
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2342              		.loc 1 1714 0
 2343 0014 7B68     		ldr	r3, [r7, #4]
 2344 0016 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2345 001a 012B     		cmp	r3, #1
 2346 001c 01D1     		bne	.L123
 2347              		.loc 1 1714 0 is_stmt 0 discriminator 1
 2348 001e 0223     		movs	r3, #2
 2349 0020 39E1     		b	.L124
 2350              	.L123:
 2351              		.loc 1 1714 0 discriminator 2
 2352 0022 7B68     		ldr	r3, [r7, #4]
 2353 0024 0122     		movs	r2, #1
 2354 0026 83F82420 		strb	r2, [r3, #36]
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7)
 2355              		.loc 1 1719 0 is_stmt 1 discriminator 2
 2356 002a 3B68     		ldr	r3, [r7]
 2357 002c 5B68     		ldr	r3, [r3, #4]
 2358 002e 062B     		cmp	r3, #6
 2359 0030 2FD8     		bhi	.L125
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
 2360              		.loc 1 1721 0
 2361 0032 7B68     		ldr	r3, [r7, #4]
 2362 0034 1B68     		ldr	r3, [r3]
 2363 0036 7A68     		ldr	r2, [r7, #4]
 2364 0038 1268     		ldr	r2, [r2]
 2365 003a 516B     		ldr	r1, [r2, #52]
 2366 003c 4FF47872 		mov	r2, #992
 2367 0040 BA65     		str	r2, [r7, #88]
 2368              	.LBB34:
 2369              	.LBB35:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2370              		.loc 2 531 0
ARM GAS  /tmp/ccLVxKvm.s 			page 82


 2371 0042 BA6D     		ldr	r2, [r7, #88]
 2372              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2373 0044 92FAA2F2 		rbit r2, r2
 2374              	@ 0 "" 2
 2375              		.thumb
 2376 0048 7A65     		str	r2, [r7, #84]
 2377              		.loc 2 544 0
 2378 004a 7A6D     		ldr	r2, [r7, #84]
 2379              	.LBE35:
 2380              	.LBE34:
 2381              		.loc 1 1721 0
 2382 004c B2FA82F2 		clz	r2, r2
 2383 0050 1046     		mov	r0, r2
 2384 0052 3A68     		ldr	r2, [r7]
 2385 0054 5268     		ldr	r2, [r2, #4]
 2386 0056 013A     		subs	r2, r2, #1
 2387 0058 02FB00F2 		mul	r2, r2, r0
 2388 005c 1046     		mov	r0, r2
 2389 005e 1F22     		movs	r2, #31
 2390 0060 8240     		lsls	r2, r2, r0
 2391 0062 D243     		mvns	r2, r2
 2392 0064 1140     		ands	r1, r1, r2
 2393 0066 3A68     		ldr	r2, [r7]
 2394 0068 1268     		ldr	r2, [r2]
 2395 006a 4FF47870 		mov	r0, #992
 2396 006e 3865     		str	r0, [r7, #80]
 2397              	.LBB36:
 2398              	.LBB37:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2399              		.loc 2 531 0
 2400 0070 386D     		ldr	r0, [r7, #80]
 2401              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2402 0072 90FAA0F0 		rbit r0, r0
 2403              	@ 0 "" 2
 2404              		.thumb
 2405 0076 F864     		str	r0, [r7, #76]
 2406              		.loc 2 544 0
 2407 0078 F86C     		ldr	r0, [r7, #76]
 2408              	.LBE37:
 2409              	.LBE36:
 2410              		.loc 1 1721 0
 2411 007a B0FA80F0 		clz	r0, r0
 2412 007e 0446     		mov	r4, r0
 2413 0080 3868     		ldr	r0, [r7]
 2414 0082 4068     		ldr	r0, [r0, #4]
 2415 0084 0138     		subs	r0, r0, #1
 2416 0086 00FB04F0 		mul	r0, r0, r4
 2417 008a 8240     		lsls	r2, r2, r0
 2418 008c 0A43     		orrs	r2, r2, r1
 2419 008e 5A63     		str	r2, [r3, #52]
 2420 0090 62E0     		b	.L128
 2421              	.L125:
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13)
ARM GAS  /tmp/ccLVxKvm.s 			page 83


 2422              		.loc 1 1726 0
 2423 0092 3B68     		ldr	r3, [r7]
 2424 0094 5B68     		ldr	r3, [r3, #4]
 2425 0096 0C2B     		cmp	r3, #12
 2426 0098 2FD8     		bhi	.L129
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
 2427              		.loc 1 1728 0
 2428 009a 7B68     		ldr	r3, [r7, #4]
 2429 009c 1B68     		ldr	r3, [r3]
 2430 009e 7A68     		ldr	r2, [r7, #4]
 2431 00a0 1268     		ldr	r2, [r2]
 2432 00a2 116B     		ldr	r1, [r2, #48]
 2433 00a4 4FF47872 		mov	r2, #992
 2434 00a8 BA64     		str	r2, [r7, #72]
 2435              	.LBB38:
 2436              	.LBB39:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2437              		.loc 2 531 0
 2438 00aa BA6C     		ldr	r2, [r7, #72]
 2439              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2440 00ac 92FAA2F2 		rbit r2, r2
 2441              	@ 0 "" 2
 2442              		.thumb
 2443 00b0 7A64     		str	r2, [r7, #68]
 2444              		.loc 2 544 0
 2445 00b2 7A6C     		ldr	r2, [r7, #68]
 2446              	.LBE39:
 2447              	.LBE38:
 2448              		.loc 1 1728 0
 2449 00b4 B2FA82F2 		clz	r2, r2
 2450 00b8 1046     		mov	r0, r2
 2451 00ba 3A68     		ldr	r2, [r7]
 2452 00bc 5268     		ldr	r2, [r2, #4]
 2453 00be 073A     		subs	r2, r2, #7
 2454 00c0 02FB00F2 		mul	r2, r2, r0
 2455 00c4 1046     		mov	r0, r2
 2456 00c6 1F22     		movs	r2, #31
 2457 00c8 8240     		lsls	r2, r2, r0
 2458 00ca D243     		mvns	r2, r2
 2459 00cc 1140     		ands	r1, r1, r2
 2460 00ce 3A68     		ldr	r2, [r7]
 2461 00d0 1268     		ldr	r2, [r2]
 2462 00d2 4FF47870 		mov	r0, #992
 2463 00d6 3864     		str	r0, [r7, #64]
 2464              	.LBB40:
 2465              	.LBB41:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2466              		.loc 2 531 0
 2467 00d8 386C     		ldr	r0, [r7, #64]
 2468              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2469 00da 90FAA0F0 		rbit r0, r0
 2470              	@ 0 "" 2
 2471              		.thumb
 2472 00de F863     		str	r0, [r7, #60]
 2473              		.loc 2 544 0
 2474 00e0 F86B     		ldr	r0, [r7, #60]
ARM GAS  /tmp/ccLVxKvm.s 			page 84


 2475              	.LBE41:
 2476              	.LBE40:
 2477              		.loc 1 1728 0
 2478 00e2 B0FA80F0 		clz	r0, r0
 2479 00e6 0446     		mov	r4, r0
 2480 00e8 3868     		ldr	r0, [r7]
 2481 00ea 4068     		ldr	r0, [r0, #4]
 2482 00ec 0738     		subs	r0, r0, #7
 2483 00ee 00FB04F0 		mul	r0, r0, r4
 2484 00f2 8240     		lsls	r2, r2, r0
 2485 00f4 0A43     		orrs	r2, r2, r1
 2486 00f6 1A63     		str	r2, [r3, #48]
 2487 00f8 2EE0     		b	.L128
 2488              	.L129:
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
 2489              		.loc 1 1735 0
 2490 00fa 7B68     		ldr	r3, [r7, #4]
 2491 00fc 1B68     		ldr	r3, [r3]
 2492 00fe 7A68     		ldr	r2, [r7, #4]
 2493 0100 1268     		ldr	r2, [r2]
 2494 0102 D16A     		ldr	r1, [r2, #44]
 2495 0104 4FF47872 		mov	r2, #992
 2496 0108 BA63     		str	r2, [r7, #56]
 2497              	.LBB42:
 2498              	.LBB43:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2499              		.loc 2 531 0
 2500 010a BA6B     		ldr	r2, [r7, #56]
 2501              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2502 010c 92FAA2F2 		rbit r2, r2
 2503              	@ 0 "" 2
 2504              		.thumb
 2505 0110 7A63     		str	r2, [r7, #52]
 2506              		.loc 2 544 0
 2507 0112 7A6B     		ldr	r2, [r7, #52]
 2508              	.LBE43:
 2509              	.LBE42:
 2510              		.loc 1 1735 0
 2511 0114 B2FA82F2 		clz	r2, r2
 2512 0118 1046     		mov	r0, r2
 2513 011a 3A68     		ldr	r2, [r7]
 2514 011c 5268     		ldr	r2, [r2, #4]
 2515 011e 0D3A     		subs	r2, r2, #13
 2516 0120 02FB00F2 		mul	r2, r2, r0
 2517 0124 1046     		mov	r0, r2
 2518 0126 1F22     		movs	r2, #31
 2519 0128 8240     		lsls	r2, r2, r0
 2520 012a D243     		mvns	r2, r2
 2521 012c 1140     		ands	r1, r1, r2
 2522 012e 3A68     		ldr	r2, [r7]
 2523 0130 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccLVxKvm.s 			page 85


 2524 0132 4FF47870 		mov	r0, #992
 2525 0136 3863     		str	r0, [r7, #48]
 2526              	.LBB44:
 2527              	.LBB45:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2528              		.loc 2 531 0
 2529 0138 386B     		ldr	r0, [r7, #48]
 2530              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2531 013a 90FAA0F0 		rbit r0, r0
 2532              	@ 0 "" 2
 2533              		.thumb
 2534 013e F862     		str	r0, [r7, #44]
 2535              		.loc 2 544 0
 2536 0140 F86A     		ldr	r0, [r7, #44]
 2537              	.LBE45:
 2538              	.LBE44:
 2539              		.loc 1 1735 0
 2540 0142 B0FA80F0 		clz	r0, r0
 2541 0146 0446     		mov	r4, r0
 2542 0148 3868     		ldr	r0, [r7]
 2543 014a 4068     		ldr	r0, [r0, #4]
 2544 014c 0D38     		subs	r0, r0, #13
 2545 014e 00FB04F0 		mul	r0, r0, r4
 2546 0152 8240     		lsls	r2, r2, r0
 2547 0154 0A43     		orrs	r2, r2, r1
 2548 0156 DA62     		str	r2, [r3, #44]
 2549              	.L128:
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
 2550              		.loc 1 1743 0
 2551 0158 3B68     		ldr	r3, [r7]
 2552 015a 1B68     		ldr	r3, [r3]
 2553 015c 092B     		cmp	r3, #9
 2554 015e 2DD9     		bls	.L134
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
 2555              		.loc 1 1745 0
 2556 0160 7B68     		ldr	r3, [r7, #4]
 2557 0162 1B68     		ldr	r3, [r3]
 2558 0164 7A68     		ldr	r2, [r7, #4]
 2559 0166 1268     		ldr	r2, [r2]
 2560 0168 D168     		ldr	r1, [r2, #12]
 2561 016a 3822     		movs	r2, #56
 2562 016c BA62     		str	r2, [r7, #40]
 2563              	.LBB46:
 2564              	.LBB47:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2565              		.loc 2 531 0
 2566 016e BA6A     		ldr	r2, [r7, #40]
 2567              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2568 0170 92FAA2F2 		rbit r2, r2
ARM GAS  /tmp/ccLVxKvm.s 			page 86


 2569              	@ 0 "" 2
 2570              		.thumb
 2571 0174 7A62     		str	r2, [r7, #36]
 2572              		.loc 2 544 0
 2573 0176 7A6A     		ldr	r2, [r7, #36]
 2574              	.LBE47:
 2575              	.LBE46:
 2576              		.loc 1 1745 0
 2577 0178 B2FA82F2 		clz	r2, r2
 2578 017c 1046     		mov	r0, r2
 2579 017e 3A68     		ldr	r2, [r7]
 2580 0180 1268     		ldr	r2, [r2]
 2581 0182 0A3A     		subs	r2, r2, #10
 2582 0184 02FB00F2 		mul	r2, r2, r0
 2583 0188 1046     		mov	r0, r2
 2584 018a 0722     		movs	r2, #7
 2585 018c 8240     		lsls	r2, r2, r0
 2586 018e D243     		mvns	r2, r2
 2587 0190 1140     		ands	r1, r1, r2
 2588 0192 3A68     		ldr	r2, [r7]
 2589 0194 9268     		ldr	r2, [r2, #8]
 2590 0196 3820     		movs	r0, #56
 2591 0198 3862     		str	r0, [r7, #32]
 2592              	.LBB48:
 2593              	.LBB49:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2594              		.loc 2 531 0
 2595 019a 386A     		ldr	r0, [r7, #32]
 2596              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2597 019c 90FAA0F0 		rbit r0, r0
 2598              	@ 0 "" 2
 2599              		.thumb
 2600 01a0 F861     		str	r0, [r7, #28]
 2601              		.loc 2 544 0
 2602 01a2 F869     		ldr	r0, [r7, #28]
 2603              	.LBE49:
 2604              	.LBE48:
 2605              		.loc 1 1745 0
 2606 01a4 B0FA80F0 		clz	r0, r0
 2607 01a8 0446     		mov	r4, r0
 2608 01aa 3868     		ldr	r0, [r7]
 2609 01ac 0068     		ldr	r0, [r0]
 2610 01ae 0A38     		subs	r0, r0, #10
 2611 01b0 00FB04F0 		mul	r0, r0, r4
 2612 01b4 8240     		lsls	r2, r2, r0
 2613 01b6 0A43     		orrs	r2, r2, r1
 2614 01b8 DA60     		str	r2, [r3, #12]
 2615 01ba 2AE0     		b	.L137
 2616              	.L134:
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
 2617              		.loc 1 1751 0
 2618 01bc 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLVxKvm.s 			page 87


 2619 01be 1B68     		ldr	r3, [r3]
 2620 01c0 7A68     		ldr	r2, [r7, #4]
 2621 01c2 1268     		ldr	r2, [r2]
 2622 01c4 1169     		ldr	r1, [r2, #16]
 2623 01c6 3822     		movs	r2, #56
 2624 01c8 BA61     		str	r2, [r7, #24]
 2625              	.LBB50:
 2626              	.LBB51:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2627              		.loc 2 531 0
 2628 01ca BA69     		ldr	r2, [r7, #24]
 2629              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2630 01cc 92FAA2F2 		rbit r2, r2
 2631              	@ 0 "" 2
 2632              		.thumb
 2633 01d0 7A61     		str	r2, [r7, #20]
 2634              		.loc 2 544 0
 2635 01d2 7A69     		ldr	r2, [r7, #20]
 2636              	.LBE51:
 2637              	.LBE50:
 2638              		.loc 1 1751 0
 2639 01d4 B2FA82F2 		clz	r2, r2
 2640 01d8 1046     		mov	r0, r2
 2641 01da 3A68     		ldr	r2, [r7]
 2642 01dc 1268     		ldr	r2, [r2]
 2643 01de 02FB00F2 		mul	r2, r2, r0
 2644 01e2 1046     		mov	r0, r2
 2645 01e4 0722     		movs	r2, #7
 2646 01e6 8240     		lsls	r2, r2, r0
 2647 01e8 D243     		mvns	r2, r2
 2648 01ea 1140     		ands	r1, r1, r2
 2649 01ec 3A68     		ldr	r2, [r7]
 2650 01ee 9268     		ldr	r2, [r2, #8]
 2651 01f0 3820     		movs	r0, #56
 2652 01f2 3861     		str	r0, [r7, #16]
 2653              	.LBB52:
 2654              	.LBB53:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2655              		.loc 2 531 0
 2656 01f4 3869     		ldr	r0, [r7, #16]
 2657              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2658 01f6 90FAA0F0 		rbit r0, r0
 2659              	@ 0 "" 2
 2660              		.thumb
 2661 01fa F860     		str	r0, [r7, #12]
 2662              		.loc 2 544 0
 2663 01fc F868     		ldr	r0, [r7, #12]
 2664              	.LBE53:
 2665              	.LBE52:
 2666              		.loc 1 1751 0
 2667 01fe B0FA80F0 		clz	r0, r0
 2668 0202 0446     		mov	r4, r0
 2669 0204 3868     		ldr	r0, [r7]
 2670 0206 0068     		ldr	r0, [r0]
 2671 0208 00FB04F0 		mul	r0, r0, r4
 2672 020c 8240     		lsls	r2, r2, r0
 2673 020e 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccLVxKvm.s 			page 88


 2674 0210 1A61     		str	r2, [r3, #16]
 2675              	.L137:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 2676              		.loc 1 1758 0
 2677 0212 3B68     		ldr	r3, [r7]
 2678 0214 1B68     		ldr	r3, [r3]
 2679 0216 102B     		cmp	r3, #16
 2680 0218 03D0     		beq	.L140
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2681              		.loc 1 1759 0 discriminator 1
 2682 021a 3B68     		ldr	r3, [r7]
 2683 021c 1B68     		ldr	r3, [r3]
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2684              		.loc 1 1758 0 discriminator 1
 2685 021e 112B     		cmp	r3, #17
 2686 0220 33D1     		bne	.L141
 2687              	.L140:
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
 2688              		.loc 1 1764 0
 2689 0222 7B68     		ldr	r3, [r7, #4]
 2690 0224 1B68     		ldr	r3, [r3]
 2691 0226 1E4A     		ldr	r2, .L145
 2692 0228 9342     		cmp	r3, r2
 2693 022a 25D1     		bne	.L142
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2694              		.loc 1 1766 0
 2695 022c 7B68     		ldr	r3, [r7, #4]
 2696 022e 1B68     		ldr	r3, [r3]
 2697 0230 9B68     		ldr	r3, [r3, #8]
 2698 0232 03F40003 		and	r3, r3, #8388608
 2699 0236 002B     		cmp	r3, #0
 2700 0238 27D1     		bne	.L141
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2701              		.loc 1 1768 0
 2702 023a 7B68     		ldr	r3, [r7, #4]
 2703 023c 1B68     		ldr	r3, [r3]
 2704 023e 7A68     		ldr	r2, [r7, #4]
 2705 0240 1268     		ldr	r2, [r2]
 2706 0242 9268     		ldr	r2, [r2, #8]
 2707 0244 42F40002 		orr	r2, r2, #8388608
 2708 0248 9A60     		str	r2, [r3, #8]
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 2709              		.loc 1 1770 0
 2710 024a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccLVxKvm.s 			page 89


 2711 024c 1B68     		ldr	r3, [r3]
 2712 024e 102B     		cmp	r3, #16
 2713 0250 1BD1     		bne	.L141
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 2714              		.loc 1 1774 0
 2715 0252 144B     		ldr	r3, .L145+4
 2716 0254 1B68     		ldr	r3, [r3]
 2717 0256 144A     		ldr	r2, .L145+8
 2718 0258 A2FB0323 		umull	r2, r3, r2, r3
 2719 025c 9A0C     		lsrs	r2, r3, #18
 2720 025e 1346     		mov	r3, r2
 2721 0260 9B00     		lsls	r3, r3, #2
 2722 0262 1344     		add	r3, r3, r2
 2723 0264 5B00     		lsls	r3, r3, #1
 2724 0266 BB60     		str	r3, [r7, #8]
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
 2725              		.loc 1 1775 0
 2726 0268 02E0     		b	.L143
 2727              	.L144:
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
 2728              		.loc 1 1777 0
 2729 026a BB68     		ldr	r3, [r7, #8]
 2730 026c 013B     		subs	r3, r3, #1
 2731 026e BB60     		str	r3, [r7, #8]
 2732              	.L143:
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
 2733              		.loc 1 1775 0
 2734 0270 BB68     		ldr	r3, [r7, #8]
 2735 0272 002B     		cmp	r3, #0
 2736 0274 F9D1     		bne	.L144
 2737 0276 08E0     		b	.L141
 2738              	.L142:
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2739              		.loc 1 1785 0
 2740 0278 7B68     		ldr	r3, [r7, #4]
 2741 027a 9B6A     		ldr	r3, [r3, #40]
 2742 027c 43F02002 		orr	r2, r3, #32
 2743 0280 7B68     		ldr	r3, [r7, #4]
 2744 0282 9A62     		str	r2, [r3, #40]
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 2745              		.loc 1 1787 0
 2746 0284 0123     		movs	r3, #1
 2747 0286 87F85F30 		strb	r3, [r7, #95]
 2748              	.L141:
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccLVxKvm.s 			page 90


1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2749              		.loc 1 1792 0
 2750 028a 7B68     		ldr	r3, [r7, #4]
 2751 028c 0022     		movs	r2, #0
 2752 028e 83F82420 		strb	r2, [r3, #36]
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2753              		.loc 1 1795 0
 2754 0292 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 2755              	.L124:
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2756              		.loc 1 1796 0
 2757 0296 1846     		mov	r0, r3
 2758 0298 6037     		adds	r7, r7, #96
 2759              	.LCFI100:
 2760              		.cfi_def_cfa_offset 8
 2761 029a BD46     		mov	sp, r7
 2762              	.LCFI101:
 2763              		.cfi_def_cfa_register 13
 2764              		@ sp needed
 2765 029c 90BC     		pop	{r4, r7}
 2766              	.LCFI102:
 2767              		.cfi_restore 7
 2768              		.cfi_restore 4
 2769              		.cfi_def_cfa_offset 0
 2770 029e 7047     		bx	lr
 2771              	.L146:
 2772              		.align	2
 2773              	.L145:
 2774 02a0 00240140 		.word	1073816576
 2775 02a4 00000000 		.word	SystemCoreClock
 2776 02a8 83DE1B43 		.word	1125899907
 2777              		.cfi_endproc
 2778              	.LFE81:
 2780              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2781              		.align	2
 2782              		.global	HAL_ADC_AnalogWDGConfig
 2783              		.thumb
 2784              		.thumb_func
 2786              	HAL_ADC_AnalogWDGConfig:
 2787              	.LFB82:
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/ccLVxKvm.s 			page 91


1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2788              		.loc 1 1813 0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 8
 2791              		@ frame_needed = 1, uses_anonymous_args = 0
 2792              		@ link register save eliminated.
 2793 0000 80B4     		push	{r7}
 2794              	.LCFI103:
 2795              		.cfi_def_cfa_offset 4
 2796              		.cfi_offset 7, -4
 2797 0002 83B0     		sub	sp, sp, #12
 2798              	.LCFI104:
 2799              		.cfi_def_cfa_offset 16
 2800 0004 00AF     		add	r7, sp, #0
 2801              	.LCFI105:
 2802              		.cfi_def_cfa_register 7
 2803 0006 7860     		str	r0, [r7, #4]
 2804 0008 3960     		str	r1, [r7]
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 2805              		.loc 1 1821 0
 2806 000a 3B68     		ldr	r3, [r7]
 2807 000c 1B68     		ldr	r3, [r3]
 2808 000e 254A     		ldr	r2, .L153
 2809 0010 9342     		cmp	r3, r2
 2810 0012 03D0     		beq	.L148
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2811              		.loc 1 1822 0 discriminator 1
 2812 0014 3B68     		ldr	r3, [r7]
 2813 0016 1B68     		ldr	r3, [r3]
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2814              		.loc 1 1821 0 discriminator 1
 2815 0018 234A     		ldr	r2, .L153+4
 2816 001a 9342     		cmp	r3, r2
 2817              	.L148:
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2818              		.loc 1 1829 0
 2819 001c 7B68     		ldr	r3, [r7, #4]
 2820 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2821 0022 012B     		cmp	r3, #1
 2822 0024 01D1     		bne	.L149
ARM GAS  /tmp/ccLVxKvm.s 			page 92


 2823              		.loc 1 1829 0 is_stmt 0 discriminator 1
 2824 0026 0223     		movs	r3, #2
 2825 0028 35E0     		b	.L150
 2826              	.L149:
 2827              		.loc 1 1829 0 discriminator 2
 2828 002a 7B68     		ldr	r3, [r7, #4]
 2829 002c 0122     		movs	r2, #1
 2830 002e 83F82420 		strb	r2, [r3, #36]
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 2831              		.loc 1 1834 0 is_stmt 1 discriminator 2
 2832 0032 3B68     		ldr	r3, [r7]
 2833 0034 9B68     		ldr	r3, [r3, #8]
 2834 0036 012B     		cmp	r3, #1
 2835 0038 08D1     		bne	.L151
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2836              		.loc 1 1837 0
 2837 003a 7B68     		ldr	r3, [r7, #4]
 2838 003c 1B68     		ldr	r3, [r3]
 2839 003e 7A68     		ldr	r2, [r7, #4]
 2840 0040 1268     		ldr	r2, [r2]
 2841 0042 5268     		ldr	r2, [r2, #4]
 2842 0044 42F04002 		orr	r2, r2, #64
 2843 0048 5A60     		str	r2, [r3, #4]
 2844 004a 07E0     		b	.L152
 2845              	.L151:
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2846              		.loc 1 1842 0
 2847 004c 7B68     		ldr	r3, [r7, #4]
 2848 004e 1B68     		ldr	r3, [r3]
 2849 0050 7A68     		ldr	r2, [r7, #4]
 2850 0052 1268     		ldr	r2, [r2]
 2851 0054 5268     		ldr	r2, [r2, #4]
 2852 0056 22F04002 		bic	r2, r2, #64
 2853 005a 5A60     		str	r2, [r3, #4]
 2854              	.L152:
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
 2855              		.loc 1 1850 0
 2856 005c 7B68     		ldr	r3, [r7, #4]
 2857 005e 1A68     		ldr	r2, [r3]
 2858 0060 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLVxKvm.s 			page 93


 2859 0062 1B68     		ldr	r3, [r3]
 2860 0064 5968     		ldr	r1, [r3, #4]
 2861 0066 114B     		ldr	r3, .L153+8
 2862 0068 0B40     		ands	r3, r3, r1
 2863 006a 3968     		ldr	r1, [r7]
 2864 006c 0868     		ldr	r0, [r1]
 2865 006e 3968     		ldr	r1, [r7]
 2866 0070 4968     		ldr	r1, [r1, #4]
 2867 0072 0143     		orrs	r1, r1, r0
 2868 0074 0B43     		orrs	r3, r3, r1
 2869 0076 5360     		str	r3, [r2, #4]
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 2870              		.loc 1 1859 0
 2871 0078 7B68     		ldr	r3, [r7, #4]
 2872 007a 1B68     		ldr	r3, [r3]
 2873 007c 3A68     		ldr	r2, [r7]
 2874 007e D268     		ldr	r2, [r2, #12]
 2875 0080 5A62     		str	r2, [r3, #36]
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 2876              		.loc 1 1862 0
 2877 0082 7B68     		ldr	r3, [r7, #4]
 2878 0084 1B68     		ldr	r3, [r3]
 2879 0086 3A68     		ldr	r2, [r7]
 2880 0088 1269     		ldr	r2, [r2, #16]
 2881 008a 9A62     		str	r2, [r3, #40]
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2882              		.loc 1 1865 0
 2883 008c 7B68     		ldr	r3, [r7, #4]
 2884 008e 0022     		movs	r2, #0
 2885 0090 83F82420 		strb	r2, [r3, #36]
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 2886              		.loc 1 1868 0
 2887 0094 0023     		movs	r3, #0
 2888              	.L150:
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2889              		.loc 1 1869 0
 2890 0096 1846     		mov	r0, r3
 2891 0098 0C37     		adds	r7, r7, #12
 2892              	.LCFI106:
 2893              		.cfi_def_cfa_offset 4
 2894 009a BD46     		mov	sp, r7
 2895              	.LCFI107:
 2896              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccLVxKvm.s 			page 94


 2897              		@ sp needed
 2898 009c 5DF8047B 		ldr	r7, [sp], #4
 2899              	.LCFI108:
 2900              		.cfi_restore 7
 2901              		.cfi_def_cfa_offset 0
 2902 00a0 7047     		bx	lr
 2903              	.L154:
 2904 00a2 00BF     		.align	2
 2905              	.L153:
 2906 00a4 00028000 		.word	8389120
 2907 00a8 00024000 		.word	4194816
 2908 00ac E0FD3FFF 		.word	-12583456
 2909              		.cfi_endproc
 2910              	.LFE82:
 2912              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2913              		.align	2
 2914              		.global	HAL_ADC_GetState
 2915              		.thumb
 2916              		.thumb_func
 2918              	HAL_ADC_GetState:
 2919              	.LFB83:
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2920              		.loc 1 1900 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 8
 2923              		@ frame_needed = 1, uses_anonymous_args = 0
 2924              		@ link register save eliminated.
ARM GAS  /tmp/ccLVxKvm.s 			page 95


 2925 0000 80B4     		push	{r7}
 2926              	.LCFI109:
 2927              		.cfi_def_cfa_offset 4
 2928              		.cfi_offset 7, -4
 2929 0002 83B0     		sub	sp, sp, #12
 2930              	.LCFI110:
 2931              		.cfi_def_cfa_offset 16
 2932 0004 00AF     		add	r7, sp, #0
 2933              	.LCFI111:
 2934              		.cfi_def_cfa_register 7
 2935 0006 7860     		str	r0, [r7, #4]
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
 2936              		.loc 1 1902 0
 2937 0008 7B68     		ldr	r3, [r7, #4]
 2938 000a 9B6A     		ldr	r3, [r3, #40]
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2939              		.loc 1 1903 0
 2940 000c 1846     		mov	r0, r3
 2941 000e 0C37     		adds	r7, r7, #12
 2942              	.LCFI112:
 2943              		.cfi_def_cfa_offset 4
 2944 0010 BD46     		mov	sp, r7
 2945              	.LCFI113:
 2946              		.cfi_def_cfa_register 13
 2947              		@ sp needed
 2948 0012 5DF8047B 		ldr	r7, [sp], #4
 2949              	.LCFI114:
 2950              		.cfi_restore 7
 2951              		.cfi_def_cfa_offset 0
 2952 0016 7047     		bx	lr
 2953              		.cfi_endproc
 2954              	.LFE83:
 2956              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2957              		.align	2
 2958              		.global	HAL_ADC_GetError
 2959              		.thumb
 2960              		.thumb_func
 2962              	HAL_ADC_GetError:
 2963              	.LFB84:
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2964              		.loc 1 1911 0
 2965              		.cfi_startproc
 2966              		@ args = 0, pretend = 0, frame = 8
 2967              		@ frame_needed = 1, uses_anonymous_args = 0
 2968              		@ link register save eliminated.
 2969 0000 80B4     		push	{r7}
 2970              	.LCFI115:
 2971              		.cfi_def_cfa_offset 4
 2972              		.cfi_offset 7, -4
ARM GAS  /tmp/ccLVxKvm.s 			page 96


 2973 0002 83B0     		sub	sp, sp, #12
 2974              	.LCFI116:
 2975              		.cfi_def_cfa_offset 16
 2976 0004 00AF     		add	r7, sp, #0
 2977              	.LCFI117:
 2978              		.cfi_def_cfa_register 7
 2979 0006 7860     		str	r0, [r7, #4]
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 2980              		.loc 1 1912 0
 2981 0008 7B68     		ldr	r3, [r7, #4]
 2982 000a DB6A     		ldr	r3, [r3, #44]
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2983              		.loc 1 1913 0
 2984 000c 1846     		mov	r0, r3
 2985 000e 0C37     		adds	r7, r7, #12
 2986              	.LCFI118:
 2987              		.cfi_def_cfa_offset 4
 2988 0010 BD46     		mov	sp, r7
 2989              	.LCFI119:
 2990              		.cfi_def_cfa_register 13
 2991              		@ sp needed
 2992 0012 5DF8047B 		ldr	r7, [sp], #4
 2993              	.LCFI120:
 2994              		.cfi_restore 7
 2995              		.cfi_def_cfa_offset 0
 2996 0016 7047     		bx	lr
 2997              		.cfi_endproc
 2998              	.LFE84:
 3000              		.section	.text.ADC_Enable,"ax",%progbits
 3001              		.align	2
 3002              		.global	ADC_Enable
 3003              		.thumb
 3004              		.thumb_func
 3006              	ADC_Enable:
 3007              	.LFB85:
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
ARM GAS  /tmp/ccLVxKvm.s 			page 97


 3008              		.loc 1 1935 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 16
 3011              		@ frame_needed = 1, uses_anonymous_args = 0
 3012 0000 80B5     		push	{r7, lr}
 3013              	.LCFI121:
 3014              		.cfi_def_cfa_offset 8
 3015              		.cfi_offset 7, -8
 3016              		.cfi_offset 14, -4
 3017 0002 84B0     		sub	sp, sp, #16
 3018              	.LCFI122:
 3019              		.cfi_def_cfa_offset 24
 3020 0004 00AF     		add	r7, sp, #0
 3021              	.LCFI123:
 3022              		.cfi_def_cfa_register 7
 3023 0006 7860     		str	r0, [r7, #4]
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 3024              		.loc 1 1936 0
 3025 0008 0023     		movs	r3, #0
 3026 000a FB60     		str	r3, [r7, #12]
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 3027              		.loc 1 1937 0
 3028 000c 0023     		movs	r3, #0
 3029 000e BB60     		str	r3, [r7, #8]
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3030              		.loc 1 1943 0
 3031 0010 7B68     		ldr	r3, [r7, #4]
 3032 0012 1B68     		ldr	r3, [r3]
 3033 0014 9B68     		ldr	r3, [r3, #8]
 3034 0016 03F00103 		and	r3, r3, #1
 3035 001a 002B     		cmp	r3, #0
 3036 001c 39D1     		bne	.L160
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3037              		.loc 1 1946 0
 3038 001e 7B68     		ldr	r3, [r7, #4]
 3039 0020 1B68     		ldr	r3, [r3]
 3040 0022 7A68     		ldr	r2, [r7, #4]
 3041 0024 1268     		ldr	r2, [r2]
 3042 0026 9268     		ldr	r2, [r2, #8]
 3043 0028 42F00102 		orr	r2, r2, #1
 3044 002c 9A60     		str	r2, [r3, #8]
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 3045              		.loc 1 1950 0
 3046 002e 1B4B     		ldr	r3, .L166
 3047 0030 1B68     		ldr	r3, [r3]
 3048 0032 1B4A     		ldr	r2, .L166+4
 3049 0034 A2FB0323 		umull	r2, r3, r2, r3
ARM GAS  /tmp/ccLVxKvm.s 			page 98


 3050 0038 9B0C     		lsrs	r3, r3, #18
 3051 003a BB60     		str	r3, [r7, #8]
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
 3052              		.loc 1 1951 0
 3053 003c 02E0     		b	.L161
 3054              	.L162:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
 3055              		.loc 1 1953 0
 3056 003e BB68     		ldr	r3, [r7, #8]
 3057 0040 013B     		subs	r3, r3, #1
 3058 0042 BB60     		str	r3, [r7, #8]
 3059              	.L161:
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
 3060              		.loc 1 1951 0
 3061 0044 BB68     		ldr	r3, [r7, #8]
 3062 0046 002B     		cmp	r3, #0
 3063 0048 F9D1     		bne	.L162
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3064              		.loc 1 1957 0
 3065 004a FFF7FEFF 		bl	HAL_GetTick
 3066 004e F860     		str	r0, [r7, #12]
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
 3067              		.loc 1 1960 0
 3068 0050 18E0     		b	.L163
 3069              	.L165:
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3070              		.loc 1 1962 0
 3071 0052 FFF7FEFF 		bl	HAL_GetTick
 3072 0056 0246     		mov	r2, r0
 3073 0058 FB68     		ldr	r3, [r7, #12]
 3074 005a D31A     		subs	r3, r2, r3
 3075 005c 022B     		cmp	r3, #2
 3076 005e 11D9     		bls	.L163
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3077              		.loc 1 1965 0
 3078 0060 7B68     		ldr	r3, [r7, #4]
 3079 0062 9B6A     		ldr	r3, [r3, #40]
 3080 0064 43F01002 		orr	r2, r3, #16
 3081 0068 7B68     		ldr	r3, [r7, #4]
 3082 006a 9A62     		str	r2, [r3, #40]
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3083              		.loc 1 1968 0
 3084 006c 7B68     		ldr	r3, [r7, #4]
 3085 006e DB6A     		ldr	r3, [r3, #44]
 3086 0070 43F00102 		orr	r2, r3, #1
 3087 0074 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLVxKvm.s 			page 99


 3088 0076 DA62     		str	r2, [r3, #44]
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 3089              		.loc 1 1971 0
 3090 0078 7B68     		ldr	r3, [r7, #4]
 3091 007a 0022     		movs	r2, #0
 3092 007c 83F82420 		strb	r2, [r3, #36]
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
 3093              		.loc 1 1973 0
 3094 0080 0123     		movs	r3, #1
 3095 0082 07E0     		b	.L164
 3096              	.L163:
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3097              		.loc 1 1960 0
 3098 0084 7B68     		ldr	r3, [r7, #4]
 3099 0086 1B68     		ldr	r3, [r3]
 3100 0088 9B68     		ldr	r3, [r3, #8]
 3101 008a 03F00103 		and	r3, r3, #1
 3102 008e 002B     		cmp	r3, #0
 3103 0090 DFD0     		beq	.L165
 3104              	.L160:
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3105              		.loc 1 1979 0
 3106 0092 0023     		movs	r3, #0
 3107              	.L164:
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3108              		.loc 1 1980 0
 3109 0094 1846     		mov	r0, r3
 3110 0096 1037     		adds	r7, r7, #16
 3111              	.LCFI124:
 3112              		.cfi_def_cfa_offset 8
 3113 0098 BD46     		mov	sp, r7
 3114              	.LCFI125:
 3115              		.cfi_def_cfa_register 13
 3116              		@ sp needed
 3117 009a 80BD     		pop	{r7, pc}
 3118              	.L167:
 3119              		.align	2
 3120              	.L166:
 3121 009c 00000000 		.word	SystemCoreClock
 3122 00a0 83DE1B43 		.word	1125899907
 3123              		.cfi_endproc
 3124              	.LFE85:
 3126              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 3127              		.align	2
 3128              		.global	ADC_ConversionStop_Disable
 3129              		.thumb
 3130              		.thumb_func
 3132              	ADC_ConversionStop_Disable:
 3133              	.LFB86:
ARM GAS  /tmp/ccLVxKvm.s 			page 100


1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3134              		.loc 1 1990 0
 3135              		.cfi_startproc
 3136              		@ args = 0, pretend = 0, frame = 16
 3137              		@ frame_needed = 1, uses_anonymous_args = 0
 3138 0000 80B5     		push	{r7, lr}
 3139              	.LCFI126:
 3140              		.cfi_def_cfa_offset 8
 3141              		.cfi_offset 7, -8
 3142              		.cfi_offset 14, -4
 3143 0002 84B0     		sub	sp, sp, #16
 3144              	.LCFI127:
 3145              		.cfi_def_cfa_offset 24
 3146 0004 00AF     		add	r7, sp, #0
 3147              	.LCFI128:
 3148              		.cfi_def_cfa_register 7
 3149 0006 7860     		str	r0, [r7, #4]
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 3150              		.loc 1 1991 0
 3151 0008 0023     		movs	r3, #0
 3152 000a FB60     		str	r3, [r7, #12]
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3153              		.loc 1 1994 0
 3154 000c 7B68     		ldr	r3, [r7, #4]
 3155 000e 1B68     		ldr	r3, [r3]
 3156 0010 9B68     		ldr	r3, [r3, #8]
 3157 0012 03F00103 		and	r3, r3, #1
 3158 0016 002B     		cmp	r3, #0
 3159 0018 27D0     		beq	.L169
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
 3160              		.loc 1 1997 0
 3161 001a 7B68     		ldr	r3, [r7, #4]
 3162 001c 1B68     		ldr	r3, [r3]
 3163 001e 7A68     		ldr	r2, [r7, #4]
 3164 0020 1268     		ldr	r2, [r2]
 3165 0022 9268     		ldr	r2, [r2, #8]
 3166 0024 22F00102 		bic	r2, r2, #1
 3167 0028 9A60     		str	r2, [r3, #8]
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3168              		.loc 1 2000 0
 3169 002a FFF7FEFF 		bl	HAL_GetTick
 3170 002e F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccLVxKvm.s 			page 101


2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
 3171              		.loc 1 2003 0
 3172 0030 14E0     		b	.L170
 3173              	.L172:
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3174              		.loc 1 2005 0
 3175 0032 FFF7FEFF 		bl	HAL_GetTick
 3176 0036 0246     		mov	r2, r0
 3177 0038 FB68     		ldr	r3, [r7, #12]
 3178 003a D31A     		subs	r3, r2, r3
 3179 003c 022B     		cmp	r3, #2
 3180 003e 0DD9     		bls	.L170
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3181              		.loc 1 2008 0
 3182 0040 7B68     		ldr	r3, [r7, #4]
 3183 0042 9B6A     		ldr	r3, [r3, #40]
 3184 0044 43F01002 		orr	r2, r3, #16
 3185 0048 7B68     		ldr	r3, [r7, #4]
 3186 004a 9A62     		str	r2, [r3, #40]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3187              		.loc 1 2011 0
 3188 004c 7B68     		ldr	r3, [r7, #4]
 3189 004e DB6A     		ldr	r3, [r3, #44]
 3190 0050 43F00102 		orr	r2, r3, #1
 3191 0054 7B68     		ldr	r3, [r7, #4]
 3192 0056 DA62     		str	r2, [r3, #44]
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
 3193              		.loc 1 2013 0
 3194 0058 0123     		movs	r3, #1
 3195 005a 07E0     		b	.L171
 3196              	.L170:
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3197              		.loc 1 2003 0
 3198 005c 7B68     		ldr	r3, [r7, #4]
 3199 005e 1B68     		ldr	r3, [r3]
 3200 0060 9B68     		ldr	r3, [r3, #8]
 3201 0062 03F00103 		and	r3, r3, #1
 3202 0066 002B     		cmp	r3, #0
 3203 0068 E3D1     		bne	.L172
 3204              	.L169:
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3205              		.loc 1 2019 0
 3206 006a 0023     		movs	r3, #0
 3207              	.L171:
ARM GAS  /tmp/ccLVxKvm.s 			page 102


2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3208              		.loc 1 2020 0
 3209 006c 1846     		mov	r0, r3
 3210 006e 1037     		adds	r7, r7, #16
 3211              	.LCFI129:
 3212              		.cfi_def_cfa_offset 8
 3213 0070 BD46     		mov	sp, r7
 3214              	.LCFI130:
 3215              		.cfi_def_cfa_register 13
 3216              		@ sp needed
 3217 0072 80BD     		pop	{r7, pc}
 3218              		.cfi_endproc
 3219              	.LFE86:
 3221              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3222              		.align	2
 3223              		.global	ADC_DMAConvCplt
 3224              		.thumb
 3225              		.thumb_func
 3227              	ADC_DMAConvCplt:
 3228              	.LFB87:
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3229              		.loc 1 2028 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 16
 3232              		@ frame_needed = 1, uses_anonymous_args = 0
 3233 0000 80B5     		push	{r7, lr}
 3234              	.LCFI131:
 3235              		.cfi_def_cfa_offset 8
 3236              		.cfi_offset 7, -8
 3237              		.cfi_offset 14, -4
 3238 0002 84B0     		sub	sp, sp, #16
 3239              	.LCFI132:
 3240              		.cfi_def_cfa_offset 24
 3241 0004 00AF     		add	r7, sp, #0
 3242              	.LCFI133:
 3243              		.cfi_def_cfa_register 7
 3244 0006 7860     		str	r0, [r7, #4]
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3245              		.loc 1 2030 0
 3246 0008 7B68     		ldr	r3, [r7, #4]
 3247 000a 5B6A     		ldr	r3, [r3, #36]
 3248 000c FB60     		str	r3, [r7, #12]
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3249              		.loc 1 2033 0
 3250 000e FB68     		ldr	r3, [r7, #12]
 3251 0010 9B6A     		ldr	r3, [r3, #40]
 3252 0012 03F05003 		and	r3, r3, #80
ARM GAS  /tmp/ccLVxKvm.s 			page 103


 3253 0016 002B     		cmp	r3, #0
 3254 0018 27D1     		bne	.L174
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3255              		.loc 1 2036 0
 3256 001a FB68     		ldr	r3, [r7, #12]
 3257 001c 9B6A     		ldr	r3, [r3, #40]
 3258 001e 43F40072 		orr	r2, r3, #512
 3259 0022 FB68     		ldr	r3, [r7, #12]
 3260 0024 9A62     		str	r2, [r3, #40]
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3261              		.loc 1 2043 0
 3262 0026 FB68     		ldr	r3, [r7, #12]
 3263 0028 1B68     		ldr	r3, [r3]
 3264 002a 9B68     		ldr	r3, [r3, #8]
 3265 002c 03F46023 		and	r3, r3, #917504
 3266 0030 B3F5602F 		cmp	r3, #917504
 3267 0034 15D1     		bne	.L175
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3268              		.loc 1 2044 0 discriminator 1
 3269 0036 FB68     		ldr	r3, [r7, #12]
 3270 0038 DB68     		ldr	r3, [r3, #12]
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3271              		.loc 1 2043 0 discriminator 1
 3272 003a 002B     		cmp	r3, #0
 3273 003c 11D1     		bne	.L175
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3274              		.loc 1 2047 0
 3275 003e FB68     		ldr	r3, [r7, #12]
 3276 0040 9B6A     		ldr	r3, [r3, #40]
 3277 0042 23F48072 		bic	r2, r3, #256
 3278 0046 FB68     		ldr	r3, [r7, #12]
 3279 0048 9A62     		str	r2, [r3, #40]
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3280              		.loc 1 2049 0
 3281 004a FB68     		ldr	r3, [r7, #12]
 3282 004c 9B6A     		ldr	r3, [r3, #40]
 3283 004e 03F48053 		and	r3, r3, #4096
 3284 0052 002B     		cmp	r3, #0
 3285 0054 05D1     		bne	.L175
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3286              		.loc 1 2051 0
 3287 0056 FB68     		ldr	r3, [r7, #12]
 3288 0058 9B6A     		ldr	r3, [r3, #40]
 3289 005a 43F00102 		orr	r2, r3, #1
 3290 005e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccLVxKvm.s 			page 104


 3291 0060 9A62     		str	r2, [r3, #40]
 3292              	.L175:
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 3293              		.loc 1 2056 0
 3294 0062 F868     		ldr	r0, [r7, #12]
 3295 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 3296 0068 04E0     		b	.L173
 3297              	.L174:
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 3298              		.loc 1 2061 0
 3299 006a FB68     		ldr	r3, [r7, #12]
 3300 006c 1B6A     		ldr	r3, [r3, #32]
 3301 006e 1B6B     		ldr	r3, [r3, #48]
 3302 0070 7868     		ldr	r0, [r7, #4]
 3303 0072 9847     		blx	r3
 3304              	.L173:
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3305              		.loc 1 2063 0
 3306 0074 1037     		adds	r7, r7, #16
 3307              	.LCFI134:
 3308              		.cfi_def_cfa_offset 8
 3309 0076 BD46     		mov	sp, r7
 3310              	.LCFI135:
 3311              		.cfi_def_cfa_register 13
 3312              		@ sp needed
 3313 0078 80BD     		pop	{r7, pc}
 3314              		.cfi_endproc
 3315              	.LFE87:
 3317 007a 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3318              		.align	2
 3319              		.global	ADC_DMAHalfConvCplt
 3320              		.thumb
 3321              		.thumb_func
 3323              	ADC_DMAHalfConvCplt:
 3324              	.LFB88:
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3325              		.loc 1 2071 0
 3326              		.cfi_startproc
 3327              		@ args = 0, pretend = 0, frame = 16
 3328              		@ frame_needed = 1, uses_anonymous_args = 0
 3329 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccLVxKvm.s 			page 105


 3330              	.LCFI136:
 3331              		.cfi_def_cfa_offset 8
 3332              		.cfi_offset 7, -8
 3333              		.cfi_offset 14, -4
 3334 0002 84B0     		sub	sp, sp, #16
 3335              	.LCFI137:
 3336              		.cfi_def_cfa_offset 24
 3337 0004 00AF     		add	r7, sp, #0
 3338              	.LCFI138:
 3339              		.cfi_def_cfa_register 7
 3340 0006 7860     		str	r0, [r7, #4]
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3341              		.loc 1 2073 0
 3342 0008 7B68     		ldr	r3, [r7, #4]
 3343 000a 5B6A     		ldr	r3, [r3, #36]
 3344 000c FB60     		str	r3, [r7, #12]
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 3345              		.loc 1 2076 0
 3346 000e F868     		ldr	r0, [r7, #12]
 3347 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3348              		.loc 1 2077 0
 3349 0014 1037     		adds	r7, r7, #16
 3350              	.LCFI139:
 3351              		.cfi_def_cfa_offset 8
 3352 0016 BD46     		mov	sp, r7
 3353              	.LCFI140:
 3354              		.cfi_def_cfa_register 13
 3355              		@ sp needed
 3356 0018 80BD     		pop	{r7, pc}
 3357              		.cfi_endproc
 3358              	.LFE88:
 3360 001a 00BF     		.section	.text.ADC_DMAError,"ax",%progbits
 3361              		.align	2
 3362              		.global	ADC_DMAError
 3363              		.thumb
 3364              		.thumb_func
 3366              	ADC_DMAError:
 3367              	.LFB89:
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3368              		.loc 1 2085 0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 16
 3371              		@ frame_needed = 1, uses_anonymous_args = 0
 3372 0000 80B5     		push	{r7, lr}
 3373              	.LCFI141:
 3374              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLVxKvm.s 			page 106


 3375              		.cfi_offset 7, -8
 3376              		.cfi_offset 14, -4
 3377 0002 84B0     		sub	sp, sp, #16
 3378              	.LCFI142:
 3379              		.cfi_def_cfa_offset 24
 3380 0004 00AF     		add	r7, sp, #0
 3381              	.LCFI143:
 3382              		.cfi_def_cfa_register 7
 3383 0006 7860     		str	r0, [r7, #4]
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3384              		.loc 1 2087 0
 3385 0008 7B68     		ldr	r3, [r7, #4]
 3386 000a 5B6A     		ldr	r3, [r3, #36]
 3387 000c FB60     		str	r3, [r7, #12]
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3388              		.loc 1 2090 0
 3389 000e FB68     		ldr	r3, [r7, #12]
 3390 0010 9B6A     		ldr	r3, [r3, #40]
 3391 0012 43F04002 		orr	r2, r3, #64
 3392 0016 FB68     		ldr	r3, [r7, #12]
 3393 0018 9A62     		str	r2, [r3, #40]
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3394              		.loc 1 2093 0
 3395 001a FB68     		ldr	r3, [r7, #12]
 3396 001c DB6A     		ldr	r3, [r3, #44]
 3397 001e 43F00402 		orr	r2, r3, #4
 3398 0022 FB68     		ldr	r3, [r7, #12]
 3399 0024 DA62     		str	r2, [r3, #44]
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 3400              		.loc 1 2096 0
 3401 0026 F868     		ldr	r0, [r7, #12]
 3402 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3403              		.loc 1 2097 0
 3404 002c 1037     		adds	r7, r7, #16
 3405              	.LCFI144:
 3406              		.cfi_def_cfa_offset 8
 3407 002e BD46     		mov	sp, r7
 3408              	.LCFI145:
 3409              		.cfi_def_cfa_register 13
 3410              		@ sp needed
 3411 0030 80BD     		pop	{r7, pc}
 3412              		.cfi_endproc
 3413              	.LFE89:
 3415 0032 00BF     		.text
 3416              	.Letext0:
 3417              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 3418              		.file 4 "/usr/include/newlib/stdint.h"
 3419              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f100xb.h"
 3420              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
ARM GAS  /tmp/ccLVxKvm.s 			page 107


 3421              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3422              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3423              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 3424              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 3425              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/ccLVxKvm.s 			page 108


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc.c
     /tmp/ccLVxKvm.s:19     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccLVxKvm.s:24     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccLVxKvm.s:591    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccLVxKvm.s:3132   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/ccLVxKvm.s:350    .text.HAL_ADC_Init:00000000000001f4 $d
     /tmp/ccLVxKvm.s:356    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccLVxKvm.s:361    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccLVxKvm.s:631    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccLVxKvm.s:580    .text.HAL_ADC_DeInit:000000000000017c $d
     /tmp/ccLVxKvm.s:586    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccLVxKvm.s:626    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccLVxKvm.s:666    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccLVxKvm.s:671    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccLVxKvm.s:3006   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccLVxKvm.s:820    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccLVxKvm.s:825    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccLVxKvm.s:898    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccLVxKvm.s:903    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccLVxKvm.s:1210   .text.HAL_ADC_PollForConversion:00000000000001dc $d
     /tmp/ccLVxKvm.s:1220   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccLVxKvm.s:1225   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccLVxKvm.s:1322   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccLVxKvm.s:1327   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccLVxKvm.s:1484   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccLVxKvm.s:1489   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccLVxKvm.s:1570   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccLVxKvm.s:1575   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccLVxKvm.s:1760   .text.HAL_ADC_Start_DMA:000000000000012c $d
     /tmp/ccLVxKvm.s:3227   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccLVxKvm.s:3323   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccLVxKvm.s:3366   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccLVxKvm.s:1767   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccLVxKvm.s:1772   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccLVxKvm.s:1872   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccLVxKvm.s:1877   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccLVxKvm.s:1917   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccLVxKvm.s:1922   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccLVxKvm.s:2156   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccLVxKvm.s:2236   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccLVxKvm.s:2151   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccLVxKvm.s:2191   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccLVxKvm.s:2196   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccLVxKvm.s:2231   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccLVxKvm.s:2271   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccLVxKvm.s:2276   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccLVxKvm.s:2311   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccLVxKvm.s:2316   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccLVxKvm.s:2774   .text.HAL_ADC_ConfigChannel:00000000000002a0 $d
     /tmp/ccLVxKvm.s:2781   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccLVxKvm.s:2786   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccLVxKvm.s:2906   .text.HAL_ADC_AnalogWDGConfig:00000000000000a4 $d
     /tmp/ccLVxKvm.s:2913   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccLVxKvm.s:2918   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccLVxKvm.s:2957   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccLVxKvm.s:2962   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
ARM GAS  /tmp/ccLVxKvm.s 			page 109


     /tmp/ccLVxKvm.s:3001   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccLVxKvm.s:3121   .text.ADC_Enable:000000000000009c $d
     /tmp/ccLVxKvm.s:3127   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/ccLVxKvm.s:3222   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccLVxKvm.s:3318   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccLVxKvm.s:3361   .text.ADC_DMAError:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
